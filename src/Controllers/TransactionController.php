<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellDataReportingAPIsLib\Exceptions\ApiException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionCardusagesummary400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionCardusagesummary401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionCardusagesummary403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionCardusagesummary404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionCardusagesummary500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionExceptions400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionExceptions401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionExceptions403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionExceptions404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionExceptions500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFees400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFees401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFees403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFees404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFees500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFeessummary400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFeessummary401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFeessummary403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFeessummary404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFeessummary500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFuelconsumption400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFuelconsumption401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFuelconsumption403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFuelconsumption404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionFuelconsumption500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionMultipayerspricedtransactions400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionMultipayerspricedtransactions401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionMultipayerspricedtransactions403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionMultipayerspricedtransactions404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionMultipayerspricedtransactions500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactions400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactions401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactions403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactions404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactions500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactionssummary400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactionssummary401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactionssummary403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactionssummary404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionPricedtransactionssummary500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionUpdateodometer400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionUpdateodometer401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionUpdateodometer403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionUpdateodometer404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionUpdateodometer500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedbonus400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedbonus401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedbonus403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedbonus404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedbonus500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedpricing400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedpricing401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedpricing403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedpricing404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\FleetmanagementV1TransactionVolumebasedpricing500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Priced400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Priced401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Priced403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Priced404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Priced500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Recent400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Recent401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Recent403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Recent404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\TransactionDataV1Recent500ErrorException;
use ShellDataReportingAPIsLib\Models\CardUsageSummaryRequest;
use ShellDataReportingAPIsLib\Models\CardUsageSummaryResponse;
use ShellDataReportingAPIsLib\Models\FeeSummaryResponse;
use ShellDataReportingAPIsLib\Models\FuelConsumptionRequest;
use ShellDataReportingAPIsLib\Models\FuelConsumptionResponse;
use ShellDataReportingAPIsLib\Models\MultiPricedTransactionRequest;
use ShellDataReportingAPIsLib\Models\MultiPricedTransactionResponse;
use ShellDataReportingAPIsLib\Models\PricedTransactionRequestV2;
use ShellDataReportingAPIsLib\Models\PricedTransactionResponse;
use ShellDataReportingAPIsLib\Models\PricedTransactionResponseV2;
use ShellDataReportingAPIsLib\Models\PricedTransSummaryResponse;
use ShellDataReportingAPIsLib\Models\PriceTransactionRequest;
use ShellDataReportingAPIsLib\Models\PriceTransSummaryRequest;
use ShellDataReportingAPIsLib\Models\RecentTransactionRequest;
use ShellDataReportingAPIsLib\Models\RecentTransactionsResponse;
use ShellDataReportingAPIsLib\Models\TransactionExceptionsRequest;
use ShellDataReportingAPIsLib\Models\TransactionExceptionsResponse;
use ShellDataReportingAPIsLib\Models\TransactionFeesRequest;
use ShellDataReportingAPIsLib\Models\TransactionFeesResponse;
use ShellDataReportingAPIsLib\Models\UpdateOdometerRequest;
use ShellDataReportingAPIsLib\Models\UpdateOdometerResponse;
use ShellDataReportingAPIsLib\Models\VolumeBasedBonusRequest;
use ShellDataReportingAPIsLib\Models\VolumeBasedBonusResponse;
use ShellDataReportingAPIsLib\Models\VolumeBasedPricingRequest;
use ShellDataReportingAPIsLib\Models\VolumeBasedPricingResponse;

class TransactionController extends BaseController
{
    /**
     * This API allows querying transaction data (i.e. Priced, Billed and Unbilled sales items). It
     * provides a flexible search criteria and supports paging.
     *
     *
     *
     * Transactions that are posted but not yet priced, billed or that are in error will not be returned by
     * this API. The API also supports returning Fee Items.
     *
     *
     *
     * #### Supported operations
     *
     * * Get sales items and fee transactions
     *
     * * Search by invoice status
     *
     * * Search by fixed date period
     *
     * * Search by date range
     *
     * * Search by account
     *
     * * Search by card
     *
     * * Get sales items only
     *
     * * Search by transaction Id or location
     *
     * * Search by transaction posting date
     *
     * * Search by invoice number or date
     *
     * * Search by driver name or vehicle registration number
     *
     * * Search by card group
     *
     * * Search by fuel only transactions
     *
     * * Search by product
     *
     *
     *
     * This API fetches transactions for a period based on the below parameters and priority order:
     *
     * 1.    InvoiceNumber
     *
     * 2.    InvoiceDate
     *
     * 3.    FromDate, ToDate
     *
     * 4.    PostingFromDate, PostingToDate (Can be used only when IncludeFees = false)
     *
     * 5.    InvoiceDateFrom, InvoiceDateTo
     *
     * 6.    Period
     *
     *
     *
     * This API considers only one of the above set of parameters at a time. For example, if InvoiceNumber
     * and Period are provided in the input then Period is ignored and transactions associated to the given
     * invoice number are returned.
     *
     *
     *
     * If none of the above parameters are provided then last 7 days transactions will be fetched.
     *
     *
     *
     * This operation can fetch transactions that are old up to 24 (configurable) months. However, the date
     * range between any of the ‘From’ and ‘To’ dates in the above combination cannot be more than 210
     * (configurable) days.
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param PriceTransactionRequest|null $body Priced Transaction Request Body
     *
     * @return PricedTransactionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function pricedTransactions(
        string $apikey,
        string $requestId,
        ?PriceTransactionRequest $body = null
    ): PricedTransactionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/pricedtransactions'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionPricedtransactions400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionPricedtransactions401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionPricedtransactions403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionPricedtransactions404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionPricedtransactions500ErrorException::class
                )
            )
            ->type(PricedTransactionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API returns the transaction summary data (i.e. Priced, Billed and Unbilled sales items). It
     * provides a flexible search criteria.
     *
     * The API also supports returning Fee Items. Transactions posted for fee items that are in error are
     * not included in the summary.
     *
     *
     *
     * The endpoint supports the exact same search criteria as the endpoint
     * *transaction/prciedtransactions*.
     *
     *
     *
     * #### Supported operations
     *
     * * Get sales items and fee transactions
     *
     * * Search by invoice status
     *
     * * Search by fixed date period
     *
     * * Search by date range
     *
     * * Search by account
     *
     * * Search by card
     *
     * * Get sales items only
     *
     * * Search by transaction Id or location
     *
     * * Search by transaction posting date
     *
     * * Search by invoice number or date
     *
     * * Search by driver name or vehicle registration number
     *
     * * Search by card group
     *
     * * Search by fuel only transactions
     *
     * * Search by product
     *
     *
     *
     * This API fetches transactions for a period based on the below parameters and priority order:
     *
     * 1.    InvoiceNumber
     *
     * 2.    InvoiceDate
     *
     * 3.    FromDate, ToDate
     *
     * 4.    PostingFromDate, PostingToDate (Can be used only when IncludeFees = false)
     *
     * 5.    InvoiceDateFrom, InvoiceDateTo
     *
     * 6.    Period
     *
     *
     *
     * This API considers only one of the above set of parameters at a time. For example, if InvoiceNumber
     * and Period are provided in the input then Period is ignored and transactions associated to the given
     * invoice number are returned.
     *
     *
     *
     * If none of the above parameters are provided then last 7 days transactions will be fetched.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param PriceTransSummaryRequest|null $body PricedSummary RequestBody
     *
     * @return PricedTransSummaryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function pricedTransactionsSummary(
        string $apikey,
        string $requestId,
        ?PriceTransSummaryRequest $body = null
    ): PricedTransSummaryResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/pricedtransactionssummary'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionPricedtransactionssummary400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionPricedtransactionssummary401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionPricedtransactionssummary403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionPricedtransactionssummary404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionPricedtransactionssummary500ErrorException::class
                )
            )
            ->type(PricedTransSummaryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API allows querying transaction data (i.e. Priced, Billed and Unbilled sales items) for
     * multiple payers. It provides a flexible search criteria and supports paging.
     *
     *
     *
     * Transactions that are posted but not yet priced, billed or that are in error will not be returned by
     * this API. The API also supports returning Fee Items.
     *
     *
     *
     * At least one payer should be provided. Multiple payers must belong to the same payer group.
     *
     *
     *
     * #### Supported operations
     *
     * * Get sales items and fee transactions for multiple payers
     *
     * * Search by invoice status
     *
     * * Search by fixed date period
     *
     * * Search by date range
     *
     * * Get sales items only for multiple payers
     *
     * * Search by transaction location
     *
     * * Search by transaction posting date
     *
     * * Search by invoice number or date
     *
     * * Search by fuel only transactions
     *
     *
     *
     * This API fetches transactions for a period based on the below parameters and priority order:
     *
     * 1.    InvoiceNumber
     *
     * 2.    InvoiceDate
     *
     * 3.    FromDate, ToDate
     *
     * 4.    PostingFromDate, PostingToDate (Can be used only when IncludeFees = false)
     *
     * 5.    InvoiceDateFrom, InvoiceDateTo
     *
     * 6.    Period
     *
     *
     *
     * This API considers only one of the above set of parameters at a time. For example, if InvoiceNumber
     * and Period are provided in the input then Period is ignored and transactions associated to the given
     * invoice number are returned.
     *
     *
     *
     * If none of the above parameters are provided then last 7 days transactions will be fetched.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param MultiPricedTransactionRequest|null $body MultiPayer RequestBody
     *
     * @return MultiPricedTransactionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function multipricedTransactions(
        string $apikey,
        string $requestId,
        ?MultiPricedTransactionRequest $body = null
    ): MultiPricedTransactionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/multipayerspricedtransactions'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionMultipayerspricedtransactions400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionMultipayerspricedtransactions401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionMultipayerspricedtransactions403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionMultipayerspricedtransactions404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionMultipayerspricedtransactions500ErrorException::class
                )
            )
            ->type(MultiPricedTransactionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This operation is to provide the expenditure analysis for a card for the past 7 months.
     * The response contains a daily summary of the transactions (billed & unbilled) from 1st of the last 7
     * months for the requested card grouped by card, site-group and product.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param CardUsageSummaryRequest|null $body Card Usage Summary RequestBody
     *
     * @return CardUsageSummaryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cardUsageSummary(
        string $apikey,
        string $requestId,
        ?CardUsageSummaryRequest $body = null
    ): CardUsageSummaryResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/cardusagesummary'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionCardusagesummary400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionCardusagesummary401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionCardusagesummary403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionCardusagesummary404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionCardusagesummary500ErrorException::class
                )
            )
            ->type(CardUsageSummaryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API provides the details of the bonus and/or association bonus rules setup for the given
     * payer and that are active on the current date.
     * - This API also returns the details of the monthly breakup of current period consumption as well as
     * the details of the previously calculated bonus and consumption of the applicable payers.
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param VolumeBasedBonusRequest|null $body VolumeBasedBonus RequestBody
     *
     * @return VolumeBasedBonusResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function volumeBasedBonus(
        string $apikey,
        string $requestId,
        ?VolumeBasedBonusRequest $body = null
    ): VolumeBasedBonusResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/volumebasedbonus'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionVolumebasedbonus400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionVolumebasedbonus401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionVolumebasedbonus403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionVolumebasedbonus404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionVolumebasedbonus500ErrorException::class
                )
            )
            ->type(VolumeBasedBonusResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API will return the details of the in arrear fee rule applied to the payer along with details
     * of locations, products, tiers as applied.
     *
     * - It will also show historical and current volume consumption and related tier applied for the
     * following month.
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param VolumeBasedPricingRequest|null $body VolumeBasedPricing RequestBody
     *
     * @return VolumeBasedPricingResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function volumeBasedPricing(
        string $apikey,
        string $requestId,
        ?VolumeBasedPricingRequest $body = null
    ): VolumeBasedPricingResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/volumebasedpricing'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionVolumebasedpricing400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionVolumebasedpricing401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionVolumebasedpricing403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionVolumebasedpricing404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionVolumebasedpricing500ErrorException::class
                )
            )
            ->type(VolumeBasedPricingResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API returns the fee/charges levied from a  customer's account in a billing period or date range.
     * The API returns both billed and unbilled fee items.
     *
     *
     *
     * To get the summary of charges, the endpoint *transaction/feessummary* should be called with the same
     * input criteria.
     *
     *
     *
     * #### Supported operations
     *
     * * Get fees by invoice status
     *
     * * Get fees by date period
     *
     * * Get fees by account
     *
     * * Get fees by card Id or PAN
     *
     * * Get fees by fee type charges
     *
     * * Get fees including cancelled items
     *
     * * Get fees by line item description
     *
     * * Get fees by product
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param TransactionFeesRequest|null $body Transaction Fees RequestBody
     *
     * @return TransactionFeesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fees(
        string $apikey,
        string $requestId,
        ?TransactionFeesRequest $body = null
    ): TransactionFeesResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/transaction/fees')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionFees400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionFees401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionFees403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionFees404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionFees500ErrorException::class
                )
            )
            ->type(TransactionFeesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API returns the summary data of the fee/charges levied from a customer's account in a billing
     * period or date range. The API returns both billed and unbilled fee items.
     *
     *
     *
     * The endpoint supports the exact same search criteria as the endpoint *transaction/feessummary*.
     *
     *
     *
     * #### Supported operations
     *
     * * Get fees by invoice status
     *
     * * Get fees by date period
     *
     * * Get fees by account
     *
     * * Get fees by card Id or PAN
     *
     * * Get fees by fee type charges
     *
     * * Get fees including cancelled items
     *
     * * Get fees by line item description
     *
     * * Get fees by product
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param TransactionFeesRequest|null $body FeeSummary RequestBody
     *
     * @return FeeSummaryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function feeSummaryResponse(
        string $apikey,
        string $requestId,
        ?TransactionFeesRequest $body = null
    ): FeeSummaryResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/transaction/feessummary')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionFeessummary400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionFeessummary401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionFeessummary403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionFeessummary404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionFeessummary500ErrorException::class
                )
            )
            ->type(FeeSummaryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API returns the customer an overview of how many transactions, how much fuel volume used over
     * a given period and the total volume used by a card
     *
     * - This operation response will contains card & transaction details for given period aggregated by
     * payer, account, cardGroup, PAN, DriverName and VRN
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param FuelConsumptionRequest|null $body FuelConsumption RequestBody
     *
     * @return FuelConsumptionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fuelConsumption(
        string $apikey,
        string $requestId,
        ?FuelConsumptionRequest $body = null
    ): FuelConsumptionResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/fleetmanagement/v1/transaction/fuelconsumption'
        )
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionFuelconsumption400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionFuelconsumption401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionFuelconsumption403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionFuelconsumption404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionFuelconsumption500ErrorException::class
                )
            )
            ->type(FuelConsumptionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API allows the users to update the odometer readings on the sales items (transaction data)
     *
     * - This is an asynchronous operation. If opted, the user will be notified on completion of processing.
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param UpdateOdometerRequest|null $body updateOdometer RequestBody
     *
     * @return UpdateOdometerResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateOdometer(
        string $apikey,
        string $requestId,
        ?UpdateOdometerRequest $body = null
    ): UpdateOdometerResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/transaction/updateodometer')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionUpdateodometer400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionUpdateodometer401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionUpdateodometer403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionUpdateodometer404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionUpdateodometer500ErrorException::class
                )
            )
            ->type(UpdateOdometerResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API provides the details of the Cards or Transaction related exceptions based on the given
     * conditions for the Requested period.
     * - This API will return the Transactions related exceptions when the OutputType input parameter is
     * passed as ‘Transaction’ else will return the Cards related exceptions.
     *
     *
     *
     * @param string $apikey This is the API key of the specific environment which needs to be
     *        passed by the client.
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param TransactionExceptionsRequest|null $body Transaction Exceptions RequestBody
     *
     * @return TransactionExceptionsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function transactionExceptions(
        string $apikey,
        string $requestId,
        ?TransactionExceptionsRequest $body = null
    ): TransactionExceptionsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/fleetmanagement/v1/transaction/exceptions')
            ->auth('BasicAuth')
            ->parameters(
                HeaderParam::init('apikey', $apikey),
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    "The server cannot or will not process the request  due to something that i" .
                    "s perceived to be a client\r\n error (e.g., malformed request syntax, inval" .
                    "id \r\n request message framing, or deceptive request routing).",
                    FleetmanagementV1TransactionExceptions400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    FleetmanagementV1TransactionExceptions401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init(
                    'The server understood the request but refuses to authorize it.',
                    FleetmanagementV1TransactionExceptions403ErrorException::class
                )
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    FleetmanagementV1TransactionExceptions404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition the prevented it from fulfi' .
                    'lling the request.',
                    FleetmanagementV1TransactionExceptions500ErrorException::class
                )
            )
            ->type(TransactionExceptionsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint allows querying last 48 hours of transaction data of Shell Card (i.e. Priced, Billed,
     * Unbilled etc. sales items). It provides a flexible search criteria and supports pagination. E.g., if
     * the request is made at 08:30 AM on 18 Aug 2022 then transactions until 16 Aug 2022 08:30 AM
     * (including) can be retrieved.
     *
     *
     * #### Supported operations
     *
     * * Search by Date and Time range (within the last 48 hours only)
     *
     * * Search by Payer and/or Account number
     *
     * * Search by Card
     *
     * * Search by Purchased Country
     *
     * * Search by Transaction posting date
     *
     * * Search by Driver Name or Vehicle registration number
     *
     * * Search by Fuel only transactions
     *
     * * Search by Product and/or Product group
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param RecentTransactionRequest|null $body New Recent Transaction RequestBody
     *
     * @return RecentTransactionsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function recentTransactionsNew(
        string $requestId,
        ?RecentTransactionRequest $body = null
    ): RecentTransactionsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction-data/v1/recent')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    TransactionDataV1Recent400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    TransactionDataV1Recent401ErrorException::class
                )
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden', TransactionDataV1Recent403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    TransactionDataV1Recent404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    TransactionDataV1Recent500ErrorException::class
                )
            )
            ->type(RecentTransactionsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API allows querying transaction data (i.e. Priced, Billed and Unbilled sales items). It
     * provides a flexible search criteria and supports paging.
     *
     * The version 2 is an enhancement to the version 1 where EV transactions and their details are added
     * in the response.
     *
     *
     *
     * Transactions that are posted but not yet priced, billed or that are in error will not be returned by
     * this API. The API also supports returning Fee Items.
     *
     *
     *
     * #### Supported operations
     *
     * * Get sales items and fee transactions
     *
     * * Search by invoice status
     *
     * * Search by fixed date period
     *
     * * Search by date range
     *
     * * Search by account
     *
     * * Search by card
     *
     * * Get sales items only
     *
     * * Search by transaction Id or location
     *
     * * Search by transaction posting date
     *
     * * Search by invoice number or date
     *
     * * Search by driver name or vehicle registration number
     *
     * * Search by card group
     *
     * * Search by fuel only transactions
     *
     * * Search by product
     *
     * * EV transaction details - Below are EV specific parameters
     *
     * * EVOperator
     *
     * * EVSerialId
     *
     * * EVChargePointSerial
     *
     * * EVChargePointConnectorType
     *
     * * EVChargePointConnectorTypeDescription
     *
     * * EVChargeDuration
     *
     * * EVChargeStartDate
     *
     * * EVChargeStartTime
     *
     * * EVChargeEndDate
     *
     * * EVChargeEndTime
     *
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param PricedTransactionRequestV2|null $body Priced TransactionV2 RequestBody
     *
     * @return PricedTransactionResponseV2 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function pricedTransactionsV2(
        string $requestId,
        ?PricedTransactionRequestV2 $body = null
    ): PricedTransactionResponseV2 {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/transaction-data/v1/priced')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    TransactionDataV1Priced400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    TransactionDataV1Priced401ErrorException::class
                )
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden', TransactionDataV1Priced403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    TransactionDataV1Priced404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    TransactionDataV1Priced500ErrorException::class
                )
            )
            ->type(PricedTransactionResponseV2::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}

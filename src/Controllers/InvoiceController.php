<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellDataReportingAPIsLib\Exceptions\ApiException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Dates400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Dates401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Dates403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Dates404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Dates500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Download400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Download401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Download403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Download404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Download500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eiddownload400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eiddownload401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eiddownload403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eiddownload404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eiddownload500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eidsearch400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eidsearch401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eidsearch403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eidsearch404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Eidsearch500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Search400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Search401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Search403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Search404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Search500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchdocuments400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchdocuments401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchdocuments403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchdocuments404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchdocuments500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchstatementofaccount400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchstatementofaccount401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchstatementofaccount403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchstatementofaccount404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Searchstatementofaccount500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Statementofaccount400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Statementofaccount401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Statementofaccount403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Statementofaccount404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Statementofaccount500ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Summary400ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Summary401ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Summary403ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Summary404ErrorException;
use ShellDataReportingAPIsLib\Exceptions\InvoiceManagementV1Summary500ErrorException;
use ShellDataReportingAPIsLib\Models\EIDDocumentResponse;
use ShellDataReportingAPIsLib\Models\EIDDownloadRequest;
use ShellDataReportingAPIsLib\Models\EIDSearchRequest;
use ShellDataReportingAPIsLib\Models\InvoiceDatesRequest;
use ShellDataReportingAPIsLib\Models\InvoiceDatesResponseData;
use ShellDataReportingAPIsLib\Models\InvoiceDownloadRequest;
use ShellDataReportingAPIsLib\Models\InvoiceSearchRequest;
use ShellDataReportingAPIsLib\Models\InvoiceSearchResponse;
use ShellDataReportingAPIsLib\Models\InvoiceSummaryRequest;
use ShellDataReportingAPIsLib\Models\InvoiceSummaryResponse;
use ShellDataReportingAPIsLib\Models\SearchDocumentsRequest;
use ShellDataReportingAPIsLib\Models\SearchDocumentsResponse;
use ShellDataReportingAPIsLib\Models\SearchStatementOfAccountRequest;
use ShellDataReportingAPIsLib\Models\SearchStatementOfAccountResponse;
use ShellDataReportingAPIsLib\Models\StatementOfAccountRequest;
use ShellDataReportingAPIsLib\Models\StatementOfAccountResponse;

class InvoiceController extends BaseController
{
    /**
     * This API allows to search invoice data in the Shell Card Platform. It provides flexible search
     * criteria in the request body and supports paging.
     *
     *
     *
     * This API will also query the relevant invoice documents list and return a reference number that can
     * be used to download invoice documents (PDF and Proofing elements in a zip file).
     *
     *
     *
     * #### Supported operations
     *
     * * Search invoices by account
     *
     * * Search invoices by invoice type or invoice status
     *
     * * Search invoices by invoice id or number
     *
     * * Search invoices by invoiced country
     *
     * * Search invoices including einvoices
     *
     * * Search invoices by summary document
     *
     * * Search invoices by statement of account
     *
     * * Search invoices by fixed and custom date periods
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param InvoiceSearchRequest|null $body Invoice Search RequestBody
     *
     * @return InvoiceSearchResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function invoiceSearch(string $requestId, ?InvoiceSearchRequest $body = null): InvoiceSearchResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/search')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Search400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Search401ErrorException::class
                )
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden', InvoiceManagementV1Search403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Search404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Search500ErrorException::class
                )
            )
            ->type(InvoiceSearchResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API returns the high level summary of invoices that match the  given search criteria. The same
     * search criteria as the endpoint `/v1/invoice/search` is supported with the exception of paging
     * related parameters.
     *
     *
     *
     *
     *
     * #### Supported operations
     *
     * * Search invoices by account
     *
     * * Search invoices by invoice type or invoice status
     *
     * * Search invoices by invoice id or number
     *
     * * Search invoices by invoiced country
     *
     * * Search invoices including einvoices
     *
     * * Search invoices by summary document
     *
     * * Search invoices by statement of account
     *
     * * Search invoices by fixed and custom date periods
     *
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param InvoiceSummaryRequest|null $body Invoice Search RequestBody
     *
     * @return InvoiceSummaryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function invoiceSummary(string $requestId, ?InvoiceSummaryRequest $body = null): InvoiceSummaryResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/summary')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Summary400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Summary401ErrorException::class
                )
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden', InvoiceManagementV1Summary403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Summary404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Summary500ErrorException::class
                )
            )
            ->type(InvoiceSummaryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This API allows querying the details of the latest statement of account (SOA) generated for a given
     * Payer.
     *
     *
     *
     * The endpoint supports querying SOA documents by various input parameters specified in the request
     * body.
     *
     *
     *
     * #### Supported operations
     *
     * * Search invoice SOA by payer and account
     *
     * * Search invoice SOA including monthly trend (last 13 months invocie trend summary)
     *
     * * Search invoice SOA including past SOAs
     *
     * * Search invoice SOA including due/overdue documents
     *
     * * Search invoice SOA including invoice summary
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param StatementOfAccountRequest|null $body StatementOfAccount RequestBody
     *
     * @return StatementOfAccountResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function statementOfAccount(
        string $requestId,
        ?StatementOfAccountRequest $body = null
    ): StatementOfAccountResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/statementofaccount')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Statementofaccount400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Statementofaccount401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden', InvoiceManagementV1Statementofaccount403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Statementofaccount404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Statementofaccount500ErrorException::class
                )
            )
            ->type(StatementOfAccountResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API will return the list of Invoice Dates and Numbers for the given date range. If the dates
     * are not provided then it will fetch the data for past 13 months.
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param InvoiceDatesRequest|null $body StatementOfAccount RequestBody
     *
     * @return InvoiceDatesResponseData Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dates(string $requestId, ?InvoiceDatesRequest $body = null): InvoiceDatesResponseData
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/dates')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Dates400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Dates401ErrorException::class
                )
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden', InvoiceManagementV1Dates403ErrorException::class))
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Dates404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Dates500ErrorException::class
                )
            )
            ->type(InvoiceDatesResponseData::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API will allow querying of SOA from different systems
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param SearchStatementOfAccountRequest|null $body searchstatementofaccount RequestBody
     *
     * @return SearchStatementOfAccountResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function searchStatementOfAccount(
        string $requestId,
        ?SearchStatementOfAccountRequest $body = null
    ): SearchStatementOfAccountResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/invoice-management/v1/searchstatementofaccount'
        )
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Searchstatementofaccount400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Searchstatementofaccount401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden', InvoiceManagementV1Searchstatementofaccount403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Searchstatementofaccount404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Searchstatementofaccount500ErrorException::class
                )
            )
            ->type(SearchStatementOfAccountResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API allows querying the details of all invoices successfully uploaded to the Worldline
     * invoice repository and file reference numbers for downloading.
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param SearchDocumentsRequest|null $body SearchDocuments RequestBody
     *
     * @return SearchDocumentsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function searchDocuments(string $requestId, ?SearchDocumentsRequest $body = null): SearchDocumentsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/searchdocuments')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Searchdocuments400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Searchdocuments401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden', InvoiceManagementV1Searchdocuments403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Searchdocuments404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Searchdocuments500ErrorException::class
                )
            )
            ->type(SearchDocumentsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API provides the functionality needed for the screen “EID FILES” in the web interface. It
     * allows retrieving a list of EIDs based on search criteria.
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param EIDSearchRequest|null $body EIDSearch RequestBody
     *
     * @return EIDDocumentResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function eidSearch(string $requestId, ?EIDSearchRequest $body = null): EIDDocumentResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/eidsearch')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Eidsearch400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Eidsearch401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden', InvoiceManagementV1Eidsearch403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Eidsearch404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Eidsearch500ErrorException::class
                )
            )
            ->type(EIDDocumentResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This API downloads Invoice Documents i.e., ZIP file with Invoice PDF file and Proofing Elements in
     * XML format from invoice repository.
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param InvoiceDownloadRequest|null $body Invoice Download RequestBody
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function download(string $requestId, ?InvoiceDownloadRequest $body = null): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/download')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Download400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Download401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden', InvoiceManagementV1Download403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Download404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Download500ErrorException::class
                )
            );

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * - This service allows downloading one or more EID documents and the corresponding signature material
     * (where applicable) in one single request
     *
     * - The number of EID that can be downloaded at once is limited to 100 documents.
     *
     *
     *
     * @param string $requestId Mandatory UUID (according to RFC 4122 standards) for requests and
     *        responses. This will be played back in the response from the request.
     * @param EIDDownloadRequest|null $body EIDInvoice Download RequestBody
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function eidDownload(string $requestId, ?EIDDownloadRequest $body = null): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/invoice-management/v1/eiddownload')
            ->auth('BearerToken')
            ->parameters(
                HeaderParam::init('RequestId', $requestId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'The server cannot or will not process the request due to something that is' .
                    ' perceived to be a client error (e.g., malformed request syntax, invalid re' .
                    'quest message framing, or deceptive request routing).',
                    InvoiceManagementV1Eiddownload400ErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'The request has not been applied because it lacks valid  authentication cr' .
                    'edentials for the target resource.',
                    InvoiceManagementV1Eiddownload401ErrorException::class
                )
            )
            ->throwErrorOn(
                '403',
                ErrorType::init('Forbidden', InvoiceManagementV1Eiddownload403ErrorException::class)
            )
            ->throwErrorOn(
                '404',
                ErrorType::init(
                    'The origin server did not find a current representation  for the target re' .
                    'source or is not willing to disclose  that one exists.',
                    InvoiceManagementV1Eiddownload404ErrorException::class
                )
            )
            ->throwErrorOn(
                '500',
                ErrorType::init(
                    'The server encountered an unexpected condition that  prevented it from ful' .
                    'filling the request.',
                    InvoiceManagementV1Eiddownload500ErrorException::class
                )
            );

        return $this->execute($_reqBuilder, $_resHandler);
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class RecentTransactionReq implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var string|null
     */
    private $payerNumber;

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $purchasedInCountry = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $fromDateTime = [];

    /**
     * @var array
     */
    private $toDateTime = [];

    /**
     * @var array
     */
    private $transactionStatus = [];

    /**
     * @var array
     */
    private $fuelOnly = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $vehicleRegistrationNumber = [];

    /**
     * @var array
     */
    private $includeDeclines = [];

    /**
     * @var array
     */
    private $cardIssuerName = [];

    /**
     * @var string|null
     */
    private $columnList;

    /**
     * Returns Col Co Code.
     * Three character Collecting Company Code (Shell Code) of the selected payer
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Three character Collecting Company Code (Shell Code) of the selected payer
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Payer Number.
     * Unique Identifier for the customer at payment point.
     */
    public function getPayerNumber(): ?string
    {
        return $this->payerNumber;
    }

    /**
     * Sets Payer Number.
     * Unique Identifier for the customer at payment point.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber = $payerNumber;
    }

    /**
     * Returns Account Number.
     * Customer account number.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Customer account number.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Customer account number.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Product Code.
     * Global product code
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Global product code
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Global product code
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Purchased in Country.
     * Delco country
     */
    public function getPurchasedInCountry(): ?string
    {
        if (count($this->purchasedInCountry) == 0) {
            return null;
        }
        return $this->purchasedInCountry['value'];
    }

    /**
     * Sets Purchased in Country.
     * Delco country
     *
     * @maps PurchasedInCountry
     */
    public function setPurchasedInCountry(?string $purchasedInCountry): void
    {
        $this->purchasedInCountry['value'] = $purchasedInCountry;
    }

    /**
     * Unsets Purchased in Country.
     * Delco country
     */
    public function unsetPurchasedInCountry(): void
    {
        $this->purchasedInCountry = [];
    }

    /**
     * Returns Card PAN.
     * Card identifier number masked
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Card identifier number masked
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Card identifier number masked
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns From Date Time.
     * Start date and time of transactions
     */
    public function getFromDateTime(): ?string
    {
        if (count($this->fromDateTime) == 0) {
            return null;
        }
        return $this->fromDateTime['value'];
    }

    /**
     * Sets From Date Time.
     * Start date and time of transactions
     *
     * @maps FromDateTime
     */
    public function setFromDateTime(?string $fromDateTime): void
    {
        $this->fromDateTime['value'] = $fromDateTime;
    }

    /**
     * Unsets From Date Time.
     * Start date and time of transactions
     */
    public function unsetFromDateTime(): void
    {
        $this->fromDateTime = [];
    }

    /**
     * Returns To Date Time.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     */
    public function getToDateTime(): ?string
    {
        if (count($this->toDateTime) == 0) {
            return null;
        }
        return $this->toDateTime['value'];
    }

    /**
     * Sets To Date Time.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     *
     * @maps ToDateTime
     */
    public function setToDateTime(?string $toDateTime): void
    {
        $this->toDateTime['value'] = $toDateTime;
    }

    /**
     * Unsets To Date Time.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     */
    public function unsetToDateTime(): void
    {
        $this->toDateTime = [];
    }

    /**
     * Returns Transaction Status.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     */
    public function getTransactionStatus(): ?string
    {
        if (count($this->transactionStatus) == 0) {
            return null;
        }
        return $this->transactionStatus['value'];
    }

    /**
     * Sets Transaction Status.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     *
     * @maps TransactionStatus
     */
    public function setTransactionStatus(?string $transactionStatus): void
    {
        $this->transactionStatus['value'] = $transactionStatus;
    }

    /**
     * Unsets Transaction Status.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     */
    public function unsetTransactionStatus(): void
    {
        $this->transactionStatus = [];
    }

    /**
     * Returns Fuel Only.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     */
    public function getFuelOnly(): ?string
    {
        if (count($this->fuelOnly) == 0) {
            return null;
        }
        return $this->fuelOnly['value'];
    }

    /**
     * Sets Fuel Only.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     *
     * @maps FuelOnly
     */
    public function setFuelOnly(?string $fuelOnly): void
    {
        $this->fuelOnly['value'] = $fuelOnly;
    }

    /**
     * Unsets Fuel Only.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     */
    public function unsetFuelOnly(): void
    {
        $this->fuelOnly = [];
    }

    /**
     * Returns Product Group Name.
     * Product group name
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Product group name
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Product group name
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Vehicle Registration Number.
     * Vehicle registration number embossed on the card
     */
    public function getVehicleRegistrationNumber(): ?string
    {
        if (count($this->vehicleRegistrationNumber) == 0) {
            return null;
        }
        return $this->vehicleRegistrationNumber['value'];
    }

    /**
     * Sets Vehicle Registration Number.
     * Vehicle registration number embossed on the card
     *
     * @maps VehicleRegistrationNumber
     */
    public function setVehicleRegistrationNumber(?string $vehicleRegistrationNumber): void
    {
        $this->vehicleRegistrationNumber['value'] = $vehicleRegistrationNumber;
    }

    /**
     * Unsets Vehicle Registration Number.
     * Vehicle registration number embossed on the card
     */
    public function unsetVehicleRegistrationNumber(): void
    {
        $this->vehicleRegistrationNumber = [];
    }

    /**
     * Returns Include Declines.
     * Flag to enable to get declined records
     */
    public function getIncludeDeclines(): ?bool
    {
        if (count($this->includeDeclines) == 0) {
            return null;
        }
        return $this->includeDeclines['value'];
    }

    /**
     * Sets Include Declines.
     * Flag to enable to get declined records
     *
     * @maps IncludeDeclines
     */
    public function setIncludeDeclines(?bool $includeDeclines): void
    {
        $this->includeDeclines['value'] = $includeDeclines;
    }

    /**
     * Unsets Include Declines.
     * Flag to enable to get declined records
     */
    public function unsetIncludeDeclines(): void
    {
        $this->includeDeclines = [];
    }

    /**
     * Returns Card Issuer Name.
     * Card issuer name
     */
    public function getCardIssuerName(): ?string
    {
        if (count($this->cardIssuerName) == 0) {
            return null;
        }
        return $this->cardIssuerName['value'];
    }

    /**
     * Sets Card Issuer Name.
     * Card issuer name
     *
     * @maps CardIssuerName
     */
    public function setCardIssuerName(?string $cardIssuerName): void
    {
        $this->cardIssuerName['value'] = $cardIssuerName;
    }

    /**
     * Unsets Card Issuer Name.
     * Card issuer name
     */
    public function unsetCardIssuerName(): void
    {
        $this->cardIssuerName = [];
    }

    /**
     * Returns Column List.
     * Column list to be part of response, it can be 'All' to return all possible column. E.g. 'All'
     *
     * To get specific columns pass multiple columns name separated by comma along with 'PayerNumber'. E.g.
     * "PayerNumber,ProductCode"
     */
    public function getColumnList(): ?string
    {
        return $this->columnList;
    }

    /**
     * Sets Column List.
     * Column list to be part of response, it can be 'All' to return all possible column. E.g. 'All'
     *
     * To get specific columns pass multiple columns name separated by comma along with 'PayerNumber'. E.g.
     * "PayerNumber,ProductCode"
     *
     * @maps ColumnList
     */
    public function setColumnList(?string $columnList): void
    {
        $this->columnList = $columnList;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['ColCoCode']                     = $this->colCoCode;
        $json['PayerNumber']                   = $this->payerNumber;
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']             = $this->accountNumber['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']               = $this->productCode['value'];
        }
        if (!empty($this->purchasedInCountry)) {
            $json['PurchasedInCountry']        = $this->purchasedInCountry['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']                   = $this->cardPAN['value'];
        }
        if (!empty($this->fromDateTime)) {
            $json['FromDateTime']              = $this->fromDateTime['value'];
        }
        if (!empty($this->toDateTime)) {
            $json['ToDateTime']                = $this->toDateTime['value'];
        }
        if (!empty($this->transactionStatus)) {
            $json['TransactionStatus']         = $this->transactionStatus['value'];
        }
        if (!empty($this->fuelOnly)) {
            $json['FuelOnly']                  = $this->fuelOnly['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']          = $this->productGroupName['value'];
        }
        if (!empty($this->vehicleRegistrationNumber)) {
            $json['VehicleRegistrationNumber'] = $this->vehicleRegistrationNumber['value'];
        }
        if (!empty($this->includeDeclines)) {
            $json['IncludeDeclines']           = $this->includeDeclines['value'];
        }
        if (!empty($this->cardIssuerName)) {
            $json['CardIssuerName']            = $this->cardIssuerName['value'];
        }
        if (isset($this->columnList)) {
            $json['ColumnList']                = $this->columnList;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

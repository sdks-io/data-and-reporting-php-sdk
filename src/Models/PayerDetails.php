<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class PayerDetails implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $countryCode = [];

    /**
     * @var array
     */
    private $country = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerFullName = [];

    /**
     * @var array
     */
    private $payerShortName = [];

    /**
     * @var array
     */
    private $payerGroupId = [];

    /**
     * @var array
     */
    private $amountDue = [];

    /**
     * @var array
     */
    private $amountOverdue = [];

    /**
     * @var array
     */
    private $amountNotOverdue = [];

    /**
     * @var array
     */
    private $outstandingBalance = [];

    /**
     * @var array
     */
    private $unallocatedPayment = [];

    /**
     * @var array
     */
    private $sOACurrencyCode = [];

    /**
     * @var array
     */
    private $sOACurrencySymbol = [];

    /**
     * @var array
     */
    private $sOACreditLimitCurrencyCode = [];

    /**
     * @var array
     */
    private $sOACreditLimitCurrencySymbol = [];

    /**
     * @var array
     */
    private $lastPaymentCurrencyCode = [];

    /**
     * @var array
     */
    private $lastPaymentCurrencySymbol = [];

    /**
     * @var array
     */
    private $lastPaymentAmount = [];

    /**
     * @var array
     */
    private $lastPaymentDate = [];

    /**
     * @var array
     */
    private $sOALastPaymentAmount = [];

    /**
     * @var array
     */
    private $sOALastPaymentDate = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $localCurrencyCode = [];

    /**
     * @var array
     */
    private $localCurrencySymbol = [];

    /**
     * @var array
     */
    private $localCurrencyExchangeRate = [];

    /**
     * @var array
     */
    private $localCurrencyExchangeRateSoA = [];

    /**
     * @var array
     */
    private $billingFrequencyTypeId = [];

    /**
     * @var array
     */
    private $billingFrequencyType = [];

    /**
     * @var array
     */
    private $billingRunFrequencyTypeId = [];

    /**
     * @var array
     */
    private $billingRunFrequnecy = [];

    /**
     * @var array
     */
    private $day1Run = [];

    /**
     * @var array
     */
    private $day2Run = [];

    /**
     * @var array
     */
    private $day3Run = [];

    /**
     * @var array
     */
    private $day4Run = [];

    /**
     * @var InvoiceDistributionMethod[]|null
     */
    private $invoiceDistributionMethods;

    /**
     * @var array
     */
    private $outputType = [];

    /**
     * @var array
     */
    private $invoiceAccountID = [];

    /**
     * @var array
     */
    private $invoiceAccountNumber = [];

    /**
     * @var array
     */
    private $invoiceAccountShortName = [];

    /**
     * @var bool|null
     */
    private $bestOfIndicator = false;

    /**
     * @var bool|null
     */
    private $isInternational = false;

    /**
     * @var array
     */
    private $totalAccounts = [];

    /**
     * @var array
     */
    private $totalActiveAccounts = [];

    /**
     * @var array
     */
    private $totalCards = [];

    /**
     * @var array
     */
    private $totalActiveCards = [];

    /**
     * @var array
     */
    private $totalBlockedCards = [];

    /**
     * @var array
     */
    private $totalCancelledCards = [];

    /**
     * @var array
     */
    private $totalExpiredCards = [];

    /**
     * @var array
     */
    private $totalRenewalPendingCards = [];

    /**
     * @var array
     */
    private $totalReplacedCards = [];

    /**
     * @var array
     */
    private $totalTemporaryBlockCardsByCustomer = [];

    /**
     * @var array
     */
    private $totalTemporaryBlockCardsByShell = [];

    /**
     * @var array
     */
    private $totalNewCards = [];

    /**
     * @var array
     */
    private $totalFraudCards = [];

    /**
     * @var array
     */
    private $totalBlockedAccounts = [];

    /**
     * @var array
     */
    private $totalCancelledAccounts = [];

    /**
     * @var array
     */
    private $payerTradingName = [];

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var array
     */
    private $billingLanguage = [];

    /**
     * @var array
     */
    private $legalEntity = [];

    /**
     * @var array
     */
    private $dateEstablished = [];

    /**
     * @var array
     */
    private $customerClassification = [];

    /**
     * @var array
     */
    private $industryClass = [];

    /**
     * @var array
     */
    private $marketingSegmentation = [];

    /**
     * @var array
     */
    private $lineOfBusiness = [];

    /**
     * @var bool|null
     */
    private $printCreditLimit = false;

    /**
     * @var array
     */
    private $cardGroupType = [];

    /**
     * @var bool|null
     */
    private $renewCards = false;

    /**
     * @var bool|null
     */
    private $allowSelectPIN = false;

    /**
     * @var bool|null
     */
    private $useFleetPIN;

    /**
     * @var array
     */
    private $vATRegNumber = [];

    /**
     * @var string|null
     */
    private $vATRegNumber2;

    /**
     * @var array
     */
    private $registrationNumber = [];

    /**
     * @var array
     */
    private $registrationNumber2 = [];

    /**
     * @var array
     */
    private $salesLedgerBalance = [];

    /**
     * @var array
     */
    private $exposure = [];

    /**
     * @var array
     */
    private $outstandingDebt = [];

    /**
     * @var array
     */
    private $availableCredit = [];

    /**
     * @var array
     */
    private $band = [];

    /**
     * @var array
     */
    private $globalCustomerReferenceId = [];

    /**
     * @var array
     */
    private $creditLimit = [];

    /**
     * @var array
     */
    private $creditLimitInCustomerCurrency = [];

    /**
     * @var array
     */
    private $billingCurrencyCode = [];

    /**
     * @var array
     */
    private $billingCurrencySymbol = [];

    /**
     * @var array
     */
    private $paymentMethod = [];

    /**
     * @var array
     */
    private $paymentTerms = [];

    /**
     * @var array
     */
    private $temporaryCreditLimitIncrease = [];

    /**
     * @var array
     */
    private $temporaryCreditLimitIncreaseInCustomerCurrency = [];

    /**
     * @var array
     */
    private $temporaryCreditLimitExpiryDate = [];

    /**
     * @var BankAccount[]|null
     */
    private $payerBankAccount;

    /**
     * @var Address|null
     */
    private $cardDeliveryAddress;

    /**
     * @var Address|null
     */
    private $correspondanceAddress;

    /**
     * @var Address|null
     */
    private $billingAddress;

    /**
     * @var bool|null
     */
    private $hasActiveVolBasedPricing;

    /**
     * @var bool|null
     */
    private $hasActiveVolBasedBonus;

    /**
     * @var bool|null
     */
    private $hasActiveVolBasedAssociationBonus;

    /**
     * @var FinanceCurrency|null
     */
    private $financeCurrency;

    /**
     * @var array
     */
    private $tollsCustomerId = [];

    /**
     * @var array
     */
    private $tollsColcoCountryTypeId = [];

    /**
     * @var CustomerContract[]|null
     */
    private $contracts;

    /**
     * Returns Col Co Id.
     * Collecting company id of the customer.
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting company id of the customer.
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting company id of the customer.
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting company code of the customer.
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting company code of the customer.
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting company code of the customer.
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Country Code.
     * ISO code of the customer country.
     */
    public function getCountryCode(): ?string
    {
        if (count($this->countryCode) == 0) {
            return null;
        }
        return $this->countryCode['value'];
    }

    /**
     * Sets Country Code.
     * ISO code of the customer country.
     *
     * @maps CountryCode
     */
    public function setCountryCode(?string $countryCode): void
    {
        $this->countryCode['value'] = $countryCode;
    }

    /**
     * Unsets Country Code.
     * ISO code of the customer country.
     */
    public function unsetCountryCode(): void
    {
        $this->countryCode = [];
    }

    /**
     * Returns Country.
     * Country of the customer
     */
    public function getCountry(): ?string
    {
        if (count($this->country) == 0) {
            return null;
        }
        return $this->country['value'];
    }

    /**
     * Sets Country.
     * Country of the customer
     *
     * @maps Country
     */
    public function setCountry(?string $country): void
    {
        $this->country['value'] = $country;
    }

    /**
     * Unsets Country.
     * Country of the customer
     */
    public function unsetCountry(): void
    {
        $this->country = [];
    }

    /**
     * Returns Payer Id.
     * Payer id of the customer
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer id of the customer
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer id of the customer
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the customer
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the customer
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the customer
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Full Name.
     * Full Name of the Payer
     */
    public function getPayerFullName(): ?string
    {
        if (count($this->payerFullName) == 0) {
            return null;
        }
        return $this->payerFullName['value'];
    }

    /**
     * Sets Payer Full Name.
     * Full Name of the Payer
     *
     * @maps PayerFullName
     */
    public function setPayerFullName(?string $payerFullName): void
    {
        $this->payerFullName['value'] = $payerFullName;
    }

    /**
     * Unsets Payer Full Name.
     * Full Name of the Payer
     */
    public function unsetPayerFullName(): void
    {
        $this->payerFullName = [];
    }

    /**
     * Returns Payer Short Name.
     * Short name of the payer
     */
    public function getPayerShortName(): ?string
    {
        if (count($this->payerShortName) == 0) {
            return null;
        }
        return $this->payerShortName['value'];
    }

    /**
     * Sets Payer Short Name.
     * Short name of the payer
     *
     * @maps PayerShortName
     */
    public function setPayerShortName(?string $payerShortName): void
    {
        $this->payerShortName['value'] = $payerShortName;
    }

    /**
     * Unsets Payer Short Name.
     * Short name of the payer
     */
    public function unsetPayerShortName(): void
    {
        $this->payerShortName = [];
    }

    /**
     * Returns Payer Group Id.
     * Payer Group Id
     */
    public function getPayerGroupId(): ?int
    {
        if (count($this->payerGroupId) == 0) {
            return null;
        }
        return $this->payerGroupId['value'];
    }

    /**
     * Sets Payer Group Id.
     * Payer Group Id
     *
     * @maps PayerGroupId
     */
    public function setPayerGroupId(?int $payerGroupId): void
    {
        $this->payerGroupId['value'] = $payerGroupId;
    }

    /**
     * Unsets Payer Group Id.
     * Payer Group Id
     */
    public function unsetPayerGroupId(): void
    {
        $this->payerGroupId = [];
    }

    /**
     * Returns Amount Due.
     * Invoiced amount and due for payment from the last SOA.
     */
    public function getAmountDue(): ?float
    {
        if (count($this->amountDue) == 0) {
            return null;
        }
        return $this->amountDue['value'];
    }

    /**
     * Sets Amount Due.
     * Invoiced amount and due for payment from the last SOA.
     *
     * @maps AmountDue
     */
    public function setAmountDue(?float $amountDue): void
    {
        $this->amountDue['value'] = $amountDue;
    }

    /**
     * Unsets Amount Due.
     * Invoiced amount and due for payment from the last SOA.
     */
    public function unsetAmountDue(): void
    {
        $this->amountDue = [];
    }

    /**
     * Returns Amount Overdue.
     * Invoiced amount and overdue for payment from the last SOA.
     */
    public function getAmountOverdue(): ?float
    {
        if (count($this->amountOverdue) == 0) {
            return null;
        }
        return $this->amountOverdue['value'];
    }

    /**
     * Sets Amount Overdue.
     * Invoiced amount and overdue for payment from the last SOA.
     *
     * @maps AmountOverdue
     */
    public function setAmountOverdue(?float $amountOverdue): void
    {
        $this->amountOverdue['value'] = $amountOverdue;
    }

    /**
     * Unsets Amount Overdue.
     * Invoiced amount and overdue for payment from the last SOA.
     */
    public function unsetAmountOverdue(): void
    {
        $this->amountOverdue = [];
    }

    /**
     * Returns Amount Not Overdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     */
    public function getAmountNotOverdue(): ?float
    {
        if (count($this->amountNotOverdue) == 0) {
            return null;
        }
        return $this->amountNotOverdue['value'];
    }

    /**
     * Sets Amount Not Overdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     *
     * @maps AmountNotOverdue
     */
    public function setAmountNotOverdue(?float $amountNotOverdue): void
    {
        $this->amountNotOverdue['value'] = $amountNotOverdue;
    }

    /**
     * Unsets Amount Not Overdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     */
    public function unsetAmountNotOverdue(): void
    {
        $this->amountNotOverdue = [];
    }

    /**
     * Returns Outstanding Balance.
     * Current outstanding balance amount from the last SOA.
     */
    public function getOutstandingBalance(): ?float
    {
        if (count($this->outstandingBalance) == 0) {
            return null;
        }
        return $this->outstandingBalance['value'];
    }

    /**
     * Sets Outstanding Balance.
     * Current outstanding balance amount from the last SOA.
     *
     * @maps OutstandingBalance
     */
    public function setOutstandingBalance(?float $outstandingBalance): void
    {
        $this->outstandingBalance['value'] = $outstandingBalance;
    }

    /**
     * Unsets Outstanding Balance.
     * Current outstanding balance amount from the last SOA.
     */
    public function unsetOutstandingBalance(): void
    {
        $this->outstandingBalance = [];
    }

    /**
     * Returns Unallocated Payment.
     * Unallocated payment.
     *
     * When negative, indicates overdue amount from the last SOA.
     */
    public function getUnallocatedPayment(): ?float
    {
        if (count($this->unallocatedPayment) == 0) {
            return null;
        }
        return $this->unallocatedPayment['value'];
    }

    /**
     * Sets Unallocated Payment.
     * Unallocated payment.
     *
     * When negative, indicates overdue amount from the last SOA.
     *
     * @maps UnallocatedPayment
     */
    public function setUnallocatedPayment(?float $unallocatedPayment): void
    {
        $this->unallocatedPayment['value'] = $unallocatedPayment;
    }

    /**
     * Unsets Unallocated Payment.
     * Unallocated payment.
     *
     * When negative, indicates overdue amount from the last SOA.
     */
    public function unsetUnallocatedPayment(): void
    {
        $this->unallocatedPayment = [];
    }

    /**
     * Returns S OA Currency Code.
     * Currency ISO code
     */
    public function getSOACurrencyCode(): ?string
    {
        if (count($this->sOACurrencyCode) == 0) {
            return null;
        }
        return $this->sOACurrencyCode['value'];
    }

    /**
     * Sets S OA Currency Code.
     * Currency ISO code
     *
     * @maps SOACurrencyCode
     */
    public function setSOACurrencyCode(?string $sOACurrencyCode): void
    {
        $this->sOACurrencyCode['value'] = $sOACurrencyCode;
    }

    /**
     * Unsets S OA Currency Code.
     * Currency ISO code
     */
    public function unsetSOACurrencyCode(): void
    {
        $this->sOACurrencyCode = [];
    }

    /**
     * Returns S OA Currency Symbol.
     * Currency symbol
     */
    public function getSOACurrencySymbol(): ?string
    {
        if (count($this->sOACurrencySymbol) == 0) {
            return null;
        }
        return $this->sOACurrencySymbol['value'];
    }

    /**
     * Sets S OA Currency Symbol.
     * Currency symbol
     *
     * @maps SOACurrencySymbol
     */
    public function setSOACurrencySymbol(?string $sOACurrencySymbol): void
    {
        $this->sOACurrencySymbol['value'] = $sOACurrencySymbol;
    }

    /**
     * Unsets S OA Currency Symbol.
     * Currency symbol
     */
    public function unsetSOACurrencySymbol(): void
    {
        $this->sOACurrencySymbol = [];
    }

    /**
     * Returns S OA Credit Limit Currency Code.
     * Currency ISO code
     */
    public function getSOACreditLimitCurrencyCode(): ?string
    {
        if (count($this->sOACreditLimitCurrencyCode) == 0) {
            return null;
        }
        return $this->sOACreditLimitCurrencyCode['value'];
    }

    /**
     * Sets S OA Credit Limit Currency Code.
     * Currency ISO code
     *
     * @maps SOACreditLimitCurrencyCode
     */
    public function setSOACreditLimitCurrencyCode(?string $sOACreditLimitCurrencyCode): void
    {
        $this->sOACreditLimitCurrencyCode['value'] = $sOACreditLimitCurrencyCode;
    }

    /**
     * Unsets S OA Credit Limit Currency Code.
     * Currency ISO code
     */
    public function unsetSOACreditLimitCurrencyCode(): void
    {
        $this->sOACreditLimitCurrencyCode = [];
    }

    /**
     * Returns S OA Credit Limit Currency Symbol.
     * Currency symbol
     */
    public function getSOACreditLimitCurrencySymbol(): ?string
    {
        if (count($this->sOACreditLimitCurrencySymbol) == 0) {
            return null;
        }
        return $this->sOACreditLimitCurrencySymbol['value'];
    }

    /**
     * Sets S OA Credit Limit Currency Symbol.
     * Currency symbol
     *
     * @maps SOACreditLimitCurrencySymbol
     */
    public function setSOACreditLimitCurrencySymbol(?string $sOACreditLimitCurrencySymbol): void
    {
        $this->sOACreditLimitCurrencySymbol['value'] = $sOACreditLimitCurrencySymbol;
    }

    /**
     * Unsets S OA Credit Limit Currency Symbol.
     * Currency symbol
     */
    public function unsetSOACreditLimitCurrencySymbol(): void
    {
        $this->sOACreditLimitCurrencySymbol = [];
    }

    /**
     * Returns Last Payment Currency Code.
     * Currency ISO code
     */
    public function getLastPaymentCurrencyCode(): ?string
    {
        if (count($this->lastPaymentCurrencyCode) == 0) {
            return null;
        }
        return $this->lastPaymentCurrencyCode['value'];
    }

    /**
     * Sets Last Payment Currency Code.
     * Currency ISO code
     *
     * @maps LastPaymentCurrencyCode
     */
    public function setLastPaymentCurrencyCode(?string $lastPaymentCurrencyCode): void
    {
        $this->lastPaymentCurrencyCode['value'] = $lastPaymentCurrencyCode;
    }

    /**
     * Unsets Last Payment Currency Code.
     * Currency ISO code
     */
    public function unsetLastPaymentCurrencyCode(): void
    {
        $this->lastPaymentCurrencyCode = [];
    }

    /**
     * Returns Last Payment Currency Symbol.
     * currency symbol
     */
    public function getLastPaymentCurrencySymbol(): ?string
    {
        if (count($this->lastPaymentCurrencySymbol) == 0) {
            return null;
        }
        return $this->lastPaymentCurrencySymbol['value'];
    }

    /**
     * Sets Last Payment Currency Symbol.
     * currency symbol
     *
     * @maps LastPaymentCurrencySymbol
     */
    public function setLastPaymentCurrencySymbol(?string $lastPaymentCurrencySymbol): void
    {
        $this->lastPaymentCurrencySymbol['value'] = $lastPaymentCurrencySymbol;
    }

    /**
     * Unsets Last Payment Currency Symbol.
     * currency symbol
     */
    public function unsetLastPaymentCurrencySymbol(): void
    {
        $this->lastPaymentCurrencySymbol = [];
    }

    /**
     * Returns Last Payment Amount.
     * Latest payment amount for the requested payer.
     */
    public function getLastPaymentAmount(): ?float
    {
        if (count($this->lastPaymentAmount) == 0) {
            return null;
        }
        return $this->lastPaymentAmount['value'];
    }

    /**
     * Sets Last Payment Amount.
     * Latest payment amount for the requested payer.
     *
     * @maps LastPaymentAmount
     */
    public function setLastPaymentAmount(?float $lastPaymentAmount): void
    {
        $this->lastPaymentAmount['value'] = $lastPaymentAmount;
    }

    /**
     * Unsets Last Payment Amount.
     * Latest payment amount for the requested payer.
     */
    public function unsetLastPaymentAmount(): void
    {
        $this->lastPaymentAmount = [];
    }

    /**
     * Returns Last Payment Date.
     * Latest payment date for the requested payer.
     */
    public function getLastPaymentDate(): ?string
    {
        if (count($this->lastPaymentDate) == 0) {
            return null;
        }
        return $this->lastPaymentDate['value'];
    }

    /**
     * Sets Last Payment Date.
     * Latest payment date for the requested payer.
     *
     * @maps LastPaymentDate
     */
    public function setLastPaymentDate(?string $lastPaymentDate): void
    {
        $this->lastPaymentDate['value'] = $lastPaymentDate;
    }

    /**
     * Unsets Last Payment Date.
     * Latest payment date for the requested payer.
     */
    public function unsetLastPaymentDate(): void
    {
        $this->lastPaymentDate = [];
    }

    /**
     * Returns S OA Last Payment Amount.
     * Last payment amount in statement of account for the requested payer.
     */
    public function getSOALastPaymentAmount(): ?float
    {
        if (count($this->sOALastPaymentAmount) == 0) {
            return null;
        }
        return $this->sOALastPaymentAmount['value'];
    }

    /**
     * Sets S OA Last Payment Amount.
     * Last payment amount in statement of account for the requested payer.
     *
     * @maps SOALastPaymentAmount
     */
    public function setSOALastPaymentAmount(?float $sOALastPaymentAmount): void
    {
        $this->sOALastPaymentAmount['value'] = $sOALastPaymentAmount;
    }

    /**
     * Unsets S OA Last Payment Amount.
     * Last payment amount in statement of account for the requested payer.
     */
    public function unsetSOALastPaymentAmount(): void
    {
        $this->sOALastPaymentAmount = [];
    }

    /**
     * Returns S OA Last Payment Date.
     * Last payment date in statement of account for the requested payer.
     */
    public function getSOALastPaymentDate(): ?string
    {
        if (count($this->sOALastPaymentDate) == 0) {
            return null;
        }
        return $this->sOALastPaymentDate['value'];
    }

    /**
     * Sets S OA Last Payment Date.
     * Last payment date in statement of account for the requested payer.
     *
     * @maps SOALastPaymentDate
     */
    public function setSOALastPaymentDate(?string $sOALastPaymentDate): void
    {
        $this->sOALastPaymentDate['value'] = $sOALastPaymentDate;
    }

    /**
     * Unsets S OA Last Payment Date.
     * Last payment date in statement of account for the requested payer.
     */
    public function unsetSOALastPaymentDate(): void
    {
        $this->sOALastPaymentDate = [];
    }

    /**
     * Returns Currency Code.
     * Currency ISO code
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * Currency ISO code
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * Currency ISO code
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Currency Symbol
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Currency Symbol
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Currency Symbol
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Col Co Country Code.
     * The 2-character ISO Code for the customer and card owning country.
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * The 2-character ISO Code for the customer and card owning country.
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * The 2-character ISO Code for the customer and card owning country.
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Local Currency Code.
     * Currency ISO code of the local country.
     */
    public function getLocalCurrencyCode(): ?string
    {
        if (count($this->localCurrencyCode) == 0) {
            return null;
        }
        return $this->localCurrencyCode['value'];
    }

    /**
     * Sets Local Currency Code.
     * Currency ISO code of the local country.
     *
     * @maps LocalCurrencyCode
     */
    public function setLocalCurrencyCode(?string $localCurrencyCode): void
    {
        $this->localCurrencyCode['value'] = $localCurrencyCode;
    }

    /**
     * Unsets Local Currency Code.
     * Currency ISO code of the local country.
     */
    public function unsetLocalCurrencyCode(): void
    {
        $this->localCurrencyCode = [];
    }

    /**
     * Returns Local Currency Symbol.
     * Currency Symbol of the local country
     */
    public function getLocalCurrencySymbol(): ?string
    {
        if (count($this->localCurrencySymbol) == 0) {
            return null;
        }
        return $this->localCurrencySymbol['value'];
    }

    /**
     * Sets Local Currency Symbol.
     * Currency Symbol of the local country
     *
     * @maps LocalCurrencySymbol
     */
    public function setLocalCurrencySymbol(?string $localCurrencySymbol): void
    {
        $this->localCurrencySymbol['value'] = $localCurrencySymbol;
    }

    /**
     * Unsets Local Currency Symbol.
     * Currency Symbol of the local country
     */
    public function unsetLocalCurrencySymbol(): void
    {
        $this->localCurrencySymbol = [];
    }

    /**
     * Returns Local Currency Exchange Rate.
     * Exchange rate from OU base currency to local currency.
     */
    public function getLocalCurrencyExchangeRate(): ?float
    {
        if (count($this->localCurrencyExchangeRate) == 0) {
            return null;
        }
        return $this->localCurrencyExchangeRate['value'];
    }

    /**
     * Sets Local Currency Exchange Rate.
     * Exchange rate from OU base currency to local currency.
     *
     * @maps LocalCurrencyExchangeRate
     */
    public function setLocalCurrencyExchangeRate(?float $localCurrencyExchangeRate): void
    {
        $this->localCurrencyExchangeRate['value'] = $localCurrencyExchangeRate;
    }

    /**
     * Unsets Local Currency Exchange Rate.
     * Exchange rate from OU base currency to local currency.
     */
    public function unsetLocalCurrencyExchangeRate(): void
    {
        $this->localCurrencyExchangeRate = [];
    }

    /**
     * Returns Local Currency Exchange Rate So A.
     * Exchange rate from SoA credit limit currency to local currency
     */
    public function getLocalCurrencyExchangeRateSoA(): ?float
    {
        if (count($this->localCurrencyExchangeRateSoA) == 0) {
            return null;
        }
        return $this->localCurrencyExchangeRateSoA['value'];
    }

    /**
     * Sets Local Currency Exchange Rate So A.
     * Exchange rate from SoA credit limit currency to local currency
     *
     * @maps LocalCurrencyExchangeRate_SoA
     */
    public function setLocalCurrencyExchangeRateSoA(?float $localCurrencyExchangeRateSoA): void
    {
        $this->localCurrencyExchangeRateSoA['value'] = $localCurrencyExchangeRateSoA;
    }

    /**
     * Unsets Local Currency Exchange Rate So A.
     * Exchange rate from SoA credit limit currency to local currency
     */
    public function unsetLocalCurrencyExchangeRateSoA(): void
    {
        $this->localCurrencyExchangeRateSoA = [];
    }

    /**
     * Returns Billing Frequency Type Id.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will be
     * considered for invoicing in a bulling run
     *
     * E.g.: 1, 2, 3, etc.
     */
    public function getBillingFrequencyTypeId(): ?int
    {
        if (count($this->billingFrequencyTypeId) == 0) {
            return null;
        }
        return $this->billingFrequencyTypeId['value'];
    }

    /**
     * Sets Billing Frequency Type Id.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will be
     * considered for invoicing in a bulling run
     *
     * E.g.: 1, 2, 3, etc.
     *
     * @maps BillingFrequencyTypeId
     */
    public function setBillingFrequencyTypeId(?int $billingFrequencyTypeId): void
    {
        $this->billingFrequencyTypeId['value'] = $billingFrequencyTypeId;
    }

    /**
     * Unsets Billing Frequency Type Id.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will be
     * considered for invoicing in a bulling run
     *
     * E.g.: 1, 2, 3, etc.
     */
    public function unsetBillingFrequencyTypeId(): void
    {
        $this->billingFrequencyTypeId = [];
    }

    /**
     * Returns Billing Frequency Type.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for invoicing
     * in a bulling run
     *
     * E.g.:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly – Tuesday
     *
     * Etc.
     */
    public function getBillingFrequencyType(): ?string
    {
        if (count($this->billingFrequencyType) == 0) {
            return null;
        }
        return $this->billingFrequencyType['value'];
    }

    /**
     * Sets Billing Frequency Type.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for invoicing
     * in a bulling run
     *
     * E.g.:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly – Tuesday
     *
     * Etc.
     *
     * @maps BillingFrequencyType
     */
    public function setBillingFrequencyType(?string $billingFrequencyType): void
    {
        $this->billingFrequencyType['value'] = $billingFrequencyType;
    }

    /**
     * Unsets Billing Frequency Type.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for invoicing
     * in a bulling run
     *
     * E.g.:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly – Tuesday
     *
     * Etc.
     */
    public function unsetBillingFrequencyType(): void
    {
        $this->billingFrequencyType = [];
    }

    /**
     * Returns Billing Run Frequency Type Id.
     * Frequency at which the billing process is triggered.
     *
     * E.g.: 1, 2, 3, etc.
     */
    public function getBillingRunFrequencyTypeId(): ?int
    {
        if (count($this->billingRunFrequencyTypeId) == 0) {
            return null;
        }
        return $this->billingRunFrequencyTypeId['value'];
    }

    /**
     * Sets Billing Run Frequency Type Id.
     * Frequency at which the billing process is triggered.
     *
     * E.g.: 1, 2, 3, etc.
     *
     * @maps BillingRunFrequencyTypeId
     */
    public function setBillingRunFrequencyTypeId(?int $billingRunFrequencyTypeId): void
    {
        $this->billingRunFrequencyTypeId['value'] = $billingRunFrequencyTypeId;
    }

    /**
     * Unsets Billing Run Frequency Type Id.
     * Frequency at which the billing process is triggered.
     *
     * E.g.: 1, 2, 3, etc.
     */
    public function unsetBillingRunFrequencyTypeId(): void
    {
        $this->billingRunFrequencyTypeId = [];
    }

    /**
     * Returns Billing Run Frequnecy.
     * Frequency at which the billing process is triggered.E.g.:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly – Tuesday
     *
     * Etc.
     */
    public function getBillingRunFrequnecy(): ?string
    {
        if (count($this->billingRunFrequnecy) == 0) {
            return null;
        }
        return $this->billingRunFrequnecy['value'];
    }

    /**
     * Sets Billing Run Frequnecy.
     * Frequency at which the billing process is triggered.E.g.:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly – Tuesday
     *
     * Etc.
     *
     * @maps BillingRunFrequnecy
     */
    public function setBillingRunFrequnecy(?string $billingRunFrequnecy): void
    {
        $this->billingRunFrequnecy['value'] = $billingRunFrequnecy;
    }

    /**
     * Unsets Billing Run Frequnecy.
     * Frequency at which the billing process is triggered.E.g.:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly – Tuesday
     *
     * Etc.
     */
    public function unsetBillingRunFrequnecy(): void
    {
        $this->billingRunFrequnecy = [];
    }

    /**
     * Returns Day 1 Run.
     * The first day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function getDay1Run(): ?int
    {
        if (count($this->day1Run) == 0) {
            return null;
        }
        return $this->day1Run['value'];
    }

    /**
     * Sets Day 1 Run.
     * The first day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     *
     * @maps Day1Run
     */
    public function setDay1Run(?int $day1Run): void
    {
        $this->day1Run['value'] = $day1Run;
    }

    /**
     * Unsets Day 1 Run.
     * The first day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function unsetDay1Run(): void
    {
        $this->day1Run = [];
    }

    /**
     * Returns Day 2 Run.
     * The second day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function getDay2Run(): ?int
    {
        if (count($this->day2Run) == 0) {
            return null;
        }
        return $this->day2Run['value'];
    }

    /**
     * Sets Day 2 Run.
     * The second day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     *
     * @maps Day2Run
     */
    public function setDay2Run(?int $day2Run): void
    {
        $this->day2Run['value'] = $day2Run;
    }

    /**
     * Unsets Day 2 Run.
     * The second day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function unsetDay2Run(): void
    {
        $this->day2Run = [];
    }

    /**
     * Returns Day 3 Run.
     * The third day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function getDay3Run(): ?int
    {
        if (count($this->day3Run) == 0) {
            return null;
        }
        return $this->day3Run['value'];
    }

    /**
     * Sets Day 3 Run.
     * The third day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     *
     * @maps Day3Run
     */
    public function setDay3Run(?int $day3Run): void
    {
        $this->day3Run['value'] = $day3Run;
    }

    /**
     * Unsets Day 3 Run.
     * The third day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function unsetDay3Run(): void
    {
        $this->day3Run = [];
    }

    /**
     * Returns Day 4 Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function getDay4Run(): ?int
    {
        if (count($this->day4Run) == 0) {
            return null;
        }
        return $this->day4Run['value'];
    }

    /**
     * Sets Day 4 Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     *
     * @maps Day4Run
     */
    public function setDay4Run(?int $day4Run): void
    {
        $this->day4Run['value'] = $day4Run;
    }

    /**
     * Unsets Day 4 Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month.
     */
    public function unsetDay4Run(): void
    {
        $this->day4Run = [];
    }

    /**
     * Returns Invoice Distribution Methods.
     *
     * @return InvoiceDistributionMethod[]|null
     */
    public function getInvoiceDistributionMethods(): ?array
    {
        return $this->invoiceDistributionMethods;
    }

    /**
     * Sets Invoice Distribution Methods.
     *
     * @maps InvoiceDistributionMethods
     *
     * @param InvoiceDistributionMethod[]|null $invoiceDistributionMethods
     */
    public function setInvoiceDistributionMethods(?array $invoiceDistributionMethods): void
    {
        $this->invoiceDistributionMethods = $invoiceDistributionMethods;
    }

    /**
     * Returns Output Type.
     * Invoice output type (Id-Description)
     *
     * E.g.:
     *
     * 1-PDF
     *
     * 6-Print
     */
    public function getOutputType(): ?string
    {
        if (count($this->outputType) == 0) {
            return null;
        }
        return $this->outputType['value'];
    }

    /**
     * Sets Output Type.
     * Invoice output type (Id-Description)
     *
     * E.g.:
     *
     * 1-PDF
     *
     * 6-Print
     *
     * @maps OutputType
     */
    public function setOutputType(?string $outputType): void
    {
        $this->outputType['value'] = $outputType;
    }

    /**
     * Unsets Output Type.
     * Invoice output type (Id-Description)
     *
     * E.g.:
     *
     * 1-PDF
     *
     * 6-Print
     */
    public function unsetOutputType(): void
    {
        $this->outputType = [];
    }

    /**
     * Returns Invoice Account ID.
     * The Account ID of the account on which the invoice is generated.
     */
    public function getInvoiceAccountID(): ?int
    {
        if (count($this->invoiceAccountID) == 0) {
            return null;
        }
        return $this->invoiceAccountID['value'];
    }

    /**
     * Sets Invoice Account ID.
     * The Account ID of the account on which the invoice is generated.
     *
     * @maps InvoiceAccountID
     */
    public function setInvoiceAccountID(?int $invoiceAccountID): void
    {
        $this->invoiceAccountID['value'] = $invoiceAccountID;
    }

    /**
     * Unsets Invoice Account ID.
     * The Account ID of the account on which the invoice is generated.
     */
    public function unsetInvoiceAccountID(): void
    {
        $this->invoiceAccountID = [];
    }

    /**
     * Returns Invoice Account Number.
     * The Account Number of the account on which the invoice is generated.
     */
    public function getInvoiceAccountNumber(): ?string
    {
        if (count($this->invoiceAccountNumber) == 0) {
            return null;
        }
        return $this->invoiceAccountNumber['value'];
    }

    /**
     * Sets Invoice Account Number.
     * The Account Number of the account on which the invoice is generated.
     *
     * @maps InvoiceAccountNumber
     */
    public function setInvoiceAccountNumber(?string $invoiceAccountNumber): void
    {
        $this->invoiceAccountNumber['value'] = $invoiceAccountNumber;
    }

    /**
     * Unsets Invoice Account Number.
     * The Account Number of the account on which the invoice is generated.
     */
    public function unsetInvoiceAccountNumber(): void
    {
        $this->invoiceAccountNumber = [];
    }

    /**
     * Returns Invoice Account Short Name.
     * The Account Short Name of the account on which the invoice is generated.
     */
    public function getInvoiceAccountShortName(): ?string
    {
        if (count($this->invoiceAccountShortName) == 0) {
            return null;
        }
        return $this->invoiceAccountShortName['value'];
    }

    /**
     * Sets Invoice Account Short Name.
     * The Account Short Name of the account on which the invoice is generated.
     *
     * @maps InvoiceAccountShortName
     */
    public function setInvoiceAccountShortName(?string $invoiceAccountShortName): void
    {
        $this->invoiceAccountShortName['value'] = $invoiceAccountShortName;
    }

    /**
     * Unsets Invoice Account Short Name.
     * The Account Short Name of the account on which the invoice is generated.
     */
    public function unsetInvoiceAccountShortName(): void
    {
        $this->invoiceAccountShortName = [];
    }

    /**
     * Returns Best of Indicator.
     * Best of Indicator of the Pricing customer/account configured.
     */
    public function getBestOfIndicator(): ?bool
    {
        return $this->bestOfIndicator;
    }

    /**
     * Sets Best of Indicator.
     * Best of Indicator of the Pricing customer/account configured.
     *
     * @maps BestOfIndicator
     */
    public function setBestOfIndicator(?bool $bestOfIndicator): void
    {
        $this->bestOfIndicator = $bestOfIndicator;
    }

    /**
     * Returns Is International.
     * Whether the account is international.
     */
    public function getIsInternational(): ?bool
    {
        return $this->isInternational;
    }

    /**
     * Sets Is International.
     * Whether the account is international.
     *
     * @maps IsInternational
     */
    public function setIsInternational(?bool $isInternational): void
    {
        $this->isInternational = $isInternational;
    }

    /**
     * Returns Total Accounts.
     * Total number of accounts under the payer.
     */
    public function getTotalAccounts(): ?int
    {
        if (count($this->totalAccounts) == 0) {
            return null;
        }
        return $this->totalAccounts['value'];
    }

    /**
     * Sets Total Accounts.
     * Total number of accounts under the payer.
     *
     * @maps TotalAccounts
     */
    public function setTotalAccounts(?int $totalAccounts): void
    {
        $this->totalAccounts['value'] = $totalAccounts;
    }

    /**
     * Unsets Total Accounts.
     * Total number of accounts under the payer.
     */
    public function unsetTotalAccounts(): void
    {
        $this->totalAccounts = [];
    }

    /**
     * Returns Total Active Accounts.
     * Total number of active accounts under the payer.
     */
    public function getTotalActiveAccounts(): ?int
    {
        if (count($this->totalActiveAccounts) == 0) {
            return null;
        }
        return $this->totalActiveAccounts['value'];
    }

    /**
     * Sets Total Active Accounts.
     * Total number of active accounts under the payer.
     *
     * @maps TotalActiveAccounts
     */
    public function setTotalActiveAccounts(?int $totalActiveAccounts): void
    {
        $this->totalActiveAccounts['value'] = $totalActiveAccounts;
    }

    /**
     * Unsets Total Active Accounts.
     * Total number of active accounts under the payer.
     */
    public function unsetTotalActiveAccounts(): void
    {
        $this->totalActiveAccounts = [];
    }

    /**
     * Returns Total Cards.
     * Total number of cards under the payer.
     */
    public function getTotalCards(): ?int
    {
        if (count($this->totalCards) == 0) {
            return null;
        }
        return $this->totalCards['value'];
    }

    /**
     * Sets Total Cards.
     * Total number of cards under the payer.
     *
     * @maps TotalCards
     */
    public function setTotalCards(?int $totalCards): void
    {
        $this->totalCards['value'] = $totalCards;
    }

    /**
     * Unsets Total Cards.
     * Total number of cards under the payer.
     */
    public function unsetTotalCards(): void
    {
        $this->totalCards = [];
    }

    /**
     * Returns Total Active Cards.
     * Total number of active cards under the payer.
     */
    public function getTotalActiveCards(): ?int
    {
        if (count($this->totalActiveCards) == 0) {
            return null;
        }
        return $this->totalActiveCards['value'];
    }

    /**
     * Sets Total Active Cards.
     * Total number of active cards under the payer.
     *
     * @maps TotalActiveCards
     */
    public function setTotalActiveCards(?int $totalActiveCards): void
    {
        $this->totalActiveCards['value'] = $totalActiveCards;
    }

    /**
     * Unsets Total Active Cards.
     * Total number of active cards under the payer.
     */
    public function unsetTotalActiveCards(): void
    {
        $this->totalActiveCards = [];
    }

    /**
     * Returns Total Blocked Cards.
     * Total number of cards under the payer that are permanently blocked
     */
    public function getTotalBlockedCards(): ?int
    {
        if (count($this->totalBlockedCards) == 0) {
            return null;
        }
        return $this->totalBlockedCards['value'];
    }

    /**
     * Sets Total Blocked Cards.
     * Total number of cards under the payer that are permanently blocked
     *
     * @maps TotalBlockedCards
     */
    public function setTotalBlockedCards(?int $totalBlockedCards): void
    {
        $this->totalBlockedCards['value'] = $totalBlockedCards;
    }

    /**
     * Unsets Total Blocked Cards.
     * Total number of cards under the payer that are permanently blocked
     */
    public function unsetTotalBlockedCards(): void
    {
        $this->totalBlockedCards = [];
    }

    /**
     * Returns Total Cancelled Cards.
     * Total number of cards under the payer that are cancelled
     */
    public function getTotalCancelledCards(): ?int
    {
        if (count($this->totalCancelledCards) == 0) {
            return null;
        }
        return $this->totalCancelledCards['value'];
    }

    /**
     * Sets Total Cancelled Cards.
     * Total number of cards under the payer that are cancelled
     *
     * @maps TotalCancelledCards
     */
    public function setTotalCancelledCards(?int $totalCancelledCards): void
    {
        $this->totalCancelledCards['value'] = $totalCancelledCards;
    }

    /**
     * Unsets Total Cancelled Cards.
     * Total number of cards under the payer that are cancelled
     */
    public function unsetTotalCancelledCards(): void
    {
        $this->totalCancelledCards = [];
    }

    /**
     * Returns Total Expired Cards.
     * Total number of expired cards under the payer.
     */
    public function getTotalExpiredCards(): ?int
    {
        if (count($this->totalExpiredCards) == 0) {
            return null;
        }
        return $this->totalExpiredCards['value'];
    }

    /**
     * Sets Total Expired Cards.
     * Total number of expired cards under the payer.
     *
     * @maps TotalExpiredCards
     */
    public function setTotalExpiredCards(?int $totalExpiredCards): void
    {
        $this->totalExpiredCards['value'] = $totalExpiredCards;
    }

    /**
     * Unsets Total Expired Cards.
     * Total number of expired cards under the payer.
     */
    public function unsetTotalExpiredCards(): void
    {
        $this->totalExpiredCards = [];
    }

    /**
     * Returns Total Renewal Pending Cards.
     * Total number of Renewal Pending cards under the payer.
     */
    public function getTotalRenewalPendingCards(): ?int
    {
        if (count($this->totalRenewalPendingCards) == 0) {
            return null;
        }
        return $this->totalRenewalPendingCards['value'];
    }

    /**
     * Sets Total Renewal Pending Cards.
     * Total number of Renewal Pending cards under the payer.
     *
     * @maps TotalRenewalPendingCards
     */
    public function setTotalRenewalPendingCards(?int $totalRenewalPendingCards): void
    {
        $this->totalRenewalPendingCards['value'] = $totalRenewalPendingCards;
    }

    /**
     * Unsets Total Renewal Pending Cards.
     * Total number of Renewal Pending cards under the payer.
     */
    public function unsetTotalRenewalPendingCards(): void
    {
        $this->totalRenewalPendingCards = [];
    }

    /**
     * Returns Total Replaced Cards.
     * Total number of cards under the payer with status as “Replaced
     */
    public function getTotalReplacedCards(): ?int
    {
        if (count($this->totalReplacedCards) == 0) {
            return null;
        }
        return $this->totalReplacedCards['value'];
    }

    /**
     * Sets Total Replaced Cards.
     * Total number of cards under the payer with status as “Replaced
     *
     * @maps TotalReplacedCards
     */
    public function setTotalReplacedCards(?int $totalReplacedCards): void
    {
        $this->totalReplacedCards['value'] = $totalReplacedCards;
    }

    /**
     * Unsets Total Replaced Cards.
     * Total number of cards under the payer with status as “Replaced
     */
    public function unsetTotalReplacedCards(): void
    {
        $this->totalReplacedCards = [];
    }

    /**
     * Returns Total Temporary Block Cards by Customer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     */
    public function getTotalTemporaryBlockCardsByCustomer(): ?int
    {
        if (count($this->totalTemporaryBlockCardsByCustomer) == 0) {
            return null;
        }
        return $this->totalTemporaryBlockCardsByCustomer['value'];
    }

    /**
     * Sets Total Temporary Block Cards by Customer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     *
     * @maps TotalTemporaryBlockCardsByCustomer
     */
    public function setTotalTemporaryBlockCardsByCustomer(?int $totalTemporaryBlockCardsByCustomer): void
    {
        $this->totalTemporaryBlockCardsByCustomer['value'] = $totalTemporaryBlockCardsByCustomer;
    }

    /**
     * Unsets Total Temporary Block Cards by Customer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     */
    public function unsetTotalTemporaryBlockCardsByCustomer(): void
    {
        $this->totalTemporaryBlockCardsByCustomer = [];
    }

    /**
     * Returns Total Temporary Block Cards by Shell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     */
    public function getTotalTemporaryBlockCardsByShell(): ?int
    {
        if (count($this->totalTemporaryBlockCardsByShell) == 0) {
            return null;
        }
        return $this->totalTemporaryBlockCardsByShell['value'];
    }

    /**
     * Sets Total Temporary Block Cards by Shell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     *
     * @maps TotalTemporaryBlockCardsByShell
     */
    public function setTotalTemporaryBlockCardsByShell(?int $totalTemporaryBlockCardsByShell): void
    {
        $this->totalTemporaryBlockCardsByShell['value'] = $totalTemporaryBlockCardsByShell;
    }

    /**
     * Unsets Total Temporary Block Cards by Shell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     */
    public function unsetTotalTemporaryBlockCardsByShell(): void
    {
        $this->totalTemporaryBlockCardsByShell = [];
    }

    /**
     * Returns Total New Cards.
     * Total number of cards in “New” status
     */
    public function getTotalNewCards(): ?int
    {
        if (count($this->totalNewCards) == 0) {
            return null;
        }
        return $this->totalNewCards['value'];
    }

    /**
     * Sets Total New Cards.
     * Total number of cards in “New” status
     *
     * @maps TotalNewCards
     */
    public function setTotalNewCards(?int $totalNewCards): void
    {
        $this->totalNewCards['value'] = $totalNewCards;
    }

    /**
     * Unsets Total New Cards.
     * Total number of cards in “New” status
     */
    public function unsetTotalNewCards(): void
    {
        $this->totalNewCards = [];
    }

    /**
     * Returns Total Fraud Cards.
     * Total number of cards in Fraud status
     */
    public function getTotalFraudCards(): ?int
    {
        if (count($this->totalFraudCards) == 0) {
            return null;
        }
        return $this->totalFraudCards['value'];
    }

    /**
     * Sets Total Fraud Cards.
     * Total number of cards in Fraud status
     *
     * @maps TotalFraudCards
     */
    public function setTotalFraudCards(?int $totalFraudCards): void
    {
        $this->totalFraudCards['value'] = $totalFraudCards;
    }

    /**
     * Unsets Total Fraud Cards.
     * Total number of cards in Fraud status
     */
    public function unsetTotalFraudCards(): void
    {
        $this->totalFraudCards = [];
    }

    /**
     * Returns Total Blocked Accounts.
     * Total number of accounts in Blocked status
     */
    public function getTotalBlockedAccounts(): ?int
    {
        if (count($this->totalBlockedAccounts) == 0) {
            return null;
        }
        return $this->totalBlockedAccounts['value'];
    }

    /**
     * Sets Total Blocked Accounts.
     * Total number of accounts in Blocked status
     *
     * @maps TotalBlockedAccounts
     */
    public function setTotalBlockedAccounts(?int $totalBlockedAccounts): void
    {
        $this->totalBlockedAccounts['value'] = $totalBlockedAccounts;
    }

    /**
     * Unsets Total Blocked Accounts.
     * Total number of accounts in Blocked status
     */
    public function unsetTotalBlockedAccounts(): void
    {
        $this->totalBlockedAccounts = [];
    }

    /**
     * Returns Total Cancelled Accounts.
     * Total number of accounts in Cancel status
     */
    public function getTotalCancelledAccounts(): ?int
    {
        if (count($this->totalCancelledAccounts) == 0) {
            return null;
        }
        return $this->totalCancelledAccounts['value'];
    }

    /**
     * Sets Total Cancelled Accounts.
     * Total number of accounts in Cancel status
     *
     * @maps TotalCancelledAccounts
     */
    public function setTotalCancelledAccounts(?int $totalCancelledAccounts): void
    {
        $this->totalCancelledAccounts['value'] = $totalCancelledAccounts;
    }

    /**
     * Unsets Total Cancelled Accounts.
     * Total number of accounts in Cancel status
     */
    public function unsetTotalCancelledAccounts(): void
    {
        $this->totalCancelledAccounts = [];
    }

    /**
     * Returns Payer Trading Name.
     * Trading name for the Payer
     */
    public function getPayerTradingName(): ?string
    {
        if (count($this->payerTradingName) == 0) {
            return null;
        }
        return $this->payerTradingName['value'];
    }

    /**
     * Sets Payer Trading Name.
     * Trading name for the Payer
     *
     * @maps PayerTradingName
     */
    public function setPayerTradingName(?string $payerTradingName): void
    {
        $this->payerTradingName['value'] = $payerTradingName;
    }

    /**
     * Unsets Payer Trading Name.
     * Trading name for the Payer
     */
    public function unsetPayerTradingName(): void
    {
        $this->payerTradingName = [];
    }

    /**
     * Returns Status.
     * Payer current status id and description
     *
     * e.g. (Id – Description):
     *
     * 1-Active
     *
     * 2-Requested from UTA
     *
     * 3-Awaiting embossing
     *
     * 4-Manufactured
     *
     * 5-Awaiting despatch
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Payer current status id and description
     *
     * e.g. (Id – Description):
     *
     * 1-Active
     *
     * 2-Requested from UTA
     *
     * 3-Awaiting embossing
     *
     * 4-Manufactured
     *
     * 5-Awaiting despatch
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Billing Language.
     * Payer Billing Language id and description
     */
    public function getBillingLanguage(): ?string
    {
        if (count($this->billingLanguage) == 0) {
            return null;
        }
        return $this->billingLanguage['value'];
    }

    /**
     * Sets Billing Language.
     * Payer Billing Language id and description
     *
     * @maps BillingLanguage
     */
    public function setBillingLanguage(?string $billingLanguage): void
    {
        $this->billingLanguage['value'] = $billingLanguage;
    }

    /**
     * Unsets Billing Language.
     * Payer Billing Language id and description
     */
    public function unsetBillingLanguage(): void
    {
        $this->billingLanguage = [];
    }

    /**
     * Returns Legal Entity.
     * Legal entity id and description of the Payer
     */
    public function getLegalEntity(): ?string
    {
        if (count($this->legalEntity) == 0) {
            return null;
        }
        return $this->legalEntity['value'];
    }

    /**
     * Sets Legal Entity.
     * Legal entity id and description of the Payer
     *
     * @maps LegalEntity
     */
    public function setLegalEntity(?string $legalEntity): void
    {
        $this->legalEntity['value'] = $legalEntity;
    }

    /**
     * Unsets Legal Entity.
     * Legal entity id and description of the Payer
     */
    public function unsetLegalEntity(): void
    {
        $this->legalEntity = [];
    }

    /**
     * Returns Date Established.
     * Payer/Company Established Date.
     */
    public function getDateEstablished(): ?string
    {
        if (count($this->dateEstablished) == 0) {
            return null;
        }
        return $this->dateEstablished['value'];
    }

    /**
     * Sets Date Established.
     * Payer/Company Established Date.
     *
     * @maps DateEstablished
     */
    public function setDateEstablished(?string $dateEstablished): void
    {
        $this->dateEstablished['value'] = $dateEstablished;
    }

    /**
     * Unsets Date Established.
     * Payer/Company Established Date.
     */
    public function unsetDateEstablished(): void
    {
        $this->dateEstablished = [];
    }

    /**
     * Returns Customer Classification.
     * Payer/Company Classification id and description
     */
    public function getCustomerClassification(): ?string
    {
        if (count($this->customerClassification) == 0) {
            return null;
        }
        return $this->customerClassification['value'];
    }

    /**
     * Sets Customer Classification.
     * Payer/Company Classification id and description
     *
     * @maps CustomerClassification
     */
    public function setCustomerClassification(?string $customerClassification): void
    {
        $this->customerClassification['value'] = $customerClassification;
    }

    /**
     * Unsets Customer Classification.
     * Payer/Company Classification id and description
     */
    public function unsetCustomerClassification(): void
    {
        $this->customerClassification = [];
    }

    /**
     * Returns Industry Class.
     * Payer/Company Industry class id and description
     */
    public function getIndustryClass(): ?string
    {
        if (count($this->industryClass) == 0) {
            return null;
        }
        return $this->industryClass['value'];
    }

    /**
     * Sets Industry Class.
     * Payer/Company Industry class id and description
     *
     * @maps IndustryClass
     */
    public function setIndustryClass(?string $industryClass): void
    {
        $this->industryClass['value'] = $industryClass;
    }

    /**
     * Unsets Industry Class.
     * Payer/Company Industry class id and description
     */
    public function unsetIndustryClass(): void
    {
        $this->industryClass = [];
    }

    /**
     * Returns Marketing Segmentation.
     * Marketing Segmentation id and description
     */
    public function getMarketingSegmentation(): ?string
    {
        if (count($this->marketingSegmentation) == 0) {
            return null;
        }
        return $this->marketingSegmentation['value'];
    }

    /**
     * Sets Marketing Segmentation.
     * Marketing Segmentation id and description
     *
     * @maps MarketingSegmentation
     */
    public function setMarketingSegmentation(?string $marketingSegmentation): void
    {
        $this->marketingSegmentation['value'] = $marketingSegmentation;
    }

    /**
     * Unsets Marketing Segmentation.
     * Marketing Segmentation id and description
     */
    public function unsetMarketingSegmentation(): void
    {
        $this->marketingSegmentation = [];
    }

    /**
     * Returns Line of Business.
     * Payer/Company Line of Business Id and Description
     */
    public function getLineOfBusiness(): ?string
    {
        if (count($this->lineOfBusiness) == 0) {
            return null;
        }
        return $this->lineOfBusiness['value'];
    }

    /**
     * Sets Line of Business.
     * Payer/Company Line of Business Id and Description
     *
     * @maps LineOfBusiness
     */
    public function setLineOfBusiness(?string $lineOfBusiness): void
    {
        $this->lineOfBusiness['value'] = $lineOfBusiness;
    }

    /**
     * Unsets Line of Business.
     * Payer/Company Line of Business Id and Description
     */
    public function unsetLineOfBusiness(): void
    {
        $this->lineOfBusiness = [];
    }

    /**
     * Returns Print Credit Limit.
     * Is Credit Limit printed on the statement of account: True/False
     *
     * If True Credit Limit is printed on invoice/SOA
     */
    public function getPrintCreditLimit(): ?bool
    {
        return $this->printCreditLimit;
    }

    /**
     * Sets Print Credit Limit.
     * Is Credit Limit printed on the statement of account: True/False
     *
     * If True Credit Limit is printed on invoice/SOA
     *
     * @maps PrintCreditLimit
     */
    public function setPrintCreditLimit(?bool $printCreditLimit): void
    {
        $this->printCreditLimit = $printCreditLimit;
    }

    /**
     * Returns Card Group Type.
     * Card Group Type configured for Payer
     *
     * e.g. (Id – Description):
     *
     * 1-Horizontal only
     *
     * 2-Vertical only
     *
     * 3-Both
     */
    public function getCardGroupType(): ?string
    {
        if (count($this->cardGroupType) == 0) {
            return null;
        }
        return $this->cardGroupType['value'];
    }

    /**
     * Sets Card Group Type.
     * Card Group Type configured for Payer
     *
     * e.g. (Id – Description):
     *
     * 1-Horizontal only
     *
     * 2-Vertical only
     *
     * 3-Both
     *
     * @maps CardGroupType
     */
    public function setCardGroupType(?string $cardGroupType): void
    {
        $this->cardGroupType['value'] = $cardGroupType;
    }

    /**
     * Unsets Card Group Type.
     * Card Group Type configured for Payer
     *
     * e.g. (Id – Description):
     *
     * 1-Horizontal only
     *
     * 2-Vertical only
     *
     * 3-Both
     */
    public function unsetCardGroupType(): void
    {
        $this->cardGroupType = [];
    }

    /**
     * Returns Renew Cards.
     * If set to True cards will be automatically renewed on expiry
     */
    public function getRenewCards(): ?bool
    {
        return $this->renewCards;
    }

    /**
     * Sets Renew Cards.
     * If set to True cards will be automatically renewed on expiry
     *
     * @maps RenewCards
     */
    public function setRenewCards(?bool $renewCards): void
    {
        $this->renewCards = $renewCards;
    }

    /**
     * Returns Allow Select PIN.
     * If set to True then Self Select PIN is allowed for Payer
     */
    public function getAllowSelectPIN(): ?bool
    {
        return $this->allowSelectPIN;
    }

    /**
     * Sets Allow Select PIN.
     * If set to True then Self Select PIN is allowed for Payer
     *
     * @maps AllowSelectPIN
     */
    public function setAllowSelectPIN(?bool $allowSelectPIN): void
    {
        $this->allowSelectPIN = $allowSelectPIN;
    }

    /**
     * Returns Use Fleet PIN.
     * If set to True then Fleet PIN is applied for the cards directly under payer
     */
    public function getUseFleetPIN(): ?bool
    {
        return $this->useFleetPIN;
    }

    /**
     * Sets Use Fleet PIN.
     * If set to True then Fleet PIN is applied for the cards directly under payer
     *
     * @maps UseFleetPIN
     */
    public function setUseFleetPIN(?bool $useFleetPIN): void
    {
        $this->useFleetPIN = $useFleetPIN;
    }

    /**
     * Returns V at Reg Number.
     * Payer/Company VAT registration number.
     */
    public function getVATRegNumber(): ?string
    {
        if (count($this->vATRegNumber) == 0) {
            return null;
        }
        return $this->vATRegNumber['value'];
    }

    /**
     * Sets V at Reg Number.
     * Payer/Company VAT registration number.
     *
     * @maps VATRegNumber
     */
    public function setVATRegNumber(?string $vATRegNumber): void
    {
        $this->vATRegNumber['value'] = $vATRegNumber;
    }

    /**
     * Unsets V at Reg Number.
     * Payer/Company VAT registration number.
     */
    public function unsetVATRegNumber(): void
    {
        $this->vATRegNumber = [];
    }

    /**
     * Returns V at Reg Number 2.
     * Payer/Company VAT registration number 2.
     */
    public function getVATRegNumber2(): ?string
    {
        return $this->vATRegNumber2;
    }

    /**
     * Sets V at Reg Number 2.
     * Payer/Company VAT registration number 2.
     *
     * @maps VATRegNumber2
     */
    public function setVATRegNumber2(?string $vATRegNumber2): void
    {
        $this->vATRegNumber2 = $vATRegNumber2;
    }

    /**
     * Returns Registration Number.
     * Payer/Company Registration number
     */
    public function getRegistrationNumber(): ?string
    {
        if (count($this->registrationNumber) == 0) {
            return null;
        }
        return $this->registrationNumber['value'];
    }

    /**
     * Sets Registration Number.
     * Payer/Company Registration number
     *
     * @maps RegistrationNumber
     */
    public function setRegistrationNumber(?string $registrationNumber): void
    {
        $this->registrationNumber['value'] = $registrationNumber;
    }

    /**
     * Unsets Registration Number.
     * Payer/Company Registration number
     */
    public function unsetRegistrationNumber(): void
    {
        $this->registrationNumber = [];
    }

    /**
     * Returns Registration Number 2.
     * Payer/Company Registration number2
     */
    public function getRegistrationNumber2(): ?string
    {
        if (count($this->registrationNumber2) == 0) {
            return null;
        }
        return $this->registrationNumber2['value'];
    }

    /**
     * Sets Registration Number 2.
     * Payer/Company Registration number2
     *
     * @maps RegistrationNumber2
     */
    public function setRegistrationNumber2(?string $registrationNumber2): void
    {
        $this->registrationNumber2['value'] = $registrationNumber2;
    }

    /**
     * Unsets Registration Number 2.
     * Payer/Company Registration number2
     */
    public function unsetRegistrationNumber2(): void
    {
        $this->registrationNumber2 = [];
    }

    /**
     * Returns Sales Ledger Balance.
     * Sales Ledger Balance (Billed)
     */
    public function getSalesLedgerBalance(): ?float
    {
        if (count($this->salesLedgerBalance) == 0) {
            return null;
        }
        return $this->salesLedgerBalance['value'];
    }

    /**
     * Sets Sales Ledger Balance.
     * Sales Ledger Balance (Billed)
     *
     * @maps SalesLedgerBalance
     */
    public function setSalesLedgerBalance(?float $salesLedgerBalance): void
    {
        $this->salesLedgerBalance['value'] = $salesLedgerBalance;
    }

    /**
     * Unsets Sales Ledger Balance.
     * Sales Ledger Balance (Billed)
     */
    public function unsetSalesLedgerBalance(): void
    {
        $this->salesLedgerBalance = [];
    }

    /**
     * Returns Exposure.
     * Exposure after guarantee
     */
    public function getExposure(): ?float
    {
        if (count($this->exposure) == 0) {
            return null;
        }
        return $this->exposure['value'];
    }

    /**
     * Sets Exposure.
     * Exposure after guarantee
     *
     * @maps Exposure
     */
    public function setExposure(?float $exposure): void
    {
        $this->exposure['value'] = $exposure;
    }

    /**
     * Unsets Exposure.
     * Exposure after guarantee
     */
    public function unsetExposure(): void
    {
        $this->exposure = [];
    }

    /**
     * Returns Outstanding Debt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     */
    public function getOutstandingDebt(): ?float
    {
        if (count($this->outstandingDebt) == 0) {
            return null;
        }
        return $this->outstandingDebt['value'];
    }

    /**
     * Sets Outstanding Debt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     *
     * @maps OutstandingDebt
     */
    public function setOutstandingDebt(?float $outstandingDebt): void
    {
        $this->outstandingDebt['value'] = $outstandingDebt;
    }

    /**
     * Unsets Outstanding Debt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     */
    public function unsetOutstandingDebt(): void
    {
        $this->outstandingDebt = [];
    }

    /**
     * Returns Available Credit.
     * The available credit for the payer.
     *
     * This is the credit limit minus the outstanding debt.
     */
    public function getAvailableCredit(): ?float
    {
        if (count($this->availableCredit) == 0) {
            return null;
        }
        return $this->availableCredit['value'];
    }

    /**
     * Sets Available Credit.
     * The available credit for the payer.
     *
     * This is the credit limit minus the outstanding debt.
     *
     * @maps AvailableCredit
     */
    public function setAvailableCredit(?float $availableCredit): void
    {
        $this->availableCredit['value'] = $availableCredit;
    }

    /**
     * Unsets Available Credit.
     * The available credit for the payer.
     *
     * This is the credit limit minus the outstanding debt.
     */
    public function unsetAvailableCredit(): void
    {
        $this->availableCredit = [];
    }

    /**
     * Returns Band.
     * Band Id and Description of the Payer in Card Platform.
     *
     * e.g. (Id – Description):
     *
     * 1-Platinum
     *
     * 2-Gold
     *
     * 3-Silver
     *
     * 4-Bronze
     */
    public function getBand(): ?string
    {
        if (count($this->band) == 0) {
            return null;
        }
        return $this->band['value'];
    }

    /**
     * Sets Band.
     * Band Id and Description of the Payer in Card Platform.
     *
     * e.g. (Id – Description):
     *
     * 1-Platinum
     *
     * 2-Gold
     *
     * 3-Silver
     *
     * 4-Bronze
     *
     * @maps Band
     */
    public function setBand(?string $band): void
    {
        $this->band['value'] = $band;
    }

    /**
     * Unsets Band.
     * Band Id and Description of the Payer in Card Platform.
     *
     * e.g. (Id – Description):
     *
     * 1-Platinum
     *
     * 2-Gold
     *
     * 3-Silver
     *
     * 4-Bronze
     */
    public function unsetBand(): void
    {
        $this->band = [];
    }

    /**
     * Returns Global Customer Reference Id.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     */
    public function getGlobalCustomerReferenceId(): ?string
    {
        if (count($this->globalCustomerReferenceId) == 0) {
            return null;
        }
        return $this->globalCustomerReferenceId['value'];
    }

    /**
     * Sets Global Customer Reference Id.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     *
     * @maps GlobalCustomerReferenceId
     */
    public function setGlobalCustomerReferenceId(?string $globalCustomerReferenceId): void
    {
        $this->globalCustomerReferenceId['value'] = $globalCustomerReferenceId;
    }

    /**
     * Unsets Global Customer Reference Id.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     */
    public function unsetGlobalCustomerReferenceId(): void
    {
        $this->globalCustomerReferenceId = [];
    }

    /**
     * Returns Credit Limit.
     * Payment Credit limit of Payer.
     */
    public function getCreditLimit(): ?float
    {
        if (count($this->creditLimit) == 0) {
            return null;
        }
        return $this->creditLimit['value'];
    }

    /**
     * Sets Credit Limit.
     * Payment Credit limit of Payer.
     *
     * @maps CreditLimit
     */
    public function setCreditLimit(?float $creditLimit): void
    {
        $this->creditLimit['value'] = $creditLimit;
    }

    /**
     * Unsets Credit Limit.
     * Payment Credit limit of Payer.
     */
    public function unsetCreditLimit(): void
    {
        $this->creditLimit = [];
    }

    /**
     * Returns Credit Limit in Customer Currency.
     * Credit limit in Customer currency.
     *
     * Note: For currency details refer the parameters CurrencyCode & CurrencySymbol in the PayerDetail
     * response.
     */
    public function getCreditLimitInCustomerCurrency(): ?float
    {
        if (count($this->creditLimitInCustomerCurrency) == 0) {
            return null;
        }
        return $this->creditLimitInCustomerCurrency['value'];
    }

    /**
     * Sets Credit Limit in Customer Currency.
     * Credit limit in Customer currency.
     *
     * Note: For currency details refer the parameters CurrencyCode & CurrencySymbol in the PayerDetail
     * response.
     *
     * @maps CreditLimitInCustomerCurrency
     */
    public function setCreditLimitInCustomerCurrency(?float $creditLimitInCustomerCurrency): void
    {
        $this->creditLimitInCustomerCurrency['value'] = $creditLimitInCustomerCurrency;
    }

    /**
     * Unsets Credit Limit in Customer Currency.
     * Credit limit in Customer currency.
     *
     * Note: For currency details refer the parameters CurrencyCode & CurrencySymbol in the PayerDetail
     * response.
     */
    public function unsetCreditLimitInCustomerCurrency(): void
    {
        $this->creditLimitInCustomerCurrency = [];
    }

    /**
     * Returns Billing Currency Code.
     * Customer Billing currency ISO code.
     */
    public function getBillingCurrencyCode(): ?string
    {
        if (count($this->billingCurrencyCode) == 0) {
            return null;
        }
        return $this->billingCurrencyCode['value'];
    }

    /**
     * Sets Billing Currency Code.
     * Customer Billing currency ISO code.
     *
     * @maps BillingCurrencyCode
     */
    public function setBillingCurrencyCode(?string $billingCurrencyCode): void
    {
        $this->billingCurrencyCode['value'] = $billingCurrencyCode;
    }

    /**
     * Unsets Billing Currency Code.
     * Customer Billing currency ISO code.
     */
    public function unsetBillingCurrencyCode(): void
    {
        $this->billingCurrencyCode = [];
    }

    /**
     * Returns Billing Currency Symbol.
     * Customer Billing currency Symbol.
     */
    public function getBillingCurrencySymbol(): ?string
    {
        if (count($this->billingCurrencySymbol) == 0) {
            return null;
        }
        return $this->billingCurrencySymbol['value'];
    }

    /**
     * Sets Billing Currency Symbol.
     * Customer Billing currency Symbol.
     *
     * @maps BillingCurrencySymbol
     */
    public function setBillingCurrencySymbol(?string $billingCurrencySymbol): void
    {
        $this->billingCurrencySymbol['value'] = $billingCurrencySymbol;
    }

    /**
     * Unsets Billing Currency Symbol.
     * Customer Billing currency Symbol.
     */
    public function unsetBillingCurrencySymbol(): void
    {
        $this->billingCurrencySymbol = [];
    }

    /**
     * Returns Payment Method.
     * Payment method Id and Description as configured for Payer in Card Platform
     */
    public function getPaymentMethod(): ?string
    {
        if (count($this->paymentMethod) == 0) {
            return null;
        }
        return $this->paymentMethod['value'];
    }

    /**
     * Sets Payment Method.
     * Payment method Id and Description as configured for Payer in Card Platform
     *
     * @maps PaymentMethod
     */
    public function setPaymentMethod(?string $paymentMethod): void
    {
        $this->paymentMethod['value'] = $paymentMethod;
    }

    /**
     * Unsets Payment Method.
     * Payment method Id and Description as configured for Payer in Card Platform
     */
    public function unsetPaymentMethod(): void
    {
        $this->paymentMethod = [];
    }

    /**
     * Returns Payment Terms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     */
    public function getPaymentTerms(): ?string
    {
        if (count($this->paymentTerms) == 0) {
            return null;
        }
        return $this->paymentTerms['value'];
    }

    /**
     * Sets Payment Terms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     *
     * @maps PaymentTerms
     */
    public function setPaymentTerms(?string $paymentTerms): void
    {
        $this->paymentTerms['value'] = $paymentTerms;
    }

    /**
     * Unsets Payment Terms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     */
    public function unsetPaymentTerms(): void
    {
        $this->paymentTerms = [];
    }

    /**
     * Returns Temporary Credit Limit Increase.
     * Temporary Credit limit increase value
     */
    public function getTemporaryCreditLimitIncrease(): ?float
    {
        if (count($this->temporaryCreditLimitIncrease) == 0) {
            return null;
        }
        return $this->temporaryCreditLimitIncrease['value'];
    }

    /**
     * Sets Temporary Credit Limit Increase.
     * Temporary Credit limit increase value
     *
     * @maps TemporaryCreditLimitIncrease
     */
    public function setTemporaryCreditLimitIncrease(?float $temporaryCreditLimitIncrease): void
    {
        $this->temporaryCreditLimitIncrease['value'] = $temporaryCreditLimitIncrease;
    }

    /**
     * Unsets Temporary Credit Limit Increase.
     * Temporary Credit limit increase value
     */
    public function unsetTemporaryCreditLimitIncrease(): void
    {
        $this->temporaryCreditLimitIncrease = [];
    }

    /**
     * Returns Temporary Credit Limit Increase in Customer Currency.
     * Temporary Credit limit increase value
     */
    public function getTemporaryCreditLimitIncreaseInCustomerCurrency(): ?float
    {
        if (count($this->temporaryCreditLimitIncreaseInCustomerCurrency) == 0) {
            return null;
        }
        return $this->temporaryCreditLimitIncreaseInCustomerCurrency['value'];
    }

    /**
     * Sets Temporary Credit Limit Increase in Customer Currency.
     * Temporary Credit limit increase value
     *
     * @maps TemporaryCreditLimitIncreaseInCustomerCurrency
     */
    public function setTemporaryCreditLimitIncreaseInCustomerCurrency(
        ?float $temporaryCreditLimitIncreaseInCustomerCurrency
    ): void {
        $this->temporaryCreditLimitIncreaseInCustomerCurrency['value'] =
            $temporaryCreditLimitIncreaseInCustomerCurrency;
    }

    /**
     * Unsets Temporary Credit Limit Increase in Customer Currency.
     * Temporary Credit limit increase value
     */
    public function unsetTemporaryCreditLimitIncreaseInCustomerCurrency(): void
    {
        $this->temporaryCreditLimitIncreaseInCustomerCurrency = [];
    }

    /**
     * Returns Temporary Credit Limit Expiry Date.
     * Temporary Credit limit expiry date
     */
    public function getTemporaryCreditLimitExpiryDate(): ?string
    {
        if (count($this->temporaryCreditLimitExpiryDate) == 0) {
            return null;
        }
        return $this->temporaryCreditLimitExpiryDate['value'];
    }

    /**
     * Sets Temporary Credit Limit Expiry Date.
     * Temporary Credit limit expiry date
     *
     * @maps TemporaryCreditLimitExpiryDate
     */
    public function setTemporaryCreditLimitExpiryDate(?string $temporaryCreditLimitExpiryDate): void
    {
        $this->temporaryCreditLimitExpiryDate['value'] = $temporaryCreditLimitExpiryDate;
    }

    /**
     * Unsets Temporary Credit Limit Expiry Date.
     * Temporary Credit limit expiry date
     */
    public function unsetTemporaryCreditLimitExpiryDate(): void
    {
        $this->temporaryCreditLimitExpiryDate = [];
    }

    /**
     * Returns Payer Bank Account.
     *
     * @return BankAccount[]|null
     */
    public function getPayerBankAccount(): ?array
    {
        return $this->payerBankAccount;
    }

    /**
     * Sets Payer Bank Account.
     *
     * @maps PayerBankAccount
     *
     * @param BankAccount[]|null $payerBankAccount
     */
    public function setPayerBankAccount(?array $payerBankAccount): void
    {
        $this->payerBankAccount = $payerBankAccount;
    }

    /**
     * Returns Card Delivery Address.
     */
    public function getCardDeliveryAddress(): ?Address
    {
        return $this->cardDeliveryAddress;
    }

    /**
     * Sets Card Delivery Address.
     *
     * @maps CardDeliveryAddress
     */
    public function setCardDeliveryAddress(?Address $cardDeliveryAddress): void
    {
        $this->cardDeliveryAddress = $cardDeliveryAddress;
    }

    /**
     * Returns Correspondance Address.
     */
    public function getCorrespondanceAddress(): ?Address
    {
        return $this->correspondanceAddress;
    }

    /**
     * Sets Correspondance Address.
     *
     * @maps CorrespondanceAddress
     */
    public function setCorrespondanceAddress(?Address $correspondanceAddress): void
    {
        $this->correspondanceAddress = $correspondanceAddress;
    }

    /**
     * Returns Billing Address.
     */
    public function getBillingAddress(): ?Address
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     *
     * @maps BillingAddress
     */
    public function setBillingAddress(?Address $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Has Active Vol Based Pricing.
     * True, if the payer is setup for volume-based pricing and is active on the current date, else false.
     *
     *
     *
     * This field is returned only when IncludeBonusParameters is set to True in the request. Else set to
     * null.
     */
    public function getHasActiveVolBasedPricing(): ?bool
    {
        return $this->hasActiveVolBasedPricing;
    }

    /**
     * Sets Has Active Vol Based Pricing.
     * True, if the payer is setup for volume-based pricing and is active on the current date, else false.
     *
     *
     *
     * This field is returned only when IncludeBonusParameters is set to True in the request. Else set to
     * null.
     *
     * @maps HasActiveVolBasedPricing
     */
    public function setHasActiveVolBasedPricing(?bool $hasActiveVolBasedPricing): void
    {
        $this->hasActiveVolBasedPricing = $hasActiveVolBasedPricing;
    }

    /**
     * Returns Has Active Vol Based Bonus.
     * True, if the payer is setup for volume-based bonus and is active on the current date, else false.
     *
     * This field is returned only when IncludeBonusParameters is set to True in the request. Else set to
     * null.
     */
    public function getHasActiveVolBasedBonus(): ?bool
    {
        return $this->hasActiveVolBasedBonus;
    }

    /**
     * Sets Has Active Vol Based Bonus.
     * True, if the payer is setup for volume-based bonus and is active on the current date, else false.
     *
     * This field is returned only when IncludeBonusParameters is set to True in the request. Else set to
     * null.
     *
     * @maps HasActiveVolBasedBonus
     */
    public function setHasActiveVolBasedBonus(?bool $hasActiveVolBasedBonus): void
    {
        $this->hasActiveVolBasedBonus = $hasActiveVolBasedBonus;
    }

    /**
     * Returns Has Active Vol Based Association Bonus.
     * True, if the payer is setup for volume-based association bonus and is active on the current date,
     * else false.
     *
     * This field is returned only when IncludeBonusParameters is set to True in the request. Else set to
     * null.
     */
    public function getHasActiveVolBasedAssociationBonus(): ?bool
    {
        return $this->hasActiveVolBasedAssociationBonus;
    }

    /**
     * Sets Has Active Vol Based Association Bonus.
     * True, if the payer is setup for volume-based association bonus and is active on the current date,
     * else false.
     *
     * This field is returned only when IncludeBonusParameters is set to True in the request. Else set to
     * null.
     *
     * @maps HasActiveVolBasedAssociationBonus
     */
    public function setHasActiveVolBasedAssociationBonus(?bool $hasActiveVolBasedAssociationBonus): void
    {
        $this->hasActiveVolBasedAssociationBonus = $hasActiveVolBasedAssociationBonus;
    }

    /**
     * Returns Finance Currency.
     * This entity will not be present in the response if the ‘IncludeFinanceCurrency’ flag in the request
     * is ‘false’
     */
    public function getFinanceCurrency(): ?FinanceCurrency
    {
        return $this->financeCurrency;
    }

    /**
     * Sets Finance Currency.
     * This entity will not be present in the response if the ‘IncludeFinanceCurrency’ flag in the request
     * is ‘false’
     *
     * @maps FinanceCurrency
     */
    public function setFinanceCurrency(?FinanceCurrency $financeCurrency): void
    {
        $this->financeCurrency = $financeCurrency;
    }

    /**
     * Returns Tolls Customer Id.
     * Customer id in e-TM system
     *
     * This field will have value only when ReturnTollsCustomerId is set to true in the request else set to
     * null or empty.
     */
    public function getTollsCustomerId(): ?string
    {
        if (count($this->tollsCustomerId) == 0) {
            return null;
        }
        return $this->tollsCustomerId['value'];
    }

    /**
     * Sets Tolls Customer Id.
     * Customer id in e-TM system
     *
     * This field will have value only when ReturnTollsCustomerId is set to true in the request else set to
     * null or empty.
     *
     * @maps TollsCustomerId
     */
    public function setTollsCustomerId(?string $tollsCustomerId): void
    {
        $this->tollsCustomerId['value'] = $tollsCustomerId;
    }

    /**
     * Unsets Tolls Customer Id.
     * Customer id in e-TM system
     *
     * This field will have value only when ReturnTollsCustomerId is set to true in the request else set to
     * null or empty.
     */
    public function unsetTollsCustomerId(): void
    {
        $this->tollsCustomerId = [];
    }

    /**
     * Returns Tolls Colco Country Type Id.
     * String Colco country type id in e-TM system
     *
     * This field will have value only when ReturnTollsCustomerId is set to true in the request else set to
     * null or empty.
     */
    public function getTollsColcoCountryTypeId(): ?string
    {
        if (count($this->tollsColcoCountryTypeId) == 0) {
            return null;
        }
        return $this->tollsColcoCountryTypeId['value'];
    }

    /**
     * Sets Tolls Colco Country Type Id.
     * String Colco country type id in e-TM system
     *
     * This field will have value only when ReturnTollsCustomerId is set to true in the request else set to
     * null or empty.
     *
     * @maps TollsColcoCountryTypeId
     */
    public function setTollsColcoCountryTypeId(?string $tollsColcoCountryTypeId): void
    {
        $this->tollsColcoCountryTypeId['value'] = $tollsColcoCountryTypeId;
    }

    /**
     * Unsets Tolls Colco Country Type Id.
     * String Colco country type id in e-TM system
     *
     * This field will have value only when ReturnTollsCustomerId is set to true in the request else set to
     * null or empty.
     */
    public function unsetTollsColcoCountryTypeId(): void
    {
        $this->tollsColcoCountryTypeId = [];
    }

    /**
     * Returns Contracts.
     *
     * @return CustomerContract[]|null
     */
    public function getContracts(): ?array
    {
        return $this->contracts;
    }

    /**
     * Sets Contracts.
     *
     * @maps Contracts
     *
     * @param CustomerContract[]|null $contracts
     */
    public function setContracts(?array $contracts): void
    {
        $this->contracts = $contracts;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoId)) {
            $json['ColCoId']                                        = $this->colCoId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                                      = $this->colCoCode['value'];
        }
        if (!empty($this->countryCode)) {
            $json['CountryCode']                                    = $this->countryCode['value'];
        }
        if (!empty($this->country)) {
            $json['Country']                                        = $this->country['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                                        = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                                    = $this->payerNumber['value'];
        }
        if (!empty($this->payerFullName)) {
            $json['PayerFullName']                                  = $this->payerFullName['value'];
        }
        if (!empty($this->payerShortName)) {
            $json['PayerShortName']                                 = $this->payerShortName['value'];
        }
        if (!empty($this->payerGroupId)) {
            $json['PayerGroupId']                                   = $this->payerGroupId['value'];
        }
        if (!empty($this->amountDue)) {
            $json['AmountDue']                                      = $this->amountDue['value'];
        }
        if (!empty($this->amountOverdue)) {
            $json['AmountOverdue']                                  = $this->amountOverdue['value'];
        }
        if (!empty($this->amountNotOverdue)) {
            $json['AmountNotOverdue']                               = $this->amountNotOverdue['value'];
        }
        if (!empty($this->outstandingBalance)) {
            $json['OutstandingBalance']                             = $this->outstandingBalance['value'];
        }
        if (!empty($this->unallocatedPayment)) {
            $json['UnallocatedPayment']                             = $this->unallocatedPayment['value'];
        }
        if (!empty($this->sOACurrencyCode)) {
            $json['SOACurrencyCode']                                = $this->sOACurrencyCode['value'];
        }
        if (!empty($this->sOACurrencySymbol)) {
            $json['SOACurrencySymbol']                              = $this->sOACurrencySymbol['value'];
        }
        if (!empty($this->sOACreditLimitCurrencyCode)) {
            $json['SOACreditLimitCurrencyCode']                     = $this->sOACreditLimitCurrencyCode['value'];
        }
        if (!empty($this->sOACreditLimitCurrencySymbol)) {
            $json['SOACreditLimitCurrencySymbol']                   = $this->sOACreditLimitCurrencySymbol['value'];
        }
        if (!empty($this->lastPaymentCurrencyCode)) {
            $json['LastPaymentCurrencyCode']                        = $this->lastPaymentCurrencyCode['value'];
        }
        if (!empty($this->lastPaymentCurrencySymbol)) {
            $json['LastPaymentCurrencySymbol']                      = $this->lastPaymentCurrencySymbol['value'];
        }
        if (!empty($this->lastPaymentAmount)) {
            $json['LastPaymentAmount']                              = $this->lastPaymentAmount['value'];
        }
        if (!empty($this->lastPaymentDate)) {
            $json['LastPaymentDate']                                = $this->lastPaymentDate['value'];
        }
        if (!empty($this->sOALastPaymentAmount)) {
            $json['SOALastPaymentAmount']                           = $this->sOALastPaymentAmount['value'];
        }
        if (!empty($this->sOALastPaymentDate)) {
            $json['SOALastPaymentDate']                             = $this->sOALastPaymentDate['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']                                   = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']                                 = $this->currencySymbol['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode']                               = $this->colCoCountryCode['value'];
        }
        if (!empty($this->localCurrencyCode)) {
            $json['LocalCurrencyCode']                              = $this->localCurrencyCode['value'];
        }
        if (!empty($this->localCurrencySymbol)) {
            $json['LocalCurrencySymbol']                            = $this->localCurrencySymbol['value'];
        }
        if (!empty($this->localCurrencyExchangeRate)) {
            $json['LocalCurrencyExchangeRate']                      = $this->localCurrencyExchangeRate['value'];
        }
        if (!empty($this->localCurrencyExchangeRateSoA)) {
            $json['LocalCurrencyExchangeRate_SoA']                  = $this->localCurrencyExchangeRateSoA['value'];
        }
        if (!empty($this->billingFrequencyTypeId)) {
            $json['BillingFrequencyTypeId']                         = $this->billingFrequencyTypeId['value'];
        }
        if (!empty($this->billingFrequencyType)) {
            $json['BillingFrequencyType']                           = $this->billingFrequencyType['value'];
        }
        if (!empty($this->billingRunFrequencyTypeId)) {
            $json['BillingRunFrequencyTypeId']                      = $this->billingRunFrequencyTypeId['value'];
        }
        if (!empty($this->billingRunFrequnecy)) {
            $json['BillingRunFrequnecy']                            = $this->billingRunFrequnecy['value'];
        }
        if (!empty($this->day1Run)) {
            $json['Day1Run']                                        = $this->day1Run['value'];
        }
        if (!empty($this->day2Run)) {
            $json['Day2Run']                                        = $this->day2Run['value'];
        }
        if (!empty($this->day3Run)) {
            $json['Day3Run']                                        = $this->day3Run['value'];
        }
        if (!empty($this->day4Run)) {
            $json['Day4Run']                                        = $this->day4Run['value'];
        }
        if (isset($this->invoiceDistributionMethods)) {
            $json['InvoiceDistributionMethods']                     = $this->invoiceDistributionMethods;
        }
        if (!empty($this->outputType)) {
            $json['OutputType']                                     = $this->outputType['value'];
        }
        if (!empty($this->invoiceAccountID)) {
            $json['InvoiceAccountID']                               = $this->invoiceAccountID['value'];
        }
        if (!empty($this->invoiceAccountNumber)) {
            $json['InvoiceAccountNumber']                           = $this->invoiceAccountNumber['value'];
        }
        if (!empty($this->invoiceAccountShortName)) {
            $json['InvoiceAccountShortName']                        = $this->invoiceAccountShortName['value'];
        }
        if (isset($this->bestOfIndicator)) {
            $json['BestOfIndicator']                                = $this->bestOfIndicator;
        }
        if (isset($this->isInternational)) {
            $json['IsInternational']                                = $this->isInternational;
        }
        if (!empty($this->totalAccounts)) {
            $json['TotalAccounts']                                  = $this->totalAccounts['value'];
        }
        if (!empty($this->totalActiveAccounts)) {
            $json['TotalActiveAccounts']                            = $this->totalActiveAccounts['value'];
        }
        if (!empty($this->totalCards)) {
            $json['TotalCards']                                     = $this->totalCards['value'];
        }
        if (!empty($this->totalActiveCards)) {
            $json['TotalActiveCards']                               = $this->totalActiveCards['value'];
        }
        if (!empty($this->totalBlockedCards)) {
            $json['TotalBlockedCards']                              = $this->totalBlockedCards['value'];
        }
        if (!empty($this->totalCancelledCards)) {
            $json['TotalCancelledCards']                            = $this->totalCancelledCards['value'];
        }
        if (!empty($this->totalExpiredCards)) {
            $json['TotalExpiredCards']                              = $this->totalExpiredCards['value'];
        }
        if (!empty($this->totalRenewalPendingCards)) {
            $json['TotalRenewalPendingCards']                       = $this->totalRenewalPendingCards['value'];
        }
        if (!empty($this->totalReplacedCards)) {
            $json['TotalReplacedCards']                             = $this->totalReplacedCards['value'];
        }
        if (!empty($this->totalTemporaryBlockCardsByCustomer)) {
            $json['TotalTemporaryBlockCardsByCustomer']             =
                $this->totalTemporaryBlockCardsByCustomer['value'];
        }
        if (!empty($this->totalTemporaryBlockCardsByShell)) {
            $json['TotalTemporaryBlockCardsByShell']                = $this->totalTemporaryBlockCardsByShell['value'];
        }
        if (!empty($this->totalNewCards)) {
            $json['TotalNewCards']                                  = $this->totalNewCards['value'];
        }
        if (!empty($this->totalFraudCards)) {
            $json['TotalFraudCards']                                = $this->totalFraudCards['value'];
        }
        if (!empty($this->totalBlockedAccounts)) {
            $json['TotalBlockedAccounts']                           = $this->totalBlockedAccounts['value'];
        }
        if (!empty($this->totalCancelledAccounts)) {
            $json['TotalCancelledAccounts']                         = $this->totalCancelledAccounts['value'];
        }
        if (!empty($this->payerTradingName)) {
            $json['PayerTradingName']                               = $this->payerTradingName['value'];
        }
        if (isset($this->status)) {
            $json['Status']                                         = $this->status;
        }
        if (!empty($this->billingLanguage)) {
            $json['BillingLanguage']                                = $this->billingLanguage['value'];
        }
        if (!empty($this->legalEntity)) {
            $json['LegalEntity']                                    = $this->legalEntity['value'];
        }
        if (!empty($this->dateEstablished)) {
            $json['DateEstablished']                                = $this->dateEstablished['value'];
        }
        if (!empty($this->customerClassification)) {
            $json['CustomerClassification']                         = $this->customerClassification['value'];
        }
        if (!empty($this->industryClass)) {
            $json['IndustryClass']                                  = $this->industryClass['value'];
        }
        if (!empty($this->marketingSegmentation)) {
            $json['MarketingSegmentation']                          = $this->marketingSegmentation['value'];
        }
        if (!empty($this->lineOfBusiness)) {
            $json['LineOfBusiness']                                 = $this->lineOfBusiness['value'];
        }
        if (isset($this->printCreditLimit)) {
            $json['PrintCreditLimit']                               = $this->printCreditLimit;
        }
        if (!empty($this->cardGroupType)) {
            $json['CardGroupType']                                  = $this->cardGroupType['value'];
        }
        if (isset($this->renewCards)) {
            $json['RenewCards']                                     = $this->renewCards;
        }
        if (isset($this->allowSelectPIN)) {
            $json['AllowSelectPIN']                                 = $this->allowSelectPIN;
        }
        if (isset($this->useFleetPIN)) {
            $json['UseFleetPIN']                                    = $this->useFleetPIN;
        }
        if (!empty($this->vATRegNumber)) {
            $json['VATRegNumber']                                   = $this->vATRegNumber['value'];
        }
        if (isset($this->vATRegNumber2)) {
            $json['VATRegNumber2']                                  = $this->vATRegNumber2;
        }
        if (!empty($this->registrationNumber)) {
            $json['RegistrationNumber']                             = $this->registrationNumber['value'];
        }
        if (!empty($this->registrationNumber2)) {
            $json['RegistrationNumber2']                            = $this->registrationNumber2['value'];
        }
        if (!empty($this->salesLedgerBalance)) {
            $json['SalesLedgerBalance']                             = $this->salesLedgerBalance['value'];
        }
        if (!empty($this->exposure)) {
            $json['Exposure']                                       = $this->exposure['value'];
        }
        if (!empty($this->outstandingDebt)) {
            $json['OutstandingDebt']                                = $this->outstandingDebt['value'];
        }
        if (!empty($this->availableCredit)) {
            $json['AvailableCredit']                                = $this->availableCredit['value'];
        }
        if (!empty($this->band)) {
            $json['Band']                                           = $this->band['value'];
        }
        if (!empty($this->globalCustomerReferenceId)) {
            $json['GlobalCustomerReferenceId']                      = $this->globalCustomerReferenceId['value'];
        }
        if (!empty($this->creditLimit)) {
            $json['CreditLimit']                                    = $this->creditLimit['value'];
        }
        if (!empty($this->creditLimitInCustomerCurrency)) {
            $json['CreditLimitInCustomerCurrency']                  = $this->creditLimitInCustomerCurrency['value'];
        }
        if (!empty($this->billingCurrencyCode)) {
            $json['BillingCurrencyCode']                            = $this->billingCurrencyCode['value'];
        }
        if (!empty($this->billingCurrencySymbol)) {
            $json['BillingCurrencySymbol']                          = $this->billingCurrencySymbol['value'];
        }
        if (!empty($this->paymentMethod)) {
            $json['PaymentMethod']                                  = $this->paymentMethod['value'];
        }
        if (!empty($this->paymentTerms)) {
            $json['PaymentTerms']                                   = $this->paymentTerms['value'];
        }
        if (!empty($this->temporaryCreditLimitIncrease)) {
            $json['TemporaryCreditLimitIncrease']                   = $this->temporaryCreditLimitIncrease['value'];
        }
        if (!empty($this->temporaryCreditLimitIncreaseInCustomerCurrency)) {
            $json['TemporaryCreditLimitIncreaseInCustomerCurrency'] =
                $this->temporaryCreditLimitIncreaseInCustomerCurrency['value'];
        }
        if (!empty($this->temporaryCreditLimitExpiryDate)) {
            $json['TemporaryCreditLimitExpiryDate']                 = $this->temporaryCreditLimitExpiryDate['value'];
        }
        if (isset($this->payerBankAccount)) {
            $json['PayerBankAccount']                               = $this->payerBankAccount;
        }
        if (isset($this->cardDeliveryAddress)) {
            $json['CardDeliveryAddress']                            = $this->cardDeliveryAddress;
        }
        if (isset($this->correspondanceAddress)) {
            $json['CorrespondanceAddress']                          = $this->correspondanceAddress;
        }
        if (isset($this->billingAddress)) {
            $json['BillingAddress']                                 = $this->billingAddress;
        }
        if (isset($this->hasActiveVolBasedPricing)) {
            $json['HasActiveVolBasedPricing']                       = $this->hasActiveVolBasedPricing;
        }
        if (isset($this->hasActiveVolBasedBonus)) {
            $json['HasActiveVolBasedBonus']                         = $this->hasActiveVolBasedBonus;
        }
        if (isset($this->hasActiveVolBasedAssociationBonus)) {
            $json['HasActiveVolBasedAssociationBonus']              = $this->hasActiveVolBasedAssociationBonus;
        }
        if (isset($this->financeCurrency)) {
            $json['FinanceCurrency']                                = $this->financeCurrency;
        }
        if (!empty($this->tollsCustomerId)) {
            $json['TollsCustomerId']                                = $this->tollsCustomerId['value'];
        }
        if (!empty($this->tollsColcoCountryTypeId)) {
            $json['TollsColcoCountryTypeId']                        = $this->tollsColcoCountryTypeId['value'];
        }
        if (isset($this->contracts)) {
            $json['Contracts']                                      = $this->contracts;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class FinanceCurrency2 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $invoiceExchangeRate = [];

    /**
     * @var array
     */
    private $creditLimitExchangeRate = [];

    /**
     * Returns Currency Code.
     * Currency ISO Code used for the Finance Widget.
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * Currency ISO Code used for the Finance Widget.
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * Currency ISO Code used for the Finance Widget.
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Currency Symbol
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Currency Symbol
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Currency Symbol
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Invoice Exchange Rate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency. (If
     * finance currency is same as invoice currency, then the value of this field will be “1” so that the
     * value does not change)
     */
    public function getInvoiceExchangeRate(): ?float
    {
        if (count($this->invoiceExchangeRate) == 0) {
            return null;
        }
        return $this->invoiceExchangeRate['value'];
    }

    /**
     * Sets Invoice Exchange Rate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency. (If
     * finance currency is same as invoice currency, then the value of this field will be “1” so that the
     * value does not change)
     *
     * @maps Invoice_ExchangeRate
     */
    public function setInvoiceExchangeRate(?float $invoiceExchangeRate): void
    {
        $this->invoiceExchangeRate['value'] = $invoiceExchangeRate;
    }

    /**
     * Unsets Invoice Exchange Rate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency. (If
     * finance currency is same as invoice currency, then the value of this field will be “1” so that the
     * value does not change)
     */
    public function unsetInvoiceExchangeRate(): void
    {
        $this->invoiceExchangeRate = [];
    }

    /**
     * Returns Credit Limit Exchange Rate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget currency.
     * (If finance currency is same as credit limit currency, then the value of this field will be “1” so
     * that the value does not change)
     */
    public function getCreditLimitExchangeRate(): ?float
    {
        if (count($this->creditLimitExchangeRate) == 0) {
            return null;
        }
        return $this->creditLimitExchangeRate['value'];
    }

    /**
     * Sets Credit Limit Exchange Rate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget currency.
     * (If finance currency is same as credit limit currency, then the value of this field will be “1” so
     * that the value does not change)
     *
     * @maps CreditLimit_ExchangeRate
     */
    public function setCreditLimitExchangeRate(?float $creditLimitExchangeRate): void
    {
        $this->creditLimitExchangeRate['value'] = $creditLimitExchangeRate;
    }

    /**
     * Unsets Credit Limit Exchange Rate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget currency.
     * (If finance currency is same as credit limit currency, then the value of this field will be “1” so
     * that the value does not change)
     */
    public function unsetCreditLimitExchangeRate(): void
    {
        $this->creditLimitExchangeRate = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']             = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']           = $this->currencySymbol['value'];
        }
        if (!empty($this->invoiceExchangeRate)) {
            $json['Invoice_ExchangeRate']     = $this->invoiceExchangeRate['value'];
        }
        if (!empty($this->creditLimitExchangeRate)) {
            $json['CreditLimit_ExchangeRate'] = $this->creditLimitExchangeRate['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

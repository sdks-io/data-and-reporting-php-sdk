<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellDataReportingAPIsLib\Models\ErrorStatus;
use ShellDataReportingAPIsLib\Models\LoggedInUserResponse;

/**
 * Builder for model LoggedInUserResponse
 *
 * @see LoggedInUserResponse
 */
class LoggedInUserResponseBuilder
{
    /**
     * @var LoggedInUserResponse
     */
    private $instance;

    private function __construct(LoggedInUserResponse $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new logged in user response Builder object.
     */
    public static function init(): self
    {
        return new self(new LoggedInUserResponse());
    }

    /**
     * Sets user name field.
     */
    public function userName(?string $value): self
    {
        $this->instance->setUserName($value);
        return $this;
    }

    /**
     * Unsets user name field.
     */
    public function unsetUserName(): self
    {
        $this->instance->unsetUserName();
        return $this;
    }

    /**
     * Sets display name field.
     */
    public function displayName(?string $value): self
    {
        $this->instance->setDisplayName($value);
        return $this;
    }

    /**
     * Unsets display name field.
     */
    public function unsetDisplayName(): self
    {
        $this->instance->unsetDisplayName();
        return $this;
    }

    /**
     * Sets id mssoid field.
     */
    public function idMSSOID(?string $value): self
    {
        $this->instance->setIdMSSOID($value);
        return $this;
    }

    /**
     * Unsets id mssoid field.
     */
    public function unsetIdMSSOID(): self
    {
        $this->instance->unsetIdMSSOID();
        return $this;
    }

    /**
     * Sets preferred language field.
     */
    public function preferredLanguage(?string $value): self
    {
        $this->instance->setPreferredLanguage($value);
        return $this;
    }

    /**
     * Unsets preferred language field.
     */
    public function unsetPreferredLanguage(): self
    {
        $this->instance->unsetPreferredLanguage();
        return $this;
    }

    /**
     * Sets is super admin field.
     */
    public function isSuperAdmin(?bool $value): self
    {
        $this->instance->setIsSuperAdmin($value);
        return $this;
    }

    /**
     * Sets date format field.
     */
    public function dateFormat(?string $value): self
    {
        $this->instance->setDateFormat($value);
        return $this;
    }

    /**
     * Unsets date format field.
     */
    public function unsetDateFormat(): self
    {
        $this->instance->unsetDateFormat();
        return $this;
    }

    /**
     * Sets time format field.
     */
    public function timeFormat(?string $value): self
    {
        $this->instance->setTimeFormat($value);
        return $this;
    }

    /**
     * Unsets time format field.
     */
    public function unsetTimeFormat(): self
    {
        $this->instance->unsetTimeFormat();
        return $this;
    }

    /**
     * Sets week begins field.
     */
    public function weekBegins(?int $value): self
    {
        $this->instance->setWeekBegins($value);
        return $this;
    }

    /**
     * Unsets week begins field.
     */
    public function unsetWeekBegins(): self
    {
        $this->instance->unsetWeekBegins();
        return $this;
    }

    /**
     * Sets display week field.
     */
    public function displayWeek(?bool $value): self
    {
        $this->instance->setDisplayWeek($value);
        return $this;
    }

    /**
     * Sets csvseparator field.
     */
    public function cSVSeparator(?string $value): self
    {
        $this->instance->setCSVSeparator($value);
        return $this;
    }

    /**
     * Unsets csvseparator field.
     */
    public function unsetCSVSeparator(): self
    {
        $this->instance->unsetCSVSeparator();
        return $this;
    }

    /**
     * Sets decimal separator field.
     */
    public function decimalSeparator(?string $value): self
    {
        $this->instance->setDecimalSeparator($value);
        return $this;
    }

    /**
     * Unsets decimal separator field.
     */
    public function unsetDecimalSeparator(): self
    {
        $this->instance->unsetDecimalSeparator();
        return $this;
    }

    /**
     * Sets report format field.
     */
    public function reportFormat(?string $value): self
    {
        $this->instance->setReportFormat($value);
        return $this;
    }

    /**
     * Unsets report format field.
     */
    public function unsetReportFormat(): self
    {
        $this->instance->unsetReportFormat();
        return $this;
    }

    /**
     * Sets has apiaccess field.
     */
    public function hasAPIAccess(?bool $value): self
    {
        $this->instance->setHasAPIAccess($value);
        return $this;
    }

    /**
     * Sets roles field.
     */
    public function roles(?array $value): self
    {
        $this->instance->setRoles($value);
        return $this;
    }

    /**
     * Sets payers field.
     */
    public function payers(?array $value): self
    {
        $this->instance->setPayers($value);
        return $this;
    }

    /**
     * Sets accounts field.
     */
    public function accounts(?array $value): self
    {
        $this->instance->setAccounts($value);
        return $this;
    }

    /**
     * Sets collecting companies field.
     */
    public function collectingCompanies(?array $value): self
    {
        $this->instance->setCollectingCompanies($value);
        return $this;
    }

    /**
     * Sets eidaccess details field.
     */
    public function eIDAccessDetails(?array $value): self
    {
        $this->instance->setEIDAccessDetails($value);
        return $this;
    }

    /**
     * Sets user classification by system field.
     */
    public function userClassificationBySystem(?string $value): self
    {
        $this->instance->setUserClassificationBySystem($value);
        return $this;
    }

    /**
     * Unsets user classification by system field.
     */
    public function unsetUserClassificationBySystem(): self
    {
        $this->instance->unsetUserClassificationBySystem();
        return $this;
    }

    /**
     * Sets user classification by shell field.
     */
    public function userClassificationByShell(?string $value): self
    {
        $this->instance->setUserClassificationByShell($value);
        return $this;
    }

    /**
     * Unsets user classification by shell field.
     */
    public function unsetUserClassificationByShell(): self
    {
        $this->instance->unsetUserClassificationByShell();
        return $this;
    }

    /**
     * Sets payer count field.
     */
    public function payerCount(?int $value): self
    {
        $this->instance->setPayerCount($value);
        return $this;
    }

    /**
     * Unsets payer count field.
     */
    public function unsetPayerCount(): self
    {
        $this->instance->unsetPayerCount();
        return $this;
    }

    /**
     * Sets account count field.
     */
    public function accountCount(?int $value): self
    {
        $this->instance->setAccountCount($value);
        return $this;
    }

    /**
     * Unsets account count field.
     */
    public function unsetAccountCount(): self
    {
        $this->instance->unsetAccountCount();
        return $this;
    }

    /**
     * Sets card count field.
     */
    public function cardCount(?int $value): self
    {
        $this->instance->setCardCount($value);
        return $this;
    }

    /**
     * Unsets card count field.
     */
    public function unsetCardCount(): self
    {
        $this->instance->unsetCardCount();
        return $this;
    }

    /**
     * Sets error field.
     */
    public function error(?ErrorStatus $value): self
    {
        $this->instance->setError($value);
        return $this;
    }

    /**
     * Sets request id field.
     */
    public function requestId(?string $value): self
    {
        $this->instance->setRequestId($value);
        return $this;
    }

    /**
     * Initializes a new logged in user response object.
     */
    public function build(): LoggedInUserResponse
    {
        return CoreHelper::clone($this->instance);
    }
}

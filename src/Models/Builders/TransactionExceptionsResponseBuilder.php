<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellDataReportingAPIsLib\Models\ErrorStatus;
use ShellDataReportingAPIsLib\Models\TransactionExceptionsResponse;

/**
 * Builder for model TransactionExceptionsResponse
 *
 * @see TransactionExceptionsResponse
 */
class TransactionExceptionsResponseBuilder
{
    /**
     * @var TransactionExceptionsResponse
     */
    private $instance;

    private function __construct(TransactionExceptionsResponse $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new transaction exceptions response Builder object.
     */
    public static function init(): self
    {
        return new self(new TransactionExceptionsResponse());
    }

    /**
     * Sets card exceptions field.
     */
    public function cardExceptions(?array $value): self
    {
        $this->instance->setCardExceptions($value);
        return $this;
    }

    /**
     * Sets transaction exceptions field.
     */
    public function transactionExceptions(?array $value): self
    {
        $this->instance->setTransactionExceptions($value);
        return $this;
    }

    /**
     * Unsets transaction exceptions field.
     */
    public function unsetTransactionExceptions(): self
    {
        $this->instance->unsetTransactionExceptions();
        return $this;
    }

    /**
     * Sets error field.
     */
    public function error(?ErrorStatus $value): self
    {
        $this->instance->setError($value);
        return $this;
    }

    /**
     * Sets request id field.
     */
    public function requestId(?string $value): self
    {
        $this->instance->setRequestId($value);
        return $this;
    }

    /**
     * Initializes a new transaction exceptions response object.
     */
    public function build(): TransactionExceptionsResponse
    {
        return CoreHelper::clone($this->instance);
    }
}

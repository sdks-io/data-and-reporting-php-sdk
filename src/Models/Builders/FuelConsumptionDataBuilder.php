<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellDataReportingAPIsLib\Models\FuelConsumptionData;

/**
 * Builder for model FuelConsumptionData
 *
 * @see FuelConsumptionData
 */
class FuelConsumptionDataBuilder
{
    /**
     * @var FuelConsumptionData
     */
    private $instance;

    private function __construct(FuelConsumptionData $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new fuel consumption data Builder object.
     */
    public static function init(): self
    {
        return new self(new FuelConsumptionData());
    }

    /**
     * Sets account name field.
     */
    public function accountName(?string $value): self
    {
        $this->instance->setAccountName($value);
        return $this;
    }

    /**
     * Unsets account name field.
     */
    public function unsetAccountName(): self
    {
        $this->instance->unsetAccountName();
        return $this;
    }

    /**
     * Sets account number field.
     */
    public function accountNumber(?string $value): self
    {
        $this->instance->setAccountNumber($value);
        return $this;
    }

    /**
     * Unsets account number field.
     */
    public function unsetAccountNumber(): self
    {
        $this->instance->unsetAccountNumber();
        return $this;
    }

    /**
     * Sets payer name field.
     */
    public function payerName(?string $value): self
    {
        $this->instance->setPayerName($value);
        return $this;
    }

    /**
     * Unsets payer name field.
     */
    public function unsetPayerName(): self
    {
        $this->instance->unsetPayerName();
        return $this;
    }

    /**
     * Sets payer number field.
     */
    public function payerNumber(?string $value): self
    {
        $this->instance->setPayerNumber($value);
        return $this;
    }

    /**
     * Unsets payer number field.
     */
    public function unsetPayerNumber(): self
    {
        $this->instance->unsetPayerNumber();
        return $this;
    }

    /**
     * Sets card number field.
     */
    public function cardNumber(?string $value): self
    {
        $this->instance->setCardNumber($value);
        return $this;
    }

    /**
     * Unsets card number field.
     */
    public function unsetCardNumber(): self
    {
        $this->instance->unsetCardNumber();
        return $this;
    }

    /**
     * Sets card group id field.
     */
    public function cardGroupId(?int $value): self
    {
        $this->instance->setCardGroupId($value);
        return $this;
    }

    /**
     * Unsets card group id field.
     */
    public function unsetCardGroupId(): self
    {
        $this->instance->unsetCardGroupId();
        return $this;
    }

    /**
     * Sets card group name field.
     */
    public function cardGroupName(?string $value): self
    {
        $this->instance->setCardGroupName($value);
        return $this;
    }

    /**
     * Unsets card group name field.
     */
    public function unsetCardGroupName(): self
    {
        $this->instance->unsetCardGroupName();
        return $this;
    }

    /**
     * Sets driver name field.
     */
    public function driverName(?string $value): self
    {
        $this->instance->setDriverName($value);
        return $this;
    }

    /**
     * Unsets driver name field.
     */
    public function unsetDriverName(): self
    {
        $this->instance->unsetDriverName();
        return $this;
    }

    /**
     * Sets license number field.
     */
    public function licenseNumber(?string $value): self
    {
        $this->instance->setLicenseNumber($value);
        return $this;
    }

    /**
     * Unsets license number field.
     */
    public function unsetLicenseNumber(): self
    {
        $this->instance->unsetLicenseNumber();
        return $this;
    }

    /**
     * Sets initial odometer field.
     */
    public function initialOdometer(?float $value): self
    {
        $this->instance->setInitialOdometer($value);
        return $this;
    }

    /**
     * Unsets initial odometer field.
     */
    public function unsetInitialOdometer(): self
    {
        $this->instance->unsetInitialOdometer();
        return $this;
    }

    /**
     * Sets last odometer field.
     */
    public function lastOdometer(?float $value): self
    {
        $this->instance->setLastOdometer($value);
        return $this;
    }

    /**
     * Unsets last odometer field.
     */
    public function unsetLastOdometer(): self
    {
        $this->instance->unsetLastOdometer();
        return $this;
    }

    /**
     * Sets distance field.
     */
    public function distance(?float $value): self
    {
        $this->instance->setDistance($value);
        return $this;
    }

    /**
     * Unsets distance field.
     */
    public function unsetDistance(): self
    {
        $this->instance->unsetDistance();
        return $this;
    }

    /**
     * Sets fuel consumption field.
     */
    public function fuelConsumption(?float $value): self
    {
        $this->instance->setFuelConsumption($value);
        return $this;
    }

    /**
     * Unsets fuel consumption field.
     */
    public function unsetFuelConsumption(): self
    {
        $this->instance->unsetFuelConsumption();
        return $this;
    }

    /**
     * Sets fuel net amount field.
     */
    public function fuelNetAmount(?float $value): self
    {
        $this->instance->setFuelNetAmount($value);
        return $this;
    }

    /**
     * Unsets fuel net amount field.
     */
    public function unsetFuelNetAmount(): self
    {
        $this->instance->unsetFuelNetAmount();
        return $this;
    }

    /**
     * Sets discount field.
     */
    public function discount(?float $value): self
    {
        $this->instance->setDiscount($value);
        return $this;
    }

    /**
     * Unsets discount field.
     */
    public function unsetDiscount(): self
    {
        $this->instance->unsetDiscount();
        return $this;
    }

    /**
     * Sets fuel tax field.
     */
    public function fuelTax(?float $value): self
    {
        $this->instance->setFuelTax($value);
        return $this;
    }

    /**
     * Unsets fuel tax field.
     */
    public function unsetFuelTax(): self
    {
        $this->instance->unsetFuelTax();
        return $this;
    }

    /**
     * Sets fuel volume field.
     */
    public function fuelVolume(?float $value): self
    {
        $this->instance->setFuelVolume($value);
        return $this;
    }

    /**
     * Unsets fuel volume field.
     */
    public function unsetFuelVolume(): self
    {
        $this->instance->unsetFuelVolume();
        return $this;
    }

    /**
     * Sets gross non fuel expenses field.
     */
    public function grossNonFuelExpenses(?float $value): self
    {
        $this->instance->setGrossNonFuelExpenses($value);
        return $this;
    }

    /**
     * Unsets gross non fuel expenses field.
     */
    public function unsetGrossNonFuelExpenses(): self
    {
        $this->instance->unsetGrossNonFuelExpenses();
        return $this;
    }

    /**
     * Sets co2 produced field.
     */
    public function cO2Produced(?float $value): self
    {
        $this->instance->setCO2Produced($value);
        return $this;
    }

    /**
     * Unsets co2 produced field.
     */
    public function unsetCO2Produced(): self
    {
        $this->instance->unsetCO2Produced();
        return $this;
    }

    /**
     * Sets transaction count field.
     */
    public function transactionCount(?float $value): self
    {
        $this->instance->setTransactionCount($value);
        return $this;
    }

    /**
     * Unsets transaction count field.
     */
    public function unsetTransactionCount(): self
    {
        $this->instance->unsetTransactionCount();
        return $this;
    }

    /**
     * Initializes a new fuel consumption data object.
     */
    public function build(): FuelConsumptionData
    {
        return CoreHelper::clone($this->instance);
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellDataReportingAPIsLib\Models\CardDayTimeRestrictions;
use ShellDataReportingAPIsLib\Models\CardTypeResponseCustomerCardTypesItems;
use ShellDataReportingAPIsLib\Models\CardUsageRestrictions;

/**
 * Builder for model CardTypeResponseCustomerCardTypesItems
 *
 * @see CardTypeResponseCustomerCardTypesItems
 */
class CardTypeResponseCustomerCardTypesItemsBuilder
{
    /**
     * @var CardTypeResponseCustomerCardTypesItems
     */
    private $instance;

    private function __construct(CardTypeResponseCustomerCardTypesItems $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new card type response customer card types items Builder object.
     */
    public static function init(): self
    {
        return new self(new CardTypeResponseCustomerCardTypesItems());
    }

    /**
     * Sets can have pin field.
     */
    public function canHavePIN(?bool $value): self
    {
        $this->instance->setCanHavePIN($value);
        return $this;
    }

    /**
     * Sets card type id field.
     */
    public function cardTypeId(?int $value): self
    {
        $this->instance->setCardTypeId($value);
        return $this;
    }

    /**
     * Unsets card type id field.
     */
    public function unsetCardTypeId(): self
    {
        $this->instance->unsetCardTypeId();
        return $this;
    }

    /**
     * Sets card type name field.
     */
    public function cardTypeName(?string $value): self
    {
        $this->instance->setCardTypeName($value);
        return $this;
    }

    /**
     * Unsets card type name field.
     */
    public function unsetCardTypeName(): self
    {
        $this->instance->unsetCardTypeName();
        return $this;
    }

    /**
     * Sets col co currency code field.
     */
    public function colCoCurrencyCode(?string $value): self
    {
        $this->instance->setColCoCurrencyCode($value);
        return $this;
    }

    /**
     * Unsets col co currency code field.
     */
    public function unsetColCoCurrencyCode(): self
    {
        $this->instance->unsetColCoCurrencyCode();
        return $this;
    }

    /**
     * Sets customer card type id field.
     */
    public function customerCardTypeId(?int $value): self
    {
        $this->instance->setCustomerCardTypeId($value);
        return $this;
    }

    /**
     * Unsets customer card type id field.
     */
    public function unsetCustomerCardTypeId(): self
    {
        $this->instance->unsetCustomerCardTypeId();
        return $this;
    }

    /**
     * Sets day time restrictions field.
     */
    public function dayTimeRestrictions(?CardDayTimeRestrictions $value): self
    {
        $this->instance->setDayTimeRestrictions($value);
        return $this;
    }

    /**
     * Sets default purchase category id field.
     */
    public function defaultPurchaseCategoryId(?int $value): self
    {
        $this->instance->setDefaultPurchaseCategoryId($value);
        return $this;
    }

    /**
     * Unsets default purchase category id field.
     */
    public function unsetDefaultPurchaseCategoryId(): self
    {
        $this->instance->unsetDefaultPurchaseCategoryId();
        return $this;
    }

    /**
     * Sets emboss account name field.
     */
    public function embossAccountName(?string $value): self
    {
        $this->instance->setEmbossAccountName($value);
        return $this;
    }

    /**
     * Unsets emboss account name field.
     */
    public function unsetEmbossAccountName(): self
    {
        $this->instance->unsetEmbossAccountName();
        return $this;
    }

    /**
     * Sets expiry period field.
     */
    public function expiryPeriod(?int $value): self
    {
        $this->instance->setExpiryPeriod($value);
        return $this;
    }

    /**
     * Unsets expiry period field.
     */
    public function unsetExpiryPeriod(): self
    {
        $this->instance->unsetExpiryPeriod();
        return $this;
    }

    /**
     * Sets is crt field.
     */
    public function isCRT(?bool $value): self
    {
        $this->instance->setIsCRT($value);
        return $this;
    }

    /**
     * Sets is fleet field.
     */
    public function isFleet(?bool $value): self
    {
        $this->instance->setIsFleet($value);
        return $this;
    }

    /**
     * Sets is international field.
     */
    public function isInternational(?bool $value): self
    {
        $this->instance->setIsInternational($value);
        return $this;
    }

    /**
     * Sets is national field.
     */
    public function isNational(?bool $value): self
    {
        $this->instance->setIsNational($value);
        return $this;
    }

    /**
     * Sets is partner sites included field.
     */
    public function isPartnerSitesIncluded(?bool $value): self
    {
        $this->instance->setIsPartnerSitesIncluded($value);
        return $this;
    }

    /**
     * Sets is shell sites only field.
     */
    public function isShellSitesOnly(?bool $value): self
    {
        $this->instance->setIsShellSitesOnly($value);
        return $this;
    }

    /**
     * Sets is virtual field.
     */
    public function isVirtual(?bool $value): self
    {
        $this->instance->setIsVirtual($value);
        return $this;
    }

    /**
     * Sets is visible to customers field.
     */
    public function isVisibleToCustomers(?bool $value): self
    {
        $this->instance->setIsVisibleToCustomers($value);
        return $this;
    }

    /**
     * Sets is active field.
     */
    public function isActive(?bool $value): self
    {
        $this->instance->setIsActive($value);
        return $this;
    }

    /**
     * Sets is card available for download field.
     */
    public function isCardAvailableForDownload(?bool $value): self
    {
        $this->instance->setIsCardAvailableForDownload($value);
        return $this;
    }

    /**
     * Sets is card visible to customers field.
     */
    public function isCardVisibleToCustomers(?bool $value): self
    {
        $this->instance->setIsCardVisibleToCustomers($value);
        return $this;
    }

    /**
     * Sets panlength field.
     */
    public function pANLength(?int $value): self
    {
        $this->instance->setPANLength($value);
        return $this;
    }

    /**
     * Unsets panlength field.
     */
    public function unsetPANLength(): self
    {
        $this->instance->unsetPANLength();
        return $this;
    }

    /**
     * Sets purchase categories field.
     */
    public function purchaseCategories(?array $value): self
    {
        $this->instance->setPurchaseCategories($value);
        return $this;
    }

    /**
     * Unsets purchase categories field.
     */
    public function unsetPurchaseCategories(): self
    {
        $this->instance->unsetPurchaseCategories();
        return $this;
    }

    /**
     * Sets token type id field.
     */
    public function tokenTypeId(?int $value): self
    {
        $this->instance->setTokenTypeId($value);
        return $this;
    }

    /**
     * Unsets token type id field.
     */
    public function unsetTokenTypeId(): self
    {
        $this->instance->unsetTokenTypeId();
        return $this;
    }

    /**
     * Sets token type name field.
     */
    public function tokenTypeName(?string $value): self
    {
        $this->instance->setTokenTypeName($value);
        return $this;
    }

    /**
     * Unsets token type name field.
     */
    public function unsetTokenTypeName(): self
    {
        $this->instance->unsetTokenTypeName();
        return $this;
    }

    /**
     * Sets usage restrictions field.
     */
    public function usageRestrictions(?CardUsageRestrictions $value): self
    {
        $this->instance->setUsageRestrictions($value);
        return $this;
    }

    /**
     * Sets emvcontactless field.
     */
    public function eMVContactless(?bool $value): self
    {
        $this->instance->setEMVContactless($value);
        return $this;
    }

    /**
     * Sets rfid field.
     */
    public function rFID(?bool $value): self
    {
        $this->instance->setRFID($value);
        return $this;
    }

    /**
     * Sets pinchange supported field.
     */
    public function pINChangeSupported(?bool $value): self
    {
        $this->instance->setPINChangeSupported($value);
        return $this;
    }

    /**
     * Sets require pin field.
     */
    public function requirePIN(?bool $value): self
    {
        $this->instance->setRequirePIN($value);
        return $this;
    }

    /**
     * Sets offline pin field.
     */
    public function offlinePIN(?bool $value): self
    {
        $this->instance->setOfflinePIN($value);
        return $this;
    }

    /**
     * Sets is default field.
     */
    public function isDefault(?bool $value): self
    {
        $this->instance->setIsDefault($value);
        return $this;
    }

    /**
     * Sets applications to show npiitokens field.
     */
    public function applicationsToShowNPIITokens(?bool $value): self
    {
        $this->instance->setApplicationsToShowNPIITokens($value);
        return $this;
    }

    /**
     * Sets medium type id field.
     */
    public function mediumTypeID(?int $value): self
    {
        $this->instance->setMediumTypeID($value);
        return $this;
    }

    /**
     * Unsets medium type id field.
     */
    public function unsetMediumTypeID(): self
    {
        $this->instance->unsetMediumTypeID();
        return $this;
    }

    /**
     * Sets medium type field.
     */
    public function mediumType(?string $value): self
    {
        $this->instance->setMediumType($value);
        return $this;
    }

    /**
     * Unsets medium type field.
     */
    public function unsetMediumType(): self
    {
        $this->instance->unsetMediumType();
        return $this;
    }

    /**
     * Sets col co currency symbol field.
     */
    public function colCoCurrencySymbol(?string $value): self
    {
        $this->instance->setColCoCurrencySymbol($value);
        return $this;
    }

    /**
     * Unsets col co currency symbol field.
     */
    public function unsetColCoCurrencySymbol(): self
    {
        $this->instance->unsetColCoCurrencySymbol();
        return $this;
    }

    /**
     * Initializes a new card type response customer card types items object.
     */
    public function build(): CardTypeResponseCustomerCardTypesItems
    {
        return CoreHelper::clone($this->instance);
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models\Builders;

use Core\Utils\CoreHelper;
use ShellDataReportingAPIsLib\Models\PastStatementOfAccounts;

/**
 * Builder for model PastStatementOfAccounts
 *
 * @see PastStatementOfAccounts
 */
class PastStatementOfAccountsBuilder
{
    /**
     * @var PastStatementOfAccounts
     */
    private $instance;

    private function __construct(PastStatementOfAccounts $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new past statement of accounts Builder object.
     */
    public static function init(): self
    {
        return new self(new PastStatementOfAccounts());
    }

    /**
     * Sets amount due field.
     */
    public function amountDue(?float $value): self
    {
        $this->instance->setAmountDue($value);
        return $this;
    }

    /**
     * Unsets amount due field.
     */
    public function unsetAmountDue(): self
    {
        $this->instance->unsetAmountDue();
        return $this;
    }

    /**
     * Sets amount not overdue field.
     */
    public function amountNotOverdue(?float $value): self
    {
        $this->instance->setAmountNotOverdue($value);
        return $this;
    }

    /**
     * Unsets amount not overdue field.
     */
    public function unsetAmountNotOverdue(): self
    {
        $this->instance->unsetAmountNotOverdue();
        return $this;
    }

    /**
     * Sets amount overdue field.
     */
    public function amountOverdue(?float $value): self
    {
        $this->instance->setAmountOverdue($value);
        return $this;
    }

    /**
     * Unsets amount overdue field.
     */
    public function unsetAmountOverdue(): self
    {
        $this->instance->unsetAmountOverdue();
        return $this;
    }

    /**
     * Sets amount overdue from unallocated field.
     */
    public function amountOverdueFromUnallocated(?float $value): self
    {
        $this->instance->setAmountOverdueFromUnallocated($value);
        return $this;
    }

    /**
     * Unsets amount overdue from unallocated field.
     */
    public function unsetAmountOverdueFromUnallocated(): self
    {
        $this->instance->unsetAmountOverdueFromUnallocated();
        return $this;
    }

    /**
     * Sets amount paid field.
     */
    public function amountPaid(?float $value): self
    {
        $this->instance->setAmountPaid($value);
        return $this;
    }

    /**
     * Unsets amount paid field.
     */
    public function unsetAmountPaid(): self
    {
        $this->instance->unsetAmountPaid();
        return $this;
    }

    /**
     * Sets balance on this statement field.
     */
    public function balanceOnThisStatement(?float $value): self
    {
        $this->instance->setBalanceOnThisStatement($value);
        return $this;
    }

    /**
     * Unsets balance on this statement field.
     */
    public function unsetBalanceOnThisStatement(): self
    {
        $this->instance->unsetBalanceOnThisStatement();
        return $this;
    }

    /**
     * Sets billing currency code field.
     */
    public function billingCurrencyCode(?string $value): self
    {
        $this->instance->setBillingCurrencyCode($value);
        return $this;
    }

    /**
     * Unsets billing currency code field.
     */
    public function unsetBillingCurrencyCode(): self
    {
        $this->instance->unsetBillingCurrencyCode();
        return $this;
    }

    /**
     * Sets billing currency symbol field.
     */
    public function billingCurrencySymbol(?string $value): self
    {
        $this->instance->setBillingCurrencySymbol($value);
        return $this;
    }

    /**
     * Unsets billing currency symbol field.
     */
    public function unsetBillingCurrencySymbol(): self
    {
        $this->instance->unsetBillingCurrencySymbol();
        return $this;
    }

    /**
     * Sets credit limit field.
     */
    public function creditLimit(?float $value): self
    {
        $this->instance->setCreditLimit($value);
        return $this;
    }

    /**
     * Unsets credit limit field.
     */
    public function unsetCreditLimit(): self
    {
        $this->instance->unsetCreditLimit();
        return $this;
    }

    /**
     * Sets credit limit currency code field.
     */
    public function creditLimitCurrencyCode(?string $value): self
    {
        $this->instance->setCreditLimitCurrencyCode($value);
        return $this;
    }

    /**
     * Unsets credit limit currency code field.
     */
    public function unsetCreditLimitCurrencyCode(): self
    {
        $this->instance->unsetCreditLimitCurrencyCode();
        return $this;
    }

    /**
     * Sets credit limit currency symbol field.
     */
    public function creditLimitCurrencySymbol(?string $value): self
    {
        $this->instance->setCreditLimitCurrencySymbol($value);
        return $this;
    }

    /**
     * Unsets credit limit currency symbol field.
     */
    public function unsetCreditLimitCurrencySymbol(): self
    {
        $this->instance->unsetCreditLimitCurrencySymbol();
        return $this;
    }

    /**
     * Sets credit limit in customer currency field.
     */
    public function creditLimitInCustomerCurrency(?float $value): self
    {
        $this->instance->setCreditLimitInCustomerCurrency($value);
        return $this;
    }

    /**
     * Unsets credit limit in customer currency field.
     */
    public function unsetCreditLimitInCustomerCurrency(): self
    {
        $this->instance->unsetCreditLimitInCustomerCurrency();
        return $this;
    }

    /**
     * Sets currency code field.
     */
    public function currencyCode(?string $value): self
    {
        $this->instance->setCurrencyCode($value);
        return $this;
    }

    /**
     * Unsets currency code field.
     */
    public function unsetCurrencyCode(): self
    {
        $this->instance->unsetCurrencyCode();
        return $this;
    }

    /**
     * Sets currency symbol field.
     */
    public function currencySymbol(?string $value): self
    {
        $this->instance->setCurrencySymbol($value);
        return $this;
    }

    /**
     * Unsets currency symbol field.
     */
    public function unsetCurrencySymbol(): self
    {
        $this->instance->unsetCurrencySymbol();
        return $this;
    }

    /**
     * Sets fully paid field.
     */
    public function fullyPaid(?bool $value): self
    {
        $this->instance->setFullyPaid($value);
        return $this;
    }

    /**
     * Unsets fully paid field.
     */
    public function unsetFullyPaid(): self
    {
        $this->instance->unsetFullyPaid();
        return $this;
    }

    /**
     * Sets last payment currency code field.
     */
    public function lastPaymentCurrencyCode(?string $value): self
    {
        $this->instance->setLastPaymentCurrencyCode($value);
        return $this;
    }

    /**
     * Unsets last payment currency code field.
     */
    public function unsetLastPaymentCurrencyCode(): self
    {
        $this->instance->unsetLastPaymentCurrencyCode();
        return $this;
    }

    /**
     * Sets last payment currency symbol field.
     */
    public function lastPaymentCurrencySymbol(?string $value): self
    {
        $this->instance->setLastPaymentCurrencySymbol($value);
        return $this;
    }

    /**
     * Unsets last payment currency symbol field.
     */
    public function unsetLastPaymentCurrencySymbol(): self
    {
        $this->instance->unsetLastPaymentCurrencySymbol();
        return $this;
    }

    /**
     * Sets last payment date field.
     */
    public function lastPaymentDate(?string $value): self
    {
        $this->instance->setLastPaymentDate($value);
        return $this;
    }

    /**
     * Unsets last payment date field.
     */
    public function unsetLastPaymentDate(): self
    {
        $this->instance->unsetLastPaymentDate();
        return $this;
    }

    /**
     * Sets last payment value field.
     */
    public function lastPaymentValue(?float $value): self
    {
        $this->instance->setLastPaymentValue($value);
        return $this;
    }

    /**
     * Unsets last payment value field.
     */
    public function unsetLastPaymentValue(): self
    {
        $this->instance->unsetLastPaymentValue();
        return $this;
    }

    /**
     * Sets outstanding balance field.
     */
    public function outstandingBalance(?float $value): self
    {
        $this->instance->setOutstandingBalance($value);
        return $this;
    }

    /**
     * Unsets outstanding balance field.
     */
    public function unsetOutstandingBalance(): self
    {
        $this->instance->unsetOutstandingBalance();
        return $this;
    }

    /**
     * Sets payer id field.
     */
    public function payerId(?int $value): self
    {
        $this->instance->setPayerId($value);
        return $this;
    }

    /**
     * Unsets payer id field.
     */
    public function unsetPayerId(): self
    {
        $this->instance->unsetPayerId();
        return $this;
    }

    /**
     * Sets payer number field.
     */
    public function payerNumber(?string $value): self
    {
        $this->instance->setPayerNumber($value);
        return $this;
    }

    /**
     * Unsets payer number field.
     */
    public function unsetPayerNumber(): self
    {
        $this->instance->unsetPayerNumber();
        return $this;
    }

    /**
     * Sets payment due date field.
     */
    public function paymentDueDate(?string $value): self
    {
        $this->instance->setPaymentDueDate($value);
        return $this;
    }

    /**
     * Unsets payment due date field.
     */
    public function unsetPaymentDueDate(): self
    {
        $this->instance->unsetPaymentDueDate();
        return $this;
    }

    /**
     * Sets so areference number field.
     */
    public function soAReferenceNumber(?string $value): self
    {
        $this->instance->setSoAReferenceNumber($value);
        return $this;
    }

    /**
     * Unsets so areference number field.
     */
    public function unsetSoAReferenceNumber(): self
    {
        $this->instance->unsetSoAReferenceNumber();
        return $this;
    }

    /**
     * Sets statement date field.
     */
    public function statementDate(?string $value): self
    {
        $this->instance->setStatementDate($value);
        return $this;
    }

    /**
     * Unsets statement date field.
     */
    public function unsetStatementDate(): self
    {
        $this->instance->unsetStatementDate();
        return $this;
    }

    /**
     * Sets statement of account id field.
     */
    public function statementOfAccountId(?int $value): self
    {
        $this->instance->setStatementOfAccountId($value);
        return $this;
    }

    /**
     * Unsets statement of account id field.
     */
    public function unsetStatementOfAccountId(): self
    {
        $this->instance->unsetStatementOfAccountId();
        return $this;
    }

    /**
     * Sets total billing documents field.
     */
    public function totalBillingDocuments(?int $value): self
    {
        $this->instance->setTotalBillingDocuments($value);
        return $this;
    }

    /**
     * Unsets total billing documents field.
     */
    public function unsetTotalBillingDocuments(): self
    {
        $this->instance->unsetTotalBillingDocuments();
        return $this;
    }

    /**
     * Sets total net amount billing currency field.
     */
    public function totalNetAmountBillingCurrency(?float $value): self
    {
        $this->instance->setTotalNetAmountBillingCurrency($value);
        return $this;
    }

    /**
     * Unsets total net amount billing currency field.
     */
    public function unsetTotalNetAmountBillingCurrency(): self
    {
        $this->instance->unsetTotalNetAmountBillingCurrency();
        return $this;
    }

    /**
     * Sets total summary billing documents field.
     */
    public function totalSummaryBillingDocuments(?float $value): self
    {
        $this->instance->setTotalSummaryBillingDocuments($value);
        return $this;
    }

    /**
     * Unsets total summary billing documents field.
     */
    public function unsetTotalSummaryBillingDocuments(): self
    {
        $this->instance->unsetTotalSummaryBillingDocuments();
        return $this;
    }

    /**
     * Sets total vatamount billing currency field.
     */
    public function totalVATAmountBillingCurrency(?float $value): self
    {
        $this->instance->setTotalVATAmountBillingCurrency($value);
        return $this;
    }

    /**
     * Unsets total vatamount billing currency field.
     */
    public function unsetTotalVATAmountBillingCurrency(): self
    {
        $this->instance->unsetTotalVATAmountBillingCurrency();
        return $this;
    }

    /**
     * Sets unallocated payment field.
     */
    public function unallocatedPayment(?float $value): self
    {
        $this->instance->setUnallocatedPayment($value);
        return $this;
    }

    /**
     * Unsets unallocated payment field.
     */
    public function unsetUnallocatedPayment(): self
    {
        $this->instance->unsetUnallocatedPayment();
        return $this;
    }

    /**
     * Sets local currency code field.
     */
    public function localCurrencyCode(?string $value): self
    {
        $this->instance->setLocalCurrencyCode($value);
        return $this;
    }

    /**
     * Unsets local currency code field.
     */
    public function unsetLocalCurrencyCode(): self
    {
        $this->instance->unsetLocalCurrencyCode();
        return $this;
    }

    /**
     * Sets local currency symbol field.
     */
    public function localCurrencySymbol(?string $value): self
    {
        $this->instance->setLocalCurrencySymbol($value);
        return $this;
    }

    /**
     * Unsets local currency symbol field.
     */
    public function unsetLocalCurrencySymbol(): self
    {
        $this->instance->unsetLocalCurrencySymbol();
        return $this;
    }

    /**
     * Sets local currency exchange rate field.
     */
    public function localCurrencyExchangeRate(?float $value): self
    {
        $this->instance->setLocalCurrencyExchangeRate($value);
        return $this;
    }

    /**
     * Unsets local currency exchange rate field.
     */
    public function unsetLocalCurrencyExchangeRate(): self
    {
        $this->instance->unsetLocalCurrencyExchangeRate();
        return $this;
    }

    /**
     * Initializes a new past statement of accounts object.
     */
    public function build(): PastStatementOfAccounts
    {
        return CoreHelper::clone($this->instance);
    }
}

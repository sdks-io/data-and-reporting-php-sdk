<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class AccountAccess implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colcoId = [];

    /**
     * @var array
     */
    private $colcoCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerName = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var string|null
     */
    private $accountNumber;

    /**
     * @var array
     */
    private $accountName = [];

    /**
     * Returns Colco Id.
     * Collecting company id.
     */
    public function getColcoId(): ?int
    {
        if (count($this->colcoId) == 0) {
            return null;
        }
        return $this->colcoId['value'];
    }

    /**
     * Sets Colco Id.
     * Collecting company id.
     *
     * @maps ColcoId
     */
    public function setColcoId(?int $colcoId): void
    {
        $this->colcoId['value'] = $colcoId;
    }

    /**
     * Unsets Colco Id.
     * Collecting company id.
     */
    public function unsetColcoId(): void
    {
        $this->colcoId = [];
    }

    /**
     * Returns Colco Code.
     * Collecting company code.
     */
    public function getColcoCode(): ?int
    {
        if (count($this->colcoCode) == 0) {
            return null;
        }
        return $this->colcoCode['value'];
    }

    /**
     * Sets Colco Code.
     * Collecting company code.
     *
     * @maps ColcoCode
     */
    public function setColcoCode(?int $colcoCode): void
    {
        $this->colcoCode['value'] = $colcoCode;
    }

    /**
     * Unsets Colco Code.
     * Collecting company code.
     */
    public function unsetColcoCode(): void
    {
        $this->colcoCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id to which the user has access
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id to which the user has access
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id to which the user has access
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number to which the user has access
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number to which the user has access
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number to which the user has access
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Name.
     * Name of the Payer to which the user has access
     */
    public function getPayerName(): ?string
    {
        if (count($this->payerName) == 0) {
            return null;
        }
        return $this->payerName['value'];
    }

    /**
     * Sets Payer Name.
     * Name of the Payer to which the user has access
     *
     * @maps PayerName
     */
    public function setPayerName(?string $payerName): void
    {
        $this->payerName['value'] = $payerName;
    }

    /**
     * Unsets Payer Name.
     * Name of the Payer to which the user has access
     */
    public function unsetPayerName(): void
    {
        $this->payerName = [];
    }

    /**
     * Returns Account Id.
     * Account Id to which the user has access
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id to which the user has access
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id to which the user has access
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number to which the user has access
     */
    public function getAccountNumber(): ?string
    {
        return $this->accountNumber;
    }

    /**
     * Sets Account Number.
     * Account Number to which the user has access
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber = $accountNumber;
    }

    /**
     * Returns Account Name.
     * Name of the Account to which the user has access
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Name of the Account to which the user has access
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Name of the Account to which the user has access
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colcoId)) {
            $json['ColcoId']       = $this->colcoId['value'];
        }
        if (!empty($this->colcoCode)) {
            $json['ColcoCode']     = $this->colcoCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']       = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']   = $this->payerNumber['value'];
        }
        if (!empty($this->payerName)) {
            $json['PayerName']     = $this->payerName['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']     = $this->accountId['value'];
        }
        if (isset($this->accountNumber)) {
            $json['AccountNumber'] = $this->accountNumber;
        }
        if (!empty($this->accountName)) {
            $json['AccountName']   = $this->accountName['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

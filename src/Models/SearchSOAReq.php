<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class SearchSOAReq implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $period = [];

    /**
     * @var array
     */
    private $invoiceDate = [];

    /**
     * @var string[]|null
     */
    private $invoiceStatus;

    /**
     * @var int[]|null
     */
    private $sortBy;

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * Returns Col Co Code.
     * Collecting Company Code of the selected payer.
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code of the selected payer.
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code of the selected payer.
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Invoice Number.
     * Invoice number.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice number.
     * Optional.
     * This input is a search criterion, if given.
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice number.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns From Date.
     * SOA searched from this date.
     * Optional.
     * This input is a search criterion, if given.
     * Date format: yyyy/MM/dd
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * SOA searched from this date.
     * Optional.
     * This input is a search criterion, if given.
     * Date format: yyyy/MM/dd
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * SOA searched from this date.
     * Optional.
     * This input is a search criterion, if given.
     * Date format: yyyy/MM/dd
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Invoice date searched until this date.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Invoice date searched until this date.
     * Optional.
     * This input is a search criterion, if given.
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Invoice date searched until this date.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Period.
     * Invoice date search period. Valid values -
     * Last 7 days – Issued in last 7 days.
     * Last 30 days – Issued in last 30 days.
     * Last 90 days – Issued in last 90 days.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function getPeriod(): ?int
    {
        if (count($this->period) == 0) {
            return null;
        }
        return $this->period['value'];
    }

    /**
     * Sets Period.
     * Invoice date search period. Valid values -
     * Last 7 days – Issued in last 7 days.
     * Last 30 days – Issued in last 30 days.
     * Last 90 days – Issued in last 90 days.
     * Optional.
     * This input is a search criterion, if given.
     *
     * @maps Period
     */
    public function setPeriod(?int $period): void
    {
        $this->period['value'] = $period;
    }

    /**
     * Unsets Period.
     * Invoice date search period. Valid values -
     * Last 7 days – Issued in last 7 days.
     * Last 30 days – Issued in last 30 days.
     * Last 90 days – Issued in last 90 days.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function unsetPeriod(): void
    {
        $this->period = [];
    }

    /**
     * Returns Invoice Date.
     * Date of invoicing.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function getInvoiceDate(): ?string
    {
        if (count($this->invoiceDate) == 0) {
            return null;
        }
        return $this->invoiceDate['value'];
    }

    /**
     * Sets Invoice Date.
     * Date of invoicing.
     * Optional.
     * This input is a search criterion, if given.
     *
     * @maps InvoiceDate
     */
    public function setInvoiceDate(?string $invoiceDate): void
    {
        $this->invoiceDate['value'] = $invoiceDate;
    }

    /**
     * Unsets Invoice Date.
     * Date of invoicing.
     * Optional.
     * This input is a search criterion, if given.
     */
    public function unsetInvoiceDate(): void
    {
        $this->invoiceDate = [];
    }

    /**
     * Returns Invoice Status.
     * Possible options are:
     * 1.    StatementDate ASC
     * 2.    StatementDate DESC
     * Optional
     * Note:
     * This option uses a column name with a combination of “ASC or DESC” for sorting.
     * If only the column name is provided, it is sorted by ascending.
     * Sorting is allowed only ASC or DESC, If both provided in the input ASC will be taken as precedence.
     *
     * @return string[]|null
     */
    public function getInvoiceStatus(): ?array
    {
        return $this->invoiceStatus;
    }

    /**
     * Sets Invoice Status.
     * Possible options are:
     * 1.    StatementDate ASC
     * 2.    StatementDate DESC
     * Optional
     * Note:
     * This option uses a column name with a combination of “ASC or DESC” for sorting.
     * If only the column name is provided, it is sorted by ascending.
     * Sorting is allowed only ASC or DESC, If both provided in the input ASC will be taken as precedence.
     *
     * @maps InvoiceStatus
     *
     * @param string[]|null $invoiceStatus
     */
    public function setInvoiceStatus(?array $invoiceStatus): void
    {
        $this->invoiceStatus = $invoiceStatus;
    }

    /**
     * Returns Sort By.
     * Possible options are:
     * 1.    StatementDate ASC
     * 2.    StatementDate DESC
     * Optional
     * Note:
     * This option uses a column name with a combination of “ASC or DESC” for sorting.
     * If only the column name is provided, it is sorted by ascending.
     * Sorting is allowed only ASC or DESC, If both provided in the input ASC will be taken as precedence.
     *
     * @return int[]|null
     */
    public function getSortBy(): ?array
    {
        return $this->sortBy;
    }

    /**
     * Sets Sort By.
     * Possible options are:
     * 1.    StatementDate ASC
     * 2.    StatementDate DESC
     * Optional
     * Note:
     * This option uses a column name with a combination of “ASC or DESC” for sorting.
     * If only the column name is provided, it is sorted by ascending.
     * Sorting is allowed only ASC or DESC, If both provided in the input ASC will be taken as precedence.
     *
     * @maps SortBy
     *
     * @param int[]|null $sortBy
     */
    public function setSortBy(?array $sortBy): void
    {
        $this->sortBy = $sortBy;
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1-Philippines
     *
     * 5-UK
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id  of the selected payer.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id  of the selected payer.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id  of the selected payer.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']     = $this->colCoCode['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']   = $this->payerNumber['value'];
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber'] = $this->invoiceNumber['value'];
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']      = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']        = $this->toDate['value'];
        }
        if (!empty($this->period)) {
            $json['Period']        = $this->period['value'];
        }
        if (!empty($this->invoiceDate)) {
            $json['InvoiceDate']   = $this->invoiceDate['value'];
        }
        if (isset($this->invoiceStatus)) {
            $json['InvoiceStatus'] = $this->invoiceStatus;
        }
        if (isset($this->sortBy)) {
            $json['SortBy']        = $this->sortBy;
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']       = $this->colCoId['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']       = $this->payerId['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

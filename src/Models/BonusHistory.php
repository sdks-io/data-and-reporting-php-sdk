<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class BonusHistory implements \JsonSerializable
{
    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerShortName = [];

    /**
     * @var array
     */
    private $payerFullName = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $accountFullName = [];

    /**
     * @var array
     */
    private $invoiceAccountId = [];

    /**
     * @var array
     */
    private $invoiceAccountNumber = [];

    /**
     * @var array
     */
    private $invoiceAccountShortName = [];

    /**
     * @var array
     */
    private $invoiceAccountFullName = [];

    /**
     * @var array
     */
    private $feeRuleId = [];

    /**
     * @var array
     */
    private $feeRuleDescription = [];

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $bonusPaidTo = [];

    /**
     * @var array
     */
    private $feeItemId = [];

    /**
     * @var array
     */
    private $feeRuleBasis = [];

    /**
     * @var array
     */
    private $feeItemCurrencyCode = [];

    /**
     * @var array
     */
    private $feeItemCurrencySymbol = [];

    /**
     * @var array
     */
    private $proratedVolume = [];

    /**
     * @var array
     */
    private $totalVolume = [];

    /**
     * @var array
     */
    private $feeProduct = [];

    /**
     * @var array
     */
    private $invoiceGrossAmount = [];

    /**
     * @var array
     */
    private $invoiceNetAmount = [];

    /**
     * @var array
     */
    private $invoiceVATAmount = [];

    /**
     * @var array
     */
    private $isFeeCancelled = [];

    /**
     * @var array
     */
    private $feeItemTierProratedVolume = [];

    /**
     * @var array
     */
    private $feeItemTierTotalVolume = [];

    /**
     * @var array
     */
    private $tierMinimum = [];

    /**
     * @var array
     */
    private $tierRate = [];

    /**
     * Returns Payer Id.
     * Payer Id
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Short Name.
     * Payer short name.
     */
    public function getPayerShortName(): ?string
    {
        if (count($this->payerShortName) == 0) {
            return null;
        }
        return $this->payerShortName['value'];
    }

    /**
     * Sets Payer Short Name.
     * Payer short name.
     *
     * @maps PayerShortName
     */
    public function setPayerShortName(?string $payerShortName): void
    {
        $this->payerShortName['value'] = $payerShortName;
    }

    /**
     * Unsets Payer Short Name.
     * Payer short name.
     */
    public function unsetPayerShortName(): void
    {
        $this->payerShortName = [];
    }

    /**
     * Returns Payer Full Name.
     * Payer full name.
     */
    public function getPayerFullName(): ?string
    {
        if (count($this->payerFullName) == 0) {
            return null;
        }
        return $this->payerFullName['value'];
    }

    /**
     * Sets Payer Full Name.
     * Payer full name.
     *
     * @maps PayerFullName
     */
    public function setPayerFullName(?string $payerFullName): void
    {
        $this->payerFullName['value'] = $payerFullName;
    }

    /**
     * Unsets Payer Full Name.
     * Payer full name.
     */
    public function unsetPayerFullName(): void
    {
        $this->payerFullName = [];
    }

    /**
     * Returns Account Id.
     * Account Id
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the selected payer.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the selected payer.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the selected payer.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account short name.
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account short name.
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account short name.
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Account Full Name.
     * Account full name.
     */
    public function getAccountFullName(): ?string
    {
        if (count($this->accountFullName) == 0) {
            return null;
        }
        return $this->accountFullName['value'];
    }

    /**
     * Sets Account Full Name.
     * Account full name.
     *
     * @maps AccountFullName
     */
    public function setAccountFullName(?string $accountFullName): void
    {
        $this->accountFullName['value'] = $accountFullName;
    }

    /**
     * Unsets Account Full Name.
     * Account full name.
     */
    public function unsetAccountFullName(): void
    {
        $this->accountFullName = [];
    }

    /**
     * Returns Invoice Account Id.
     * Invoice Account Id
     */
    public function getInvoiceAccountId(): ?int
    {
        if (count($this->invoiceAccountId) == 0) {
            return null;
        }
        return $this->invoiceAccountId['value'];
    }

    /**
     * Sets Invoice Account Id.
     * Invoice Account Id
     *
     * @maps InvoiceAccountId
     */
    public function setInvoiceAccountId(?int $invoiceAccountId): void
    {
        $this->invoiceAccountId['value'] = $invoiceAccountId;
    }

    /**
     * Unsets Invoice Account Id.
     * Invoice Account Id
     */
    public function unsetInvoiceAccountId(): void
    {
        $this->invoiceAccountId = [];
    }

    /**
     * Returns Invoice Account Number.
     * Invoice Account Number of the selected payer.
     */
    public function getInvoiceAccountNumber(): ?string
    {
        if (count($this->invoiceAccountNumber) == 0) {
            return null;
        }
        return $this->invoiceAccountNumber['value'];
    }

    /**
     * Sets Invoice Account Number.
     * Invoice Account Number of the selected payer.
     *
     * @maps InvoiceAccountNumber
     */
    public function setInvoiceAccountNumber(?string $invoiceAccountNumber): void
    {
        $this->invoiceAccountNumber['value'] = $invoiceAccountNumber;
    }

    /**
     * Unsets Invoice Account Number.
     * Invoice Account Number of the selected payer.
     */
    public function unsetInvoiceAccountNumber(): void
    {
        $this->invoiceAccountNumber = [];
    }

    /**
     * Returns Invoice Account Short Name.
     * Invoice Account short name.
     */
    public function getInvoiceAccountShortName(): ?string
    {
        if (count($this->invoiceAccountShortName) == 0) {
            return null;
        }
        return $this->invoiceAccountShortName['value'];
    }

    /**
     * Sets Invoice Account Short Name.
     * Invoice Account short name.
     *
     * @maps InvoiceAccountShortName
     */
    public function setInvoiceAccountShortName(?string $invoiceAccountShortName): void
    {
        $this->invoiceAccountShortName['value'] = $invoiceAccountShortName;
    }

    /**
     * Unsets Invoice Account Short Name.
     * Invoice Account short name.
     */
    public function unsetInvoiceAccountShortName(): void
    {
        $this->invoiceAccountShortName = [];
    }

    /**
     * Returns Invoice Account Full Name.
     * Invoice Account full name.
     */
    public function getInvoiceAccountFullName(): ?string
    {
        if (count($this->invoiceAccountFullName) == 0) {
            return null;
        }
        return $this->invoiceAccountFullName['value'];
    }

    /**
     * Sets Invoice Account Full Name.
     * Invoice Account full name.
     *
     * @maps InvoiceAccountFullName
     */
    public function setInvoiceAccountFullName(?string $invoiceAccountFullName): void
    {
        $this->invoiceAccountFullName['value'] = $invoiceAccountFullName;
    }

    /**
     * Unsets Invoice Account Full Name.
     * Invoice Account full name.
     */
    public function unsetInvoiceAccountFullName(): void
    {
        $this->invoiceAccountFullName = [];
    }

    /**
     * Returns Fee Rule Id.
     * Bonus or association bonus configuration identifier
     */
    public function getFeeRuleId(): ?string
    {
        if (count($this->feeRuleId) == 0) {
            return null;
        }
        return $this->feeRuleId['value'];
    }

    /**
     * Sets Fee Rule Id.
     * Bonus or association bonus configuration identifier
     *
     * @maps FeeRuleId
     */
    public function setFeeRuleId(?string $feeRuleId): void
    {
        $this->feeRuleId['value'] = $feeRuleId;
    }

    /**
     * Unsets Fee Rule Id.
     * Bonus or association bonus configuration identifier
     */
    public function unsetFeeRuleId(): void
    {
        $this->feeRuleId = [];
    }

    /**
     * Returns Fee Rule Description.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     */
    public function getFeeRuleDescription(): ?string
    {
        if (count($this->feeRuleDescription) == 0) {
            return null;
        }
        return $this->feeRuleDescription['value'];
    }

    /**
     * Sets Fee Rule Description.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     *
     * @maps FeeRuleDescription
     */
    public function setFeeRuleDescription(?string $feeRuleDescription): void
    {
        $this->feeRuleDescription['value'] = $feeRuleDescription;
    }

    /**
     * Unsets Fee Rule Description.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     */
    public function unsetFeeRuleDescription(): void
    {
        $this->feeRuleDescription = [];
    }

    /**
     * Returns From Date.
     * Bonus was calculated from this date.
     * Format: YYYYMMDD
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * Bonus was calculated from this date.
     * Format: YYYYMMDD
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * Bonus was calculated from this date.
     * Format: YYYYMMDD
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Bonus was calculated till this date.
     * Format: YYYYMMDD
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Bonus was calculated till this date.
     * Format: YYYYMMDD
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Bonus was calculated till this date.
     * Format: YYYYMMDD
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Bonus Paid To.
     * Specifies how the bonus was paid back.
     *
     * Format: ID-Description
     *
     * Example:
     *
     * 1-Pay to Payer
     *
     * 2-Pay to invoice levels before the payer
     *
     * 3-Pay to specific customer
     *
     * 4-Pay to Association Customer
     *
     * 5-Pay to Associated Customers
     */
    public function getBonusPaidTo(): ?string
    {
        if (count($this->bonusPaidTo) == 0) {
            return null;
        }
        return $this->bonusPaidTo['value'];
    }

    /**
     * Sets Bonus Paid To.
     * Specifies how the bonus was paid back.
     *
     * Format: ID-Description
     *
     * Example:
     *
     * 1-Pay to Payer
     *
     * 2-Pay to invoice levels before the payer
     *
     * 3-Pay to specific customer
     *
     * 4-Pay to Association Customer
     *
     * 5-Pay to Associated Customers
     *
     * @maps BonusPaidTo
     */
    public function setBonusPaidTo(?string $bonusPaidTo): void
    {
        $this->bonusPaidTo['value'] = $bonusPaidTo;
    }

    /**
     * Unsets Bonus Paid To.
     * Specifies how the bonus was paid back.
     *
     * Format: ID-Description
     *
     * Example:
     *
     * 1-Pay to Payer
     *
     * 2-Pay to invoice levels before the payer
     *
     * 3-Pay to specific customer
     *
     * 4-Pay to Association Customer
     *
     * 5-Pay to Associated Customers
     */
    public function unsetBonusPaidTo(): void
    {
        $this->bonusPaidTo = [];
    }

    /**
     * Returns Fee Item Id.
     * Bonus fee item identifier.
     */
    public function getFeeItemId(): ?int
    {
        if (count($this->feeItemId) == 0) {
            return null;
        }
        return $this->feeItemId['value'];
    }

    /**
     * Sets Fee Item Id.
     * Bonus fee item identifier.
     *
     * @maps FeeItemId
     */
    public function setFeeItemId(?int $feeItemId): void
    {
        $this->feeItemId['value'] = $feeItemId;
    }

    /**
     * Unsets Fee Item Id.
     * Bonus fee item identifier.
     */
    public function unsetFeeItemId(): void
    {
        $this->feeItemId = [];
    }

    /**
     * Returns Fee Rule Basis.
     * Fee Rule Basis of the bonus fee item.
     * Format: ID-Description
     * Example:
     * 1-Currency Per Unit
     * 2-Percentage of Uplift
     * 3-Lump Sum
     */
    public function getFeeRuleBasis(): ?string
    {
        if (count($this->feeRuleBasis) == 0) {
            return null;
        }
        return $this->feeRuleBasis['value'];
    }

    /**
     * Sets Fee Rule Basis.
     * Fee Rule Basis of the bonus fee item.
     * Format: ID-Description
     * Example:
     * 1-Currency Per Unit
     * 2-Percentage of Uplift
     * 3-Lump Sum
     *
     * @maps FeeRuleBasis
     */
    public function setFeeRuleBasis(?string $feeRuleBasis): void
    {
        $this->feeRuleBasis['value'] = $feeRuleBasis;
    }

    /**
     * Unsets Fee Rule Basis.
     * Fee Rule Basis of the bonus fee item.
     * Format: ID-Description
     * Example:
     * 1-Currency Per Unit
     * 2-Percentage of Uplift
     * 3-Lump Sum
     */
    public function unsetFeeRuleBasis(): void
    {
        $this->feeRuleBasis = [];
    }

    /**
     * Returns Fee Item Currency Code.
     * ISO currency code of the currency in which Bonus is paid.
     * Example: GBP
     */
    public function getFeeItemCurrencyCode(): ?string
    {
        if (count($this->feeItemCurrencyCode) == 0) {
            return null;
        }
        return $this->feeItemCurrencyCode['value'];
    }

    /**
     * Sets Fee Item Currency Code.
     * ISO currency code of the currency in which Bonus is paid.
     * Example: GBP
     *
     * @maps FeeItemCurrencyCode
     */
    public function setFeeItemCurrencyCode(?string $feeItemCurrencyCode): void
    {
        $this->feeItemCurrencyCode['value'] = $feeItemCurrencyCode;
    }

    /**
     * Unsets Fee Item Currency Code.
     * ISO currency code of the currency in which Bonus is paid.
     * Example: GBP
     */
    public function unsetFeeItemCurrencyCode(): void
    {
        $this->feeItemCurrencyCode = [];
    }

    /**
     * Returns Fee Item Currency Symbol.
     * Currency symbol of the currency in which Bonus is paid.
     */
    public function getFeeItemCurrencySymbol(): ?string
    {
        if (count($this->feeItemCurrencySymbol) == 0) {
            return null;
        }
        return $this->feeItemCurrencySymbol['value'];
    }

    /**
     * Sets Fee Item Currency Symbol.
     * Currency symbol of the currency in which Bonus is paid.
     *
     * @maps FeeItemCurrencySymbol
     */
    public function setFeeItemCurrencySymbol(?string $feeItemCurrencySymbol): void
    {
        $this->feeItemCurrencySymbol['value'] = $feeItemCurrencySymbol;
    }

    /**
     * Unsets Fee Item Currency Symbol.
     * Currency symbol of the currency in which Bonus is paid.
     */
    public function unsetFeeItemCurrencySymbol(): void
    {
        $this->feeItemCurrencySymbol = [];
    }

    /**
     * Returns Prorated Volume.
     * Prorated volume considered under the account as  configured for the bonus association.
     */
    public function getProratedVolume(): ?float
    {
        if (count($this->proratedVolume) == 0) {
            return null;
        }
        return $this->proratedVolume['value'];
    }

    /**
     * Sets Prorated Volume.
     * Prorated volume considered under the account as  configured for the bonus association.
     *
     * @maps ProratedVolume
     */
    public function setProratedVolume(?float $proratedVolume): void
    {
        $this->proratedVolume['value'] = $proratedVolume;
    }

    /**
     * Unsets Prorated Volume.
     * Prorated volume considered under the account as  configured for the bonus association.
     */
    public function unsetProratedVolume(): void
    {
        $this->proratedVolume = [];
    }

    /**
     * Returns Total Volume.
     * Total volume considered for calculating the bonus.
     */
    public function getTotalVolume(): ?float
    {
        if (count($this->totalVolume) == 0) {
            return null;
        }
        return $this->totalVolume['value'];
    }

    /**
     * Sets Total Volume.
     * Total volume considered for calculating the bonus.
     *
     * @maps TotalVolume
     */
    public function setTotalVolume(?float $totalVolume): void
    {
        $this->totalVolume['value'] = $totalVolume;
    }

    /**
     * Unsets Total Volume.
     * Total volume considered for calculating the bonus.
     */
    public function unsetTotalVolume(): void
    {
        $this->totalVolume = [];
    }

    /**
     * Returns Fee Product.
     * Product as shown in the invoice for the bonus paid.
     * Format: ID-Description
     * Example: 1562-Bonus diesel Shell Netherlands on agreed site(s)
     */
    public function getFeeProduct(): ?string
    {
        if (count($this->feeProduct) == 0) {
            return null;
        }
        return $this->feeProduct['value'];
    }

    /**
     * Sets Fee Product.
     * Product as shown in the invoice for the bonus paid.
     * Format: ID-Description
     * Example: 1562-Bonus diesel Shell Netherlands on agreed site(s)
     *
     * @maps FeeProduct
     */
    public function setFeeProduct(?string $feeProduct): void
    {
        $this->feeProduct['value'] = $feeProduct;
    }

    /**
     * Unsets Fee Product.
     * Product as shown in the invoice for the bonus paid.
     * Format: ID-Description
     * Example: 1562-Bonus diesel Shell Netherlands on agreed site(s)
     */
    public function unsetFeeProduct(): void
    {
        $this->feeProduct = [];
    }

    /**
     * Returns Invoice Gross Amount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     */
    public function getInvoiceGrossAmount(): ?float
    {
        if (count($this->invoiceGrossAmount) == 0) {
            return null;
        }
        return $this->invoiceGrossAmount['value'];
    }

    /**
     * Sets Invoice Gross Amount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     *
     * @maps InvoiceGrossAmount
     */
    public function setInvoiceGrossAmount(?float $invoiceGrossAmount): void
    {
        $this->invoiceGrossAmount['value'] = $invoiceGrossAmount;
    }

    /**
     * Unsets Invoice Gross Amount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     */
    public function unsetInvoiceGrossAmount(): void
    {
        $this->invoiceGrossAmount = [];
    }

    /**
     * Returns Invoice Net Amount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     */
    public function getInvoiceNetAmount(): ?float
    {
        if (count($this->invoiceNetAmount) == 0) {
            return null;
        }
        return $this->invoiceNetAmount['value'];
    }

    /**
     * Sets Invoice Net Amount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     *
     * @maps InvoiceNetAmount
     */
    public function setInvoiceNetAmount(?float $invoiceNetAmount): void
    {
        $this->invoiceNetAmount['value'] = $invoiceNetAmount;
    }

    /**
     * Unsets Invoice Net Amount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     */
    public function unsetInvoiceNetAmount(): void
    {
        $this->invoiceNetAmount = [];
    }

    /**
     * Returns Invoice VAT Amount.
     * VAT calculated for the bonus paid as shown on the Invoice
     */
    public function getInvoiceVATAmount(): ?float
    {
        if (count($this->invoiceVATAmount) == 0) {
            return null;
        }
        return $this->invoiceVATAmount['value'];
    }

    /**
     * Sets Invoice VAT Amount.
     * VAT calculated for the bonus paid as shown on the Invoice
     *
     * @maps InvoiceVATAmount
     */
    public function setInvoiceVATAmount(?float $invoiceVATAmount): void
    {
        $this->invoiceVATAmount['value'] = $invoiceVATAmount;
    }

    /**
     * Unsets Invoice VAT Amount.
     * VAT calculated for the bonus paid as shown on the Invoice
     */
    public function unsetInvoiceVATAmount(): void
    {
        $this->invoiceVATAmount = [];
    }

    /**
     * Returns Is Fee Cancelled.
     * True/False
     * True if bonus is generated but cancelled. When true, consider this as not paid.
     */
    public function getIsFeeCancelled(): ?bool
    {
        if (count($this->isFeeCancelled) == 0) {
            return null;
        }
        return $this->isFeeCancelled['value'];
    }

    /**
     * Sets Is Fee Cancelled.
     * True/False
     * True if bonus is generated but cancelled. When true, consider this as not paid.
     *
     * @maps IsFeeCancelled
     */
    public function setIsFeeCancelled(?bool $isFeeCancelled): void
    {
        $this->isFeeCancelled['value'] = $isFeeCancelled;
    }

    /**
     * Unsets Is Fee Cancelled.
     * True/False
     * True if bonus is generated but cancelled. When true, consider this as not paid.
     */
    public function unsetIsFeeCancelled(): void
    {
        $this->isFeeCancelled = [];
    }

    /**
     * Returns Fee Item Tier Prorated Volume.
     * Prorated volume in the bonus fee item tier.
     */
    public function getFeeItemTierProratedVolume(): ?float
    {
        if (count($this->feeItemTierProratedVolume) == 0) {
            return null;
        }
        return $this->feeItemTierProratedVolume['value'];
    }

    /**
     * Sets Fee Item Tier Prorated Volume.
     * Prorated volume in the bonus fee item tier.
     *
     * @maps FeeItemTierProratedVolume
     */
    public function setFeeItemTierProratedVolume(?float $feeItemTierProratedVolume): void
    {
        $this->feeItemTierProratedVolume['value'] = $feeItemTierProratedVolume;
    }

    /**
     * Unsets Fee Item Tier Prorated Volume.
     * Prorated volume in the bonus fee item tier.
     */
    public function unsetFeeItemTierProratedVolume(): void
    {
        $this->feeItemTierProratedVolume = [];
    }

    /**
     * Returns Fee Item Tier Total Volume.
     * Total volume in the bonus fee item tier.
     */
    public function getFeeItemTierTotalVolume(): ?float
    {
        if (count($this->feeItemTierTotalVolume) == 0) {
            return null;
        }
        return $this->feeItemTierTotalVolume['value'];
    }

    /**
     * Sets Fee Item Tier Total Volume.
     * Total volume in the bonus fee item tier.
     *
     * @maps FeeItemTierTotalVolume
     */
    public function setFeeItemTierTotalVolume(?float $feeItemTierTotalVolume): void
    {
        $this->feeItemTierTotalVolume['value'] = $feeItemTierTotalVolume;
    }

    /**
     * Unsets Fee Item Tier Total Volume.
     * Total volume in the bonus fee item tier.
     */
    public function unsetFeeItemTierTotalVolume(): void
    {
        $this->feeItemTierTotalVolume = [];
    }

    /**
     * Returns Tier Minimum.
     * Tier minimum value considered for calculation
     */
    public function getTierMinimum(): ?int
    {
        if (count($this->tierMinimum) == 0) {
            return null;
        }
        return $this->tierMinimum['value'];
    }

    /**
     * Sets Tier Minimum.
     * Tier minimum value considered for calculation
     *
     * @maps TierMinimum
     */
    public function setTierMinimum(?int $tierMinimum): void
    {
        $this->tierMinimum['value'] = $tierMinimum;
    }

    /**
     * Unsets Tier Minimum.
     * Tier minimum value considered for calculation
     */
    public function unsetTierMinimum(): void
    {
        $this->tierMinimum = [];
    }

    /**
     * Returns Tier Rate.
     * Tier rate considered for calculation
     */
    public function getTierRate(): ?float
    {
        if (count($this->tierRate) == 0) {
            return null;
        }
        return $this->tierRate['value'];
    }

    /**
     * Sets Tier Rate.
     * Tier rate considered for calculation
     *
     * @maps TierRate
     */
    public function setTierRate(?float $tierRate): void
    {
        $this->tierRate['value'] = $tierRate;
    }

    /**
     * Unsets Tier Rate.
     * Tier rate considered for calculation
     */
    public function unsetTierRate(): void
    {
        $this->tierRate = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->payerId)) {
            $json['PayerId']                   = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']               = $this->payerNumber['value'];
        }
        if (!empty($this->payerShortName)) {
            $json['PayerShortName']            = $this->payerShortName['value'];
        }
        if (!empty($this->payerFullName)) {
            $json['PayerFullName']             = $this->payerFullName['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                 = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']             = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']          = $this->accountShortName['value'];
        }
        if (!empty($this->accountFullName)) {
            $json['AccountFullName']           = $this->accountFullName['value'];
        }
        if (!empty($this->invoiceAccountId)) {
            $json['InvoiceAccountId']          = $this->invoiceAccountId['value'];
        }
        if (!empty($this->invoiceAccountNumber)) {
            $json['InvoiceAccountNumber']      = $this->invoiceAccountNumber['value'];
        }
        if (!empty($this->invoiceAccountShortName)) {
            $json['InvoiceAccountShortName']   = $this->invoiceAccountShortName['value'];
        }
        if (!empty($this->invoiceAccountFullName)) {
            $json['InvoiceAccountFullName']    = $this->invoiceAccountFullName['value'];
        }
        if (!empty($this->feeRuleId)) {
            $json['FeeRuleId']                 = $this->feeRuleId['value'];
        }
        if (!empty($this->feeRuleDescription)) {
            $json['FeeRuleDescription']        = $this->feeRuleDescription['value'];
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']                  = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']                    = $this->toDate['value'];
        }
        if (!empty($this->bonusPaidTo)) {
            $json['BonusPaidTo']               = $this->bonusPaidTo['value'];
        }
        if (!empty($this->feeItemId)) {
            $json['FeeItemId']                 = $this->feeItemId['value'];
        }
        if (!empty($this->feeRuleBasis)) {
            $json['FeeRuleBasis']              = $this->feeRuleBasis['value'];
        }
        if (!empty($this->feeItemCurrencyCode)) {
            $json['FeeItemCurrencyCode']       = $this->feeItemCurrencyCode['value'];
        }
        if (!empty($this->feeItemCurrencySymbol)) {
            $json['FeeItemCurrencySymbol']     = $this->feeItemCurrencySymbol['value'];
        }
        if (!empty($this->proratedVolume)) {
            $json['ProratedVolume']            = $this->proratedVolume['value'];
        }
        if (!empty($this->totalVolume)) {
            $json['TotalVolume']               = $this->totalVolume['value'];
        }
        if (!empty($this->feeProduct)) {
            $json['FeeProduct']                = $this->feeProduct['value'];
        }
        if (!empty($this->invoiceGrossAmount)) {
            $json['InvoiceGrossAmount']        = $this->invoiceGrossAmount['value'];
        }
        if (!empty($this->invoiceNetAmount)) {
            $json['InvoiceNetAmount']          = $this->invoiceNetAmount['value'];
        }
        if (!empty($this->invoiceVATAmount)) {
            $json['InvoiceVATAmount']          = $this->invoiceVATAmount['value'];
        }
        if (!empty($this->isFeeCancelled)) {
            $json['IsFeeCancelled']            = $this->isFeeCancelled['value'];
        }
        if (!empty($this->feeItemTierProratedVolume)) {
            $json['FeeItemTierProratedVolume'] = $this->feeItemTierProratedVolume['value'];
        }
        if (!empty($this->feeItemTierTotalVolume)) {
            $json['FeeItemTierTotalVolume']    = $this->feeItemTierTotalVolume['value'];
        }
        if (!empty($this->tierMinimum)) {
            $json['TierMinimum']               = $this->tierMinimum['value'];
        }
        if (!empty($this->tierRate)) {
            $json['TierRate']                  = $this->tierRate['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class SearchStatementOfAccount implements \JsonSerializable
{
    /**
     * @var array
     */
    private $statementOfAccountId = [];

    /**
     * @var array
     */
    private $soAReferenceNumber = [];

    /**
     * @var array
     */
    private $statementDate = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $amountDue = [];

    /**
     * @var array
     */
    private $amountOverdue = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $dueDate = [];

    /**
     * @var array
     */
    private $invoicedOnBehalfOf = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $grossAmountCustomerCurrency = [];

    /**
     * @var array
     */
    private $documentReferenceNumber = [];

    /**
     * Returns Statement of Account Id.
     * Statement of account identifier
     */
    public function getStatementOfAccountId(): ?int
    {
        if (count($this->statementOfAccountId) == 0) {
            return null;
        }
        return $this->statementOfAccountId['value'];
    }

    /**
     * Sets Statement of Account Id.
     * Statement of account identifier
     *
     * @maps StatementOfAccountId
     */
    public function setStatementOfAccountId(?int $statementOfAccountId): void
    {
        $this->statementOfAccountId['value'] = $statementOfAccountId;
    }

    /**
     * Unsets Statement of Account Id.
     * Statement of account identifier
     */
    public function unsetStatementOfAccountId(): void
    {
        $this->statementOfAccountId = [];
    }

    /**
     * Returns So a Reference Number.
     * Statement of account reference
     */
    public function getSoAReferenceNumber(): ?string
    {
        if (count($this->soAReferenceNumber) == 0) {
            return null;
        }
        return $this->soAReferenceNumber['value'];
    }

    /**
     * Sets So a Reference Number.
     * Statement of account reference
     *
     * @maps SoAReferenceNumber
     */
    public function setSoAReferenceNumber(?string $soAReferenceNumber): void
    {
        $this->soAReferenceNumber['value'] = $soAReferenceNumber;
    }

    /**
     * Unsets So a Reference Number.
     * Statement of account reference
     */
    public function unsetSoAReferenceNumber(): void
    {
        $this->soAReferenceNumber = [];
    }

    /**
     * Returns Statement Date.
     * Date on which the SOA was generated.
     *
     * Format: yyyyMMdd
     */
    public function getStatementDate(): ?string
    {
        if (count($this->statementDate) == 0) {
            return null;
        }
        return $this->statementDate['value'];
    }

    /**
     * Sets Statement Date.
     * Date on which the SOA was generated.
     *
     * Format: yyyyMMdd
     *
     * @maps StatementDate
     */
    public function setStatementDate(?string $statementDate): void
    {
        $this->statementDate['value'] = $statementDate;
    }

    /**
     * Unsets Statement Date.
     * Date on which the SOA was generated.
     *
     * Format: yyyyMMdd
     */
    public function unsetStatementDate(): void
    {
        $this->statementDate = [];
    }

    /**
     * Returns Payer Id.
     * Payment customer id of the customer.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payment customer id of the customer.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payment customer id of the customer.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payment customer number.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payment customer number.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payment customer number.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Amount Due.
     * Invoiced amount and due for payment
     */
    public function getAmountDue(): ?float
    {
        if (count($this->amountDue) == 0) {
            return null;
        }
        return $this->amountDue['value'];
    }

    /**
     * Sets Amount Due.
     * Invoiced amount and due for payment
     *
     * @maps AmountDue
     */
    public function setAmountDue(?float $amountDue): void
    {
        $this->amountDue['value'] = $amountDue;
    }

    /**
     * Unsets Amount Due.
     * Invoiced amount and due for payment
     */
    public function unsetAmountDue(): void
    {
        $this->amountDue = [];
    }

    /**
     * Returns Amount Overdue.
     * Invoiced amount and overdue for payment.
     */
    public function getAmountOverdue(): ?float
    {
        if (count($this->amountOverdue) == 0) {
            return null;
        }
        return $this->amountOverdue['value'];
    }

    /**
     * Sets Amount Overdue.
     * Invoiced amount and overdue for payment.
     *
     * @maps AmountOverdue
     */
    public function setAmountOverdue(?float $amountOverdue): void
    {
        $this->amountOverdue['value'] = $amountOverdue;
    }

    /**
     * Unsets Amount Overdue.
     * Invoiced amount and overdue for payment.
     */
    public function unsetAmountOverdue(): void
    {
        $this->amountOverdue = [];
    }

    /**
     * Returns Currency Code.
     * ISO code of SOA currency.
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * ISO code of SOA currency.
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * ISO code of SOA currency.
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Symbol of SOA currency.
     *
     * Example: €
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Symbol of SOA currency.
     *
     * Example: €
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Symbol of SOA currency.
     *
     * Example: €
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Due Date.
     * Due date for payment. Format: yyyyMMdd
     *
     * Note:
     *
     * • Clients to convert this to appropriate DateTime type.
     *
     * • SoA due date is considered as the latest due date of the invoices within the SoA
     */
    public function getDueDate(): ?string
    {
        if (count($this->dueDate) == 0) {
            return null;
        }
        return $this->dueDate['value'];
    }

    /**
     * Sets Due Date.
     * Due date for payment. Format: yyyyMMdd
     *
     * Note:
     *
     * • Clients to convert this to appropriate DateTime type.
     *
     * • SoA due date is considered as the latest due date of the invoices within the SoA
     *
     * @maps DueDate
     */
    public function setDueDate(?string $dueDate): void
    {
        $this->dueDate['value'] = $dueDate;
    }

    /**
     * Unsets Due Date.
     * Due date for payment. Format: yyyyMMdd
     *
     * Note:
     *
     * • Clients to convert this to appropriate DateTime type.
     *
     * • SoA due date is considered as the latest due date of the invoices within the SoA
     */
    public function unsetDueDate(): void
    {
        $this->dueDate = [];
    }

    /**
     * Returns Invoiced on Behalf Of.
     * ISO code of the country i.e., UK, DE, MY, etc.
     *
     * This is the value of the first invoice within the SoA. It may not be same for all the invoices
     * within the SoA.
     */
    public function getInvoicedOnBehalfOf(): ?string
    {
        if (count($this->invoicedOnBehalfOf) == 0) {
            return null;
        }
        return $this->invoicedOnBehalfOf['value'];
    }

    /**
     * Sets Invoiced on Behalf Of.
     * ISO code of the country i.e., UK, DE, MY, etc.
     *
     * This is the value of the first invoice within the SoA. It may not be same for all the invoices
     * within the SoA.
     *
     * @maps InvoicedOnBehalfOf
     */
    public function setInvoicedOnBehalfOf(?string $invoicedOnBehalfOf): void
    {
        $this->invoicedOnBehalfOf['value'] = $invoicedOnBehalfOf;
    }

    /**
     * Unsets Invoiced on Behalf Of.
     * ISO code of the country i.e., UK, DE, MY, etc.
     *
     * This is the value of the first invoice within the SoA. It may not be same for all the invoices
     * within the SoA.
     */
    public function unsetInvoicedOnBehalfOf(): void
    {
        $this->invoicedOnBehalfOf = [];
    }

    /**
     * Returns Status.
     * Status of the document. Valid values –
     *
     * 1. Paid – Fully paid all Invoices with in the SOA.
     *
     * 2. Overdue – At least one invoice payment due date is less than current date with in the SOA.
     *
     * 3. Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status of the document. Valid values –
     *
     * 1. Paid – Fully paid all Invoices with in the SOA.
     *
     * 2. Overdue – At least one invoice payment due date is less than current date with in the SOA.
     *
     * 3. Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status of the document. Valid values –
     *
     * 1. Paid – Fully paid all Invoices with in the SOA.
     *
     * 2. Overdue – At least one invoice payment due date is less than current date with in the SOA.
     *
     * 3. Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Gross Amount Customer Currency.
     * Total gross amount in customer currency.
     */
    public function getGrossAmountCustomerCurrency(): ?float
    {
        if (count($this->grossAmountCustomerCurrency) == 0) {
            return null;
        }
        return $this->grossAmountCustomerCurrency['value'];
    }

    /**
     * Sets Gross Amount Customer Currency.
     * Total gross amount in customer currency.
     *
     * @maps GrossAmountCustomerCurrency
     */
    public function setGrossAmountCustomerCurrency(?float $grossAmountCustomerCurrency): void
    {
        $this->grossAmountCustomerCurrency['value'] = $grossAmountCustomerCurrency;
    }

    /**
     * Unsets Gross Amount Customer Currency.
     * Total gross amount in customer currency.
     */
    public function unsetGrossAmountCustomerCurrency(): void
    {
        $this->grossAmountCustomerCurrency = [];
    }

    /**
     * Returns Document Reference Number.
     * Document reference number fetched
     */
    public function getDocumentReferenceNumber(): ?string
    {
        if (count($this->documentReferenceNumber) == 0) {
            return null;
        }
        return $this->documentReferenceNumber['value'];
    }

    /**
     * Sets Document Reference Number.
     * Document reference number fetched
     *
     * @maps DocumentReferenceNumber
     */
    public function setDocumentReferenceNumber(?string $documentReferenceNumber): void
    {
        $this->documentReferenceNumber['value'] = $documentReferenceNumber;
    }

    /**
     * Unsets Document Reference Number.
     * Document reference number fetched
     */
    public function unsetDocumentReferenceNumber(): void
    {
        $this->documentReferenceNumber = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->statementOfAccountId)) {
            $json['StatementOfAccountId']        = $this->statementOfAccountId['value'];
        }
        if (!empty($this->soAReferenceNumber)) {
            $json['SoAReferenceNumber']          = $this->soAReferenceNumber['value'];
        }
        if (!empty($this->statementDate)) {
            $json['StatementDate']               = $this->statementDate['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                     = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                 = $this->payerNumber['value'];
        }
        if (!empty($this->amountDue)) {
            $json['AmountDue']                   = $this->amountDue['value'];
        }
        if (!empty($this->amountOverdue)) {
            $json['AmountOverdue']               = $this->amountOverdue['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']                = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']              = $this->currencySymbol['value'];
        }
        if (!empty($this->dueDate)) {
            $json['DueDate']                     = $this->dueDate['value'];
        }
        if (!empty($this->invoicedOnBehalfOf)) {
            $json['InvoicedOnBehalfOf']          = $this->invoicedOnBehalfOf['value'];
        }
        if (!empty($this->status)) {
            $json['Status']                      = $this->status['value'];
        }
        if (!empty($this->grossAmountCustomerCurrency)) {
            $json['GrossAmountCustomerCurrency'] = $this->grossAmountCustomerCurrency['value'];
        }
        if (!empty($this->documentReferenceNumber)) {
            $json['DocumentReferenceNumber']     = $this->documentReferenceNumber['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CardDayTimeRestrictions implements \JsonSerializable
{
    /**
     * @var array
     */
    private $level = [];

    /**
     * @var bool|null
     */
    private $monday;

    /**
     * @var bool|null
     */
    private $tuesday;

    /**
     * @var bool|null
     */
    private $wednesday;

    /**
     * @var bool|null
     */
    private $thursday;

    /**
     * @var bool|null
     */
    private $friday;

    /**
     * @var bool|null
     */
    private $saturday;

    /**
     * @var bool|null
     */
    private $sunday;

    /**
     * @var array
     */
    private $timeFrom = [];

    /**
     * @var array
     */
    private $timeTo = [];

    /**
     * Returns Level.
     * Describes at which level the restriction is set at.
     *
     * Possible values:
     *
     * OU = Restriction set at ColCo card type
     *
     * Customer = Restriction set at customer card type
     */
    public function getLevel(): ?string
    {
        if (count($this->level) == 0) {
            return null;
        }
        return $this->level['value'];
    }

    /**
     * Sets Level.
     * Describes at which level the restriction is set at.
     *
     * Possible values:
     *
     * OU = Restriction set at ColCo card type
     *
     * Customer = Restriction set at customer card type
     *
     * @maps Level
     */
    public function setLevel(?string $level): void
    {
        $this->level['value'] = $level;
    }

    /**
     * Unsets Level.
     * Describes at which level the restriction is set at.
     *
     * Possible values:
     *
     * OU = Restriction set at ColCo card type
     *
     * Customer = Restriction set at customer card type
     */
    public function unsetLevel(): void
    {
        $this->level = [];
    }

    /**
     * Returns Monday.
     * Whether the transaction is allowed on Mondays or not.
     */
    public function getMonday(): ?bool
    {
        return $this->monday;
    }

    /**
     * Sets Monday.
     * Whether the transaction is allowed on Mondays or not.
     *
     * @maps Monday
     */
    public function setMonday(?bool $monday): void
    {
        $this->monday = $monday;
    }

    /**
     * Returns Tuesday.
     * Whether the transaction is allowed on Tuesdays or not.
     */
    public function getTuesday(): ?bool
    {
        return $this->tuesday;
    }

    /**
     * Sets Tuesday.
     * Whether the transaction is allowed on Tuesdays or not.
     *
     * @maps Tuesday
     */
    public function setTuesday(?bool $tuesday): void
    {
        $this->tuesday = $tuesday;
    }

    /**
     * Returns Wednesday.
     * Whether the transaction is allowed on Wednesdays or not.
     */
    public function getWednesday(): ?bool
    {
        return $this->wednesday;
    }

    /**
     * Sets Wednesday.
     * Whether the transaction is allowed on Wednesdays or not.
     *
     * @maps Wednesday
     */
    public function setWednesday(?bool $wednesday): void
    {
        $this->wednesday = $wednesday;
    }

    /**
     * Returns Thursday.
     * Whether the transaction is allowed on Thursdays or not.
     */
    public function getThursday(): ?bool
    {
        return $this->thursday;
    }

    /**
     * Sets Thursday.
     * Whether the transaction is allowed on Thursdays or not.
     *
     * @maps Thursday
     */
    public function setThursday(?bool $thursday): void
    {
        $this->thursday = $thursday;
    }

    /**
     * Returns Friday.
     * Whether the transaction is allowed on Fridays or not.
     */
    public function getFriday(): ?bool
    {
        return $this->friday;
    }

    /**
     * Sets Friday.
     * Whether the transaction is allowed on Fridays or not.
     *
     * @maps Friday
     */
    public function setFriday(?bool $friday): void
    {
        $this->friday = $friday;
    }

    /**
     * Returns Saturday.
     * Whether the transaction is allowed on Saturdays or not.
     */
    public function getSaturday(): ?bool
    {
        return $this->saturday;
    }

    /**
     * Sets Saturday.
     * Whether the transaction is allowed on Saturdays or not.
     *
     * @maps Saturday
     */
    public function setSaturday(?bool $saturday): void
    {
        $this->saturday = $saturday;
    }

    /**
     * Returns Sunday.
     * Whether the transaction is allowed on Sundays or not.
     */
    public function getSunday(): ?bool
    {
        return $this->sunday;
    }

    /**
     * Sets Sunday.
     * Whether the transaction is allowed on Sundays or not.
     *
     * @maps Sunday
     */
    public function setSunday(?bool $sunday): void
    {
        $this->sunday = $sunday;
    }

    /**
     * Returns Time From.
     * The time in the day from when the transaction is allowed.
     *
     * Format: HH:mm: ss
     *
     * E.g., 21:00:00
     *
     *
     *
     * Note:
     *
     * 1) The client application has to convert the value to the required date-time data type.
     *
     * 2) The value will be 00:00:00 when no restriction set for this field.
     */
    public function getTimeFrom(): ?string
    {
        if (count($this->timeFrom) == 0) {
            return null;
        }
        return $this->timeFrom['value'];
    }

    /**
     * Sets Time From.
     * The time in the day from when the transaction is allowed.
     *
     * Format: HH:mm: ss
     *
     * E.g., 21:00:00
     *
     *
     *
     * Note:
     *
     * 1) The client application has to convert the value to the required date-time data type.
     *
     * 2) The value will be 00:00:00 when no restriction set for this field.
     *
     * @maps TimeFrom
     */
    public function setTimeFrom(?string $timeFrom): void
    {
        $this->timeFrom['value'] = $timeFrom;
    }

    /**
     * Unsets Time From.
     * The time in the day from when the transaction is allowed.
     *
     * Format: HH:mm: ss
     *
     * E.g., 21:00:00
     *
     *
     *
     * Note:
     *
     * 1) The client application has to convert the value to the required date-time data type.
     *
     * 2) The value will be 00:00:00 when no restriction set for this field.
     */
    public function unsetTimeFrom(): void
    {
        $this->timeFrom = [];
    }

    /**
     * Returns Time To.
     * allowed.
     *
     * Format: HH:mm: ss
     *
     * E.g., 21:00:00
     *
     *
     *
     * Note:
     *
     * 1) The client application has to convert the value to the required date-time data type.
     *
     * 2) The value will be 00:00:00 when no restriction set for this field.
     */
    public function getTimeTo(): ?string
    {
        if (count($this->timeTo) == 0) {
            return null;
        }
        return $this->timeTo['value'];
    }

    /**
     * Sets Time To.
     * allowed.
     *
     * Format: HH:mm: ss
     *
     * E.g., 21:00:00
     *
     *
     *
     * Note:
     *
     * 1) The client application has to convert the value to the required date-time data type.
     *
     * 2) The value will be 00:00:00 when no restriction set for this field.
     *
     * @maps TimeTo
     */
    public function setTimeTo(?string $timeTo): void
    {
        $this->timeTo['value'] = $timeTo;
    }

    /**
     * Unsets Time To.
     * allowed.
     *
     * Format: HH:mm: ss
     *
     * E.g., 21:00:00
     *
     *
     *
     * Note:
     *
     * 1) The client application has to convert the value to the required date-time data type.
     *
     * 2) The value will be 00:00:00 when no restriction set for this field.
     */
    public function unsetTimeTo(): void
    {
        $this->timeTo = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->level)) {
            $json['Level']     = $this->level['value'];
        }
        if (isset($this->monday)) {
            $json['Monday']    = $this->monday;
        }
        if (isset($this->tuesday)) {
            $json['Tuesday']   = $this->tuesday;
        }
        if (isset($this->wednesday)) {
            $json['Wednesday'] = $this->wednesday;
        }
        if (isset($this->thursday)) {
            $json['Thursday']  = $this->thursday;
        }
        if (isset($this->friday)) {
            $json['Friday']    = $this->friday;
        }
        if (isset($this->saturday)) {
            $json['Saturday']  = $this->saturday;
        }
        if (isset($this->sunday)) {
            $json['Sunday']    = $this->sunday;
        }
        if (!empty($this->timeFrom)) {
            $json['TimeFrom']  = $this->timeFrom['value'];
        }
        if (!empty($this->timeTo)) {
            $json['TimeTo']    = $this->timeTo['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

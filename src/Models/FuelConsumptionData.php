<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class FuelConsumptionData implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $payerName = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $cardNumber = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $licenseNumber = [];

    /**
     * @var array
     */
    private $initialOdometer = [];

    /**
     * @var array
     */
    private $lastOdometer = [];

    /**
     * @var array
     */
    private $distance = [];

    /**
     * @var array
     */
    private $fuelConsumption = [];

    /**
     * @var array
     */
    private $fuelNetAmount = [];

    /**
     * @var array
     */
    private $discount = [];

    /**
     * @var array
     */
    private $fuelTax = [];

    /**
     * @var array
     */
    private $fuelVolume = [];

    /**
     * @var array
     */
    private $grossNonFuelExpenses = [];

    /**
     * @var array
     */
    private $cO2Produced = [];

    /**
     * @var array
     */
    private $transactionCount = [];

    /**
     * Returns Account Name.
     * Account Name
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Account Name
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Account Name
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Payer Name.
     * Payment customer Name
     */
    public function getPayerName(): ?string
    {
        if (count($this->payerName) == 0) {
            return null;
        }
        return $this->payerName['value'];
    }

    /**
     * Sets Payer Name.
     * Payment customer Name
     *
     * @maps PayerName
     */
    public function setPayerName(?string $payerName): void
    {
        $this->payerName['value'] = $payerName;
    }

    /**
     * Unsets Payer Name.
     * Payment customer Name
     */
    public function unsetPayerName(): void
    {
        $this->payerName = [];
    }

    /**
     * Returns Payer Number.
     * Payment customer number
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payment customer number
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payment customer number
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Card Number.
     * Card PAN
     */
    public function getCardNumber(): ?string
    {
        if (count($this->cardNumber) == 0) {
            return null;
        }
        return $this->cardNumber['value'];
    }

    /**
     * Sets Card Number.
     * Card PAN
     *
     * @maps CardNumber
     */
    public function setCardNumber(?string $cardNumber): void
    {
        $this->cardNumber['value'] = $cardNumber;
    }

    /**
     * Unsets Card Number.
     * Card PAN
     */
    public function unsetCardNumber(): void
    {
        $this->cardNumber = [];
    }

    /**
     * Returns Card Group Id.
     * Card group ID
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card group ID
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card group ID
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Driver Name.
     * Driver name
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver name
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver name
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns License Number.
     * Vehicle registration number
     */
    public function getLicenseNumber(): ?string
    {
        if (count($this->licenseNumber) == 0) {
            return null;
        }
        return $this->licenseNumber['value'];
    }

    /**
     * Sets License Number.
     * Vehicle registration number
     *
     * @maps LicenseNumber
     */
    public function setLicenseNumber(?string $licenseNumber): void
    {
        $this->licenseNumber['value'] = $licenseNumber;
    }

    /**
     * Unsets License Number.
     * Vehicle registration number
     */
    public function unsetLicenseNumber(): void
    {
        $this->licenseNumber = [];
    }

    /**
     * Returns Initial Odometer.
     * First transaction odometer reading
     */
    public function getInitialOdometer(): ?float
    {
        if (count($this->initialOdometer) == 0) {
            return null;
        }
        return $this->initialOdometer['value'];
    }

    /**
     * Sets Initial Odometer.
     * First transaction odometer reading
     *
     * @maps InitialOdometer
     */
    public function setInitialOdometer(?float $initialOdometer): void
    {
        $this->initialOdometer['value'] = $initialOdometer;
    }

    /**
     * Unsets Initial Odometer.
     * First transaction odometer reading
     */
    public function unsetInitialOdometer(): void
    {
        $this->initialOdometer = [];
    }

    /**
     * Returns Last Odometer.
     * Last transaction odometer reading
     */
    public function getLastOdometer(): ?float
    {
        if (count($this->lastOdometer) == 0) {
            return null;
        }
        return $this->lastOdometer['value'];
    }

    /**
     * Sets Last Odometer.
     * Last transaction odometer reading
     *
     * @maps LastOdometer
     */
    public function setLastOdometer(?float $lastOdometer): void
    {
        $this->lastOdometer['value'] = $lastOdometer;
    }

    /**
     * Unsets Last Odometer.
     * Last transaction odometer reading
     */
    public function unsetLastOdometer(): void
    {
        $this->lastOdometer = [];
    }

    /**
     * Returns Distance.
     * Distance in  KM or Miles based on Customer and Colco Settings
     */
    public function getDistance(): ?float
    {
        if (count($this->distance) == 0) {
            return null;
        }
        return $this->distance['value'];
    }

    /**
     * Sets Distance.
     * Distance in  KM or Miles based on Customer and Colco Settings
     *
     * @maps Distance
     */
    public function setDistance(?float $distance): void
    {
        $this->distance['value'] = $distance;
    }

    /**
     * Unsets Distance.
     * Distance in  KM or Miles based on Customer and Colco Settings
     */
    public function unsetDistance(): void
    {
        $this->distance = [];
    }

    /**
     * Returns Fuel Consumption.
     * Total Fuel Consumption.
     */
    public function getFuelConsumption(): ?float
    {
        if (count($this->fuelConsumption) == 0) {
            return null;
        }
        return $this->fuelConsumption['value'];
    }

    /**
     * Sets Fuel Consumption.
     * Total Fuel Consumption.
     *
     * @maps FuelConsumption
     */
    public function setFuelConsumption(?float $fuelConsumption): void
    {
        $this->fuelConsumption['value'] = $fuelConsumption;
    }

    /**
     * Unsets Fuel Consumption.
     * Total Fuel Consumption.
     */
    public function unsetFuelConsumption(): void
    {
        $this->fuelConsumption = [];
    }

    /**
     * Returns Fuel Net Amount.
     * Net Fuel Amount
     */
    public function getFuelNetAmount(): ?float
    {
        if (count($this->fuelNetAmount) == 0) {
            return null;
        }
        return $this->fuelNetAmount['value'];
    }

    /**
     * Sets Fuel Net Amount.
     * Net Fuel Amount
     *
     * @maps FuelNetAmount
     */
    public function setFuelNetAmount(?float $fuelNetAmount): void
    {
        $this->fuelNetAmount['value'] = $fuelNetAmount;
    }

    /**
     * Unsets Fuel Net Amount.
     * Net Fuel Amount
     */
    public function unsetFuelNetAmount(): void
    {
        $this->fuelNetAmount = [];
    }

    /**
     * Returns Discount.
     * Total Discount
     */
    public function getDiscount(): ?float
    {
        if (count($this->discount) == 0) {
            return null;
        }
        return $this->discount['value'];
    }

    /**
     * Sets Discount.
     * Total Discount
     *
     * @maps Discount
     */
    public function setDiscount(?float $discount): void
    {
        $this->discount['value'] = $discount;
    }

    /**
     * Unsets Discount.
     * Total Discount
     */
    public function unsetDiscount(): void
    {
        $this->discount = [];
    }

    /**
     * Returns Fuel Tax.
     * Fuel Tax Amount
     */
    public function getFuelTax(): ?float
    {
        if (count($this->fuelTax) == 0) {
            return null;
        }
        return $this->fuelTax['value'];
    }

    /**
     * Sets Fuel Tax.
     * Fuel Tax Amount
     *
     * @maps FuelTax
     */
    public function setFuelTax(?float $fuelTax): void
    {
        $this->fuelTax['value'] = $fuelTax;
    }

    /**
     * Unsets Fuel Tax.
     * Fuel Tax Amount
     */
    public function unsetFuelTax(): void
    {
        $this->fuelTax = [];
    }

    /**
     * Returns Fuel Volume.
     * Total Fuel Volume in Litres
     */
    public function getFuelVolume(): ?float
    {
        if (count($this->fuelVolume) == 0) {
            return null;
        }
        return $this->fuelVolume['value'];
    }

    /**
     * Sets Fuel Volume.
     * Total Fuel Volume in Litres
     *
     * @maps FuelVolume
     */
    public function setFuelVolume(?float $fuelVolume): void
    {
        $this->fuelVolume['value'] = $fuelVolume;
    }

    /**
     * Unsets Fuel Volume.
     * Total Fuel Volume in Litres
     */
    public function unsetFuelVolume(): void
    {
        $this->fuelVolume = [];
    }

    /**
     * Returns Gross Non Fuel Expenses.
     * Gross Nonfuel Amount
     */
    public function getGrossNonFuelExpenses(): ?float
    {
        if (count($this->grossNonFuelExpenses) == 0) {
            return null;
        }
        return $this->grossNonFuelExpenses['value'];
    }

    /**
     * Sets Gross Non Fuel Expenses.
     * Gross Nonfuel Amount
     *
     * @maps GrossNonFuelExpenses
     */
    public function setGrossNonFuelExpenses(?float $grossNonFuelExpenses): void
    {
        $this->grossNonFuelExpenses['value'] = $grossNonFuelExpenses;
    }

    /**
     * Unsets Gross Non Fuel Expenses.
     * Gross Nonfuel Amount
     */
    public function unsetGrossNonFuelExpenses(): void
    {
        $this->grossNonFuelExpenses = [];
    }

    /**
     * Returns C O2 Produced.
     * Total Co2 produced
     */
    public function getCO2Produced(): ?float
    {
        if (count($this->cO2Produced) == 0) {
            return null;
        }
        return $this->cO2Produced['value'];
    }

    /**
     * Sets C O2 Produced.
     * Total Co2 produced
     *
     * @maps CO2Produced
     */
    public function setCO2Produced(?float $cO2Produced): void
    {
        $this->cO2Produced['value'] = $cO2Produced;
    }

    /**
     * Unsets C O2 Produced.
     * Total Co2 produced
     */
    public function unsetCO2Produced(): void
    {
        $this->cO2Produced = [];
    }

    /**
     * Returns Transaction Count.
     * Total Transaction Count
     */
    public function getTransactionCount(): ?float
    {
        if (count($this->transactionCount) == 0) {
            return null;
        }
        return $this->transactionCount['value'];
    }

    /**
     * Sets Transaction Count.
     * Total Transaction Count
     *
     * @maps TransactionCount
     */
    public function setTransactionCount(?float $transactionCount): void
    {
        $this->transactionCount['value'] = $transactionCount;
    }

    /**
     * Unsets Transaction Count.
     * Total Transaction Count
     */
    public function unsetTransactionCount(): void
    {
        $this->transactionCount = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountName)) {
            $json['AccountName']          = $this->accountName['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']        = $this->accountNumber['value'];
        }
        if (!empty($this->payerName)) {
            $json['PayerName']            = $this->payerName['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']          = $this->payerNumber['value'];
        }
        if (!empty($this->cardNumber)) {
            $json['CardNumber']           = $this->cardNumber['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']          = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']        = $this->cardGroupName['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']           = $this->driverName['value'];
        }
        if (!empty($this->licenseNumber)) {
            $json['LicenseNumber']        = $this->licenseNumber['value'];
        }
        if (!empty($this->initialOdometer)) {
            $json['InitialOdometer']      = $this->initialOdometer['value'];
        }
        if (!empty($this->lastOdometer)) {
            $json['LastOdometer']         = $this->lastOdometer['value'];
        }
        if (!empty($this->distance)) {
            $json['Distance']             = $this->distance['value'];
        }
        if (!empty($this->fuelConsumption)) {
            $json['FuelConsumption']      = $this->fuelConsumption['value'];
        }
        if (!empty($this->fuelNetAmount)) {
            $json['FuelNetAmount']        = $this->fuelNetAmount['value'];
        }
        if (!empty($this->discount)) {
            $json['Discount']             = $this->discount['value'];
        }
        if (!empty($this->fuelTax)) {
            $json['FuelTax']              = $this->fuelTax['value'];
        }
        if (!empty($this->fuelVolume)) {
            $json['FuelVolume']           = $this->fuelVolume['value'];
        }
        if (!empty($this->grossNonFuelExpenses)) {
            $json['GrossNonFuelExpenses'] = $this->grossNonFuelExpenses['value'];
        }
        if (!empty($this->cO2Produced)) {
            $json['CO2Produced']          = $this->cO2Produced['value'];
        }
        if (!empty($this->transactionCount)) {
            $json['TransactionCount']     = $this->transactionCount['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

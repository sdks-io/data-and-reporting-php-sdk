<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use ShellDataReportingAPIsLib\Utils\DateTimeHelper;
use stdClass;

class PricedResponseData implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $additional1 = [];

    /**
     * @var array
     */
    private $additional2 = [];

    /**
     * @var array
     */
    private $additional3 = [];

    /**
     * @var array
     */
    private $additional4 = [];

    /**
     * @var array
     */
    private $allowClearing = [];

    /**
     * @var array
     */
    private $authorisationCode = [];

    /**
     * @var array
     */
    private $transactionStatus = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $cardExpiryPeriod = [];

    /**
     * @var array
     */
    private $cardExpiry = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $issuerCode = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $releaseCode = [];

    /**
     * @var array
     */
    private $cardSequenceNumber = [];

    /**
     * @var array
     */
    private $cardType = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $unitDiscountInvoiceCurrency = [];

    /**
     * @var float|null
     */
    private $colCoExchangeRate;

    /**
     * @var array
     */
    private $invoiceCurrencySymbol = [];

    /**
     * @var array
     */
    private $correctionFlag = [];

    /**
     * @var array
     */
    private $cRMNumber = [];

    /**
     * @var array
     */
    private $customerCountry = [];

    /**
     * @var array
     */
    private $customerCurrencyCode = [];

    /**
     * @var array
     */
    private $customerCurrencySymbol = [];

    /**
     * @var array
     */
    private $rebateonNetAmountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $effectiveDiscountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $effectiveUnitDiscountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $unitPriceInInvoiceCurrency = [];

    /**
     * @var array
     */
    private $invoiceTax = [];

    /**
     * @var array
     */
    private $invoiceGrossAmount = [];

    /**
     * @var array
     */
    private $invoiceNetAmount = [];

    /**
     * @var array
     */
    private $vATonNetAmountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $customerRetailPriceUnitGross = [];

    /**
     * @var array
     */
    private $customerRetailValueTotalGross = [];

    /**
     * @var array
     */
    private $customerRetailValueTotalNet = [];

    /**
     * @var array
     */
    private $transactionTypeDescription = [];

    /**
     * @var array
     */
    private $rebateonNetAmountInTransactionCurrency = [];

    /**
     * @var array
     */
    private $effectiveDiscountInTrxCurrency = [];

    /**
     * @var array
     */
    private $delCoToColCoExchangeRate = [];

    /**
     * @var int[]|null
     */
    private $cards;

    /**
     * @var array
     */
    private $unitDiscountTransactionCurrency = [];

    /**
     * @var array
     */
    private $transactionGrossAmount = [];

    /**
     * @var array
     */
    private $transactionNetAmount = [];

    /**
     * @var array
     */
    private $transactionTax = [];

    /**
     * @var array
     */
    private $vATonNetAmount = [];

    /**
     * @var array
     */
    private $delcoListPriceUnitNet = [];

    /**
     * @var array
     */
    private $delcoRetailPriceUnitGross = [];

    /**
     * @var array
     */
    private $unitPriceInTransactionCurrency = [];

    /**
     * @var array
     */
    private $delcoRetailPriceUnitNet = [];

    /**
     * @var array
     */
    private $delcoRetailValueTotalGross = [];

    /**
     * @var array
     */
    private $delcoRetailValueTotalNet = [];

    /**
     * @var array
     */
    private $transactionCurrencySymbol = [];

    /**
     * @var array
     */
    private $discountType = [];

    /**
     * @var array
     */
    private $disputeStatus = ['value' => false];

    /**
     * @var bool|null
     */
    private $isShellSite = false;

    /**
     * @var array
     */
    private $fleetIdInput = [];

    /**
     * @var array
     */
    private $incomingProductCode = [];

    /**
     * @var array
     */
    private $postingDate = [];

    /**
     * @var array
     */
    private $postingTime = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $productGroupId = [];

    /**
     * @var array
     */
    private $incomingCurrencyCode = [];

    /**
     * @var array
     */
    private $incomingSiteDescription = [];

    /**
     * @var array
     */
    private $location = [];

    /**
     * @var array
     */
    private $siteName = [];

    /**
     * @var array
     */
    private $siteCode = [];

    /**
     * @var array
     */
    private $incomingSiteNumber = [];

    /**
     * @var array
     */
    private $invoiceCurrencyCode = [];

    /**
     * @var array
     */
    private $invoiceDate = [];

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $fuelProduct = [];

    /**
     * @var array
     */
    private $vATApplicable = [];

    /**
     * @var array
     */
    private $payerName = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $parentCustomerNumber = [];

    /**
     * @var array
     */
    private $payerGroup = [];

    /**
     * @var array
     */
    private $payerGroupName = [];

    /**
     * @var array
     */
    private $checkDigit = [];

    /**
     * @var array
     */
    private $netInvoiceIndicator = [];

    /**
     * @var array
     */
    private $delcoCode = [];

    /**
     * @var array
     */
    private $networkCode = [];

    /**
     * @var array
     */
    private $purchasedInCountry = [];

    /**
     * @var array
     */
    private $siteCountry = [];

    /**
     * @var array
     */
    private $vATCountry = [];

    /**
     * @var array
     */
    private $delcoName = [];

    /**
     * @var array
     */
    private $network = [];

    /**
     * @var array
     */
    private $odometerInput = [];

    /**
     * @var array
     */
    private $originalSalesItemId = [];

    /**
     * @var array
     */
    private $fleetIDDescription = [];

    /**
     * @var array
     */
    private $parentCustomerId = [];

    /**
     * @var array
     */
    private $pINIndicator = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $purchasedInCountryCode = [];

    /**
     * @var array
     */
    private $quantity = [];

    /**
     * @var array
     */
    private $rebateRate = [];

    /**
     * @var array
     */
    private $receiptNumber = [];

    /**
     * @var string|null
     */
    private $refundFlag;

    /**
     * @var array
     */
    private $siteGroupId = [];

    /**
     * @var array
     */
    private $siteGroupName = [];

    /**
     * @var array
     */
    private $latitude = [];

    /**
     * @var array
     */
    private $longitude = [];

    /**
     * @var array
     */
    private $delCoExchangeRate = [];

    /**
     * @var array
     */
    private $euroRebateAmount = [];

    /**
     * @var array
     */
    private $netEuroAmount = [];

    /**
     * @var array
     */
    private $euroVATAmount = [];

    /**
     * @var array
     */
    private $parentCustomerName = [];

    /**
     * @var array
     */
    private $isInvoiced = ['value' => false];

    /**
     * @var array
     */
    private $transactionCurrencyCode = [];

    /**
     * @var array
     */
    private $creditDebitCode = [];

    /**
     * @var array
     */
    private $transactionDate = [];

    /**
     * @var array
     */
    private $transactionTime = [];

    /**
     * @var array
     */
    private $transactionItemId = [];

    /**
     * @var array
     */
    private $trnIdentifier = [];

    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $transactionLine = [];

    /**
     * @var array
     */
    private $transactionType = [];

    /**
     * @var array
     */
    private $uTCOffset = [];

    /**
     * @var array
     */
    private $vATCategory = [];

    /**
     * @var array
     */
    private $vATRate = [];

    /**
     * @var array
     */
    private $vehicleRegistration = [];

    /**
     * @var array
     */
    private $isCancelled = [];

    /**
     * @var array
     */
    private $colCoGrossAmount = [];

    /**
     * @var array
     */
    private $colCoNetAmount = [];

    /**
     * @var array
     */
    private $colCoVATAmount = [];

    /**
     * @var array
     */
    private $originalCurrencySymbol = [];

    /**
     * @var array
     */
    private $originalCurrencyCode = [];

    /**
     * @var array
     */
    private $originalVATAmount = [];

    /**
     * @var array
     */
    private $embossText = [];

    /**
     * @var array
     */
    private $originalExchangeRate = [];

    /**
     * @var array
     */
    private $originalTransactionItemInvoiceDate = [];

    /**
     * @var array
     */
    private $feeTypeId = [];

    /**
     * @var array
     */
    private $lineItemDescription = ['value' => false];

    /**
     * @var array
     */
    private $feeRuleDescription = [];

    /**
     * @var array
     */
    private $frequency = [];

    /**
     * @var array
     */
    private $feeRuleId = [];

    /**
     * @var array
     */
    private $systemEntryDate = [];

    /**
     * @var array
     */
    private $systemEntryTime = [];

    /**
     * @var array
     */
    private $isManual = [];

    /**
     * @var array
     */
    private $originalTransactionItemId = [];

    /**
     * @var array
     */
    private $originalTransactionItemInvoiceNumber = [];

    /**
     * @var array
     */
    private $originalTransactionItemInvoiceId = [];

    /**
     * @var array
     */
    private $payerShortName = [];

    /**
     * @var array
     */
    private $reverseCharge = [];

    /**
     * @var array
     */
    private $originalGrossAmount = [];

    /**
     * @var array
     */
    private $originalNetAmount = [];

    /**
     * @var array
     */
    private $unitOfMeasure = [];

    /**
     * @var array
     */
    private $roadType = [];

    /**
     * @var array
     */
    private $customerCountryIsoCode = [];

    /**
     * @var array
     */
    private $eVOperator = [];

    /**
     * @var array
     */
    private $eVSerialId = [];

    /**
     * @var array
     */
    private $eVChargePointSerial = [];

    /**
     * @var array
     */
    private $eVChargePointConnectorType = [];

    /**
     * @var array
     */
    private $eVChargePointConnectorTypeDescription = [];

    /**
     * @var array
     */
    private $eVChargeDuration = [];

    /**
     * @var array
     */
    private $eVChargeStartDate = [];

    /**
     * @var array
     */
    private $eVChargeStartTime = [];

    /**
     * @var array
     */
    private $eVChargeEndDate = [];

    /**
     * @var array
     */
    private $eVChargeEndTime = [];

    /**
     * @var array
     */
    private $hostingCollectingCompanyNumber = [];

    /**
     * @var array
     */
    private $transactionId = [];

    /**
     * @var array
     */
    private $fuelOnly = [];

    /**
     * Returns Account Name.
     * Name of the account
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Name of the account
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Name of the account
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Account Id.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * AccountNumber of the selected account.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * AccountNumber of the selected account.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * AccountNumber of the selected account.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Nick name of the account
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Nick name of the account
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Nick name of the account
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Additional 1.
     * Addtional SerialId or endpoint Id
     */
    public function getAdditional1(): ?string
    {
        if (count($this->additional1) == 0) {
            return null;
        }
        return $this->additional1['value'];
    }

    /**
     * Sets Additional 1.
     * Addtional SerialId or endpoint Id
     *
     * @maps Additional1
     */
    public function setAdditional1(?string $additional1): void
    {
        $this->additional1['value'] = $additional1;
    }

    /**
     * Unsets Additional 1.
     * Addtional SerialId or endpoint Id
     */
    public function unsetAdditional1(): void
    {
        $this->additional1 = [];
    }

    /**
     * Returns Additional 2.
     * Addtional SerialId or endpoint Id
     */
    public function getAdditional2(): ?string
    {
        if (count($this->additional2) == 0) {
            return null;
        }
        return $this->additional2['value'];
    }

    /**
     * Sets Additional 2.
     * Addtional SerialId or endpoint Id
     *
     * @maps Additional2
     */
    public function setAdditional2(?string $additional2): void
    {
        $this->additional2['value'] = $additional2;
    }

    /**
     * Unsets Additional 2.
     * Addtional SerialId or endpoint Id
     */
    public function unsetAdditional2(): void
    {
        $this->additional2 = [];
    }

    /**
     * Returns Additional 3.
     * Addtional SerialId or endpoint Id
     */
    public function getAdditional3(): ?string
    {
        if (count($this->additional3) == 0) {
            return null;
        }
        return $this->additional3['value'];
    }

    /**
     * Sets Additional 3.
     * Addtional SerialId or endpoint Id
     *
     * @maps Additional3
     */
    public function setAdditional3(?string $additional3): void
    {
        $this->additional3['value'] = $additional3;
    }

    /**
     * Unsets Additional 3.
     * Addtional SerialId or endpoint Id
     */
    public function unsetAdditional3(): void
    {
        $this->additional3 = [];
    }

    /**
     * Returns Additional 4.
     * Addtional SerialId or endpoint Id
     */
    public function getAdditional4(): ?string
    {
        if (count($this->additional4) == 0) {
            return null;
        }
        return $this->additional4['value'];
    }

    /**
     * Sets Additional 4.
     * Addtional SerialId or endpoint Id
     *
     * @maps Additional4
     */
    public function setAdditional4(?string $additional4): void
    {
        $this->additional4['value'] = $additional4;
    }

    /**
     * Unsets Additional 4.
     * Addtional SerialId or endpoint Id
     */
    public function unsetAdditional4(): void
    {
        $this->additional4 = [];
    }

    /**
     * Returns Allow Clearing.
     * Allow clearings
     */
    public function getAllowClearing(): ?string
    {
        if (count($this->allowClearing) == 0) {
            return null;
        }
        return $this->allowClearing['value'];
    }

    /**
     * Sets Allow Clearing.
     * Allow clearings
     *
     * @maps AllowClearing
     */
    public function setAllowClearing(?string $allowClearing): void
    {
        $this->allowClearing['value'] = $allowClearing;
    }

    /**
     * Unsets Allow Clearing.
     * Allow clearings
     */
    public function unsetAllowClearing(): void
    {
        $this->allowClearing = [];
    }

    /**
     * Returns Authorisation Code.
     * Autorization code
     */
    public function getAuthorisationCode(): ?int
    {
        if (count($this->authorisationCode) == 0) {
            return null;
        }
        return $this->authorisationCode['value'];
    }

    /**
     * Sets Authorisation Code.
     * Autorization code
     *
     * @maps AuthorisationCode
     */
    public function setAuthorisationCode(?int $authorisationCode): void
    {
        $this->authorisationCode['value'] = $authorisationCode;
    }

    /**
     * Unsets Authorisation Code.
     * Autorization code
     */
    public function unsetAuthorisationCode(): void
    {
        $this->authorisationCode = [];
    }

    /**
     * Returns Transaction Status.
     * Status of the transaction
     */
    public function getTransactionStatus(): ?string
    {
        if (count($this->transactionStatus) == 0) {
            return null;
        }
        return $this->transactionStatus['value'];
    }

    /**
     * Sets Transaction Status.
     * Status of the transaction
     *
     * @maps TransactionStatus
     */
    public function setTransactionStatus(?string $transactionStatus): void
    {
        $this->transactionStatus['value'] = $transactionStatus;
    }

    /**
     * Unsets Transaction Status.
     * Status of the transaction
     */
    public function unsetTransactionStatus(): void
    {
        $this->transactionStatus = [];
    }

    /**
     * Returns Driver Name.
     * Driver Name of Card record
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver Name of Card record
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver Name of Card record
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Card Expiry Period.
     * Expiry period of the card
     */
    public function getCardExpiryPeriod(): ?int
    {
        if (count($this->cardExpiryPeriod) == 0) {
            return null;
        }
        return $this->cardExpiryPeriod['value'];
    }

    /**
     * Sets Card Expiry Period.
     * Expiry period of the card
     *
     * @maps CardExpiryPeriod
     */
    public function setCardExpiryPeriod(?int $cardExpiryPeriod): void
    {
        $this->cardExpiryPeriod['value'] = $cardExpiryPeriod;
    }

    /**
     * Unsets Card Expiry Period.
     * Expiry period of the card
     */
    public function unsetCardExpiryPeriod(): void
    {
        $this->cardExpiryPeriod = [];
    }

    /**
     * Returns Card Expiry.
     * Card Expiry Date
     */
    public function getCardExpiry(): ?\DateTime
    {
        if (count($this->cardExpiry) == 0) {
            return null;
        }
        return $this->cardExpiry['value'];
    }

    /**
     * Sets Card Expiry.
     * Card Expiry Date
     *
     * @maps CardExpiry
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setCardExpiry(?\DateTime $cardExpiry): void
    {
        $this->cardExpiry['value'] = $cardExpiry;
    }

    /**
     * Unsets Card Expiry.
     * Card Expiry Date
     */
    public function unsetCardExpiry(): void
    {
        $this->cardExpiry = [];
    }

    /**
     * Returns Card Group Id.
     * Card Group Code
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card Group Code
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card Group Code
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Group nmae of the card
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Group nmae of the card
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Group nmae of the card
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Issuer Code.
     * Issuer code
     */
    public function getIssuerCode(): ?int
    {
        if (count($this->issuerCode) == 0) {
            return null;
        }
        return $this->issuerCode['value'];
    }

    /**
     * Sets Issuer Code.
     * Issuer code
     *
     * @maps IssuerCode
     */
    public function setIssuerCode(?int $issuerCode): void
    {
        $this->issuerCode['value'] = $issuerCode;
    }

    /**
     * Unsets Issuer Code.
     * Issuer code
     */
    public function unsetIssuerCode(): void
    {
        $this->issuerCode = [];
    }

    /**
     * Returns Card PAN.
     * Full Card PAN
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Full Card PAN
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Full Card PAN
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns Release Code.
     * Release code
     */
    public function getReleaseCode(): ?int
    {
        if (count($this->releaseCode) == 0) {
            return null;
        }
        return $this->releaseCode['value'];
    }

    /**
     * Sets Release Code.
     * Release code
     *
     * @maps ReleaseCode
     */
    public function setReleaseCode(?int $releaseCode): void
    {
        $this->releaseCode['value'] = $releaseCode;
    }

    /**
     * Unsets Release Code.
     * Release code
     */
    public function unsetReleaseCode(): void
    {
        $this->releaseCode = [];
    }

    /**
     * Returns Card Sequence Number.
     * Sequesnce number of the card
     */
    public function getCardSequenceNumber(): ?int
    {
        if (count($this->cardSequenceNumber) == 0) {
            return null;
        }
        return $this->cardSequenceNumber['value'];
    }

    /**
     * Sets Card Sequence Number.
     * Sequesnce number of the card
     *
     * @maps CardSequenceNumber
     */
    public function setCardSequenceNumber(?int $cardSequenceNumber): void
    {
        $this->cardSequenceNumber['value'] = $cardSequenceNumber;
    }

    /**
     * Unsets Card Sequence Number.
     * Sequesnce number of the card
     */
    public function unsetCardSequenceNumber(): void
    {
        $this->cardSequenceNumber = [];
    }

    /**
     * Returns Card Type.
     * Type of card
     */
    public function getCardType(): ?string
    {
        if (count($this->cardType) == 0) {
            return null;
        }
        return $this->cardType['value'];
    }

    /**
     * Sets Card Type.
     * Type of card
     *
     * @maps CardType
     */
    public function setCardType(?string $cardType): void
    {
        $this->cardType['value'] = $cardType;
    }

    /**
     * Unsets Card Type.
     * Type of card
     */
    public function unsetCardType(): void
    {
        $this->cardType = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     */
    public function getColCoCode(): ?string
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?string $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Unit Discount Invoice Currency.
     * Unit discount Invoice currency
     */
    public function getUnitDiscountInvoiceCurrency(): ?float
    {
        if (count($this->unitDiscountInvoiceCurrency) == 0) {
            return null;
        }
        return $this->unitDiscountInvoiceCurrency['value'];
    }

    /**
     * Sets Unit Discount Invoice Currency.
     * Unit discount Invoice currency
     *
     * @maps UnitDiscountInvoiceCurrency
     */
    public function setUnitDiscountInvoiceCurrency(?float $unitDiscountInvoiceCurrency): void
    {
        $this->unitDiscountInvoiceCurrency['value'] = $unitDiscountInvoiceCurrency;
    }

    /**
     * Unsets Unit Discount Invoice Currency.
     * Unit discount Invoice currency
     */
    public function unsetUnitDiscountInvoiceCurrency(): void
    {
        $this->unitDiscountInvoiceCurrency = [];
    }

    /**
     * Returns Col Co Exchange Rate.
     * Colco exchange rate
     */
    public function getColCoExchangeRate(): ?float
    {
        return $this->colCoExchangeRate;
    }

    /**
     * Sets Col Co Exchange Rate.
     * Colco exchange rate
     *
     * @maps ColCoExchangeRate
     */
    public function setColCoExchangeRate(?float $colCoExchangeRate): void
    {
        $this->colCoExchangeRate = $colCoExchangeRate;
    }

    /**
     * Returns Invoice Currency Symbol.
     * Currency symbol on which the invoice was raised
     */
    public function getInvoiceCurrencySymbol(): ?string
    {
        if (count($this->invoiceCurrencySymbol) == 0) {
            return null;
        }
        return $this->invoiceCurrencySymbol['value'];
    }

    /**
     * Sets Invoice Currency Symbol.
     * Currency symbol on which the invoice was raised
     *
     * @maps InvoiceCurrencySymbol
     */
    public function setInvoiceCurrencySymbol(?string $invoiceCurrencySymbol): void
    {
        $this->invoiceCurrencySymbol['value'] = $invoiceCurrencySymbol;
    }

    /**
     * Unsets Invoice Currency Symbol.
     * Currency symbol on which the invoice was raised
     */
    public function unsetInvoiceCurrencySymbol(): void
    {
        $this->invoiceCurrencySymbol = [];
    }

    /**
     * Returns Correction Flag.
     * Is there any correction
     */
    public function getCorrectionFlag(): ?bool
    {
        if (count($this->correctionFlag) == 0) {
            return null;
        }
        return $this->correctionFlag['value'];
    }

    /**
     * Sets Correction Flag.
     * Is there any correction
     *
     * @maps CorrectionFlag
     */
    public function setCorrectionFlag(?bool $correctionFlag): void
    {
        $this->correctionFlag['value'] = $correctionFlag;
    }

    /**
     * Unsets Correction Flag.
     * Is there any correction
     */
    public function unsetCorrectionFlag(): void
    {
        $this->correctionFlag = [];
    }

    /**
     * Returns C RM Number.
     * CRM number
     */
    public function getCRMNumber(): ?float
    {
        if (count($this->cRMNumber) == 0) {
            return null;
        }
        return $this->cRMNumber['value'];
    }

    /**
     * Sets C RM Number.
     * CRM number
     *
     * @maps CRMNumber
     */
    public function setCRMNumber(?float $cRMNumber): void
    {
        $this->cRMNumber['value'] = $cRMNumber;
    }

    /**
     * Unsets C RM Number.
     * CRM number
     */
    public function unsetCRMNumber(): void
    {
        $this->cRMNumber = [];
    }

    /**
     * Returns Customer Country.
     * Customer country
     */
    public function getCustomerCountry(): ?string
    {
        if (count($this->customerCountry) == 0) {
            return null;
        }
        return $this->customerCountry['value'];
    }

    /**
     * Sets Customer Country.
     * Customer country
     *
     * @maps CustomerCountry
     */
    public function setCustomerCountry(?string $customerCountry): void
    {
        $this->customerCountry['value'] = $customerCountry;
    }

    /**
     * Unsets Customer Country.
     * Customer country
     */
    public function unsetCustomerCountry(): void
    {
        $this->customerCountry = [];
    }

    /**
     * Returns Customer Currency Code.
     * Curreny which customer uses to transact.
     */
    public function getCustomerCurrencyCode(): ?string
    {
        if (count($this->customerCurrencyCode) == 0) {
            return null;
        }
        return $this->customerCurrencyCode['value'];
    }

    /**
     * Sets Customer Currency Code.
     * Curreny which customer uses to transact.
     *
     * @maps CustomerCurrencyCode
     */
    public function setCustomerCurrencyCode(?string $customerCurrencyCode): void
    {
        $this->customerCurrencyCode['value'] = $customerCurrencyCode;
    }

    /**
     * Unsets Customer Currency Code.
     * Curreny which customer uses to transact.
     */
    public function unsetCustomerCurrencyCode(): void
    {
        $this->customerCurrencyCode = [];
    }

    /**
     * Returns Customer Currency Symbol.
     * Custome currency symbol
     */
    public function getCustomerCurrencySymbol(): ?string
    {
        if (count($this->customerCurrencySymbol) == 0) {
            return null;
        }
        return $this->customerCurrencySymbol['value'];
    }

    /**
     * Sets Customer Currency Symbol.
     * Custome currency symbol
     *
     * @maps CustomerCurrencySymbol
     */
    public function setCustomerCurrencySymbol(?string $customerCurrencySymbol): void
    {
        $this->customerCurrencySymbol['value'] = $customerCurrencySymbol;
    }

    /**
     * Unsets Customer Currency Symbol.
     * Custome currency symbol
     */
    public function unsetCustomerCurrencySymbol(): void
    {
        $this->customerCurrencySymbol = [];
    }

    /**
     * Returns Rebateon Net Amount in Customer Currency.
     * Rebate on net amount in customer currency
     */
    public function getRebateonNetAmountInCustomerCurrency(): ?float
    {
        if (count($this->rebateonNetAmountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->rebateonNetAmountInCustomerCurrency['value'];
    }

    /**
     * Sets Rebateon Net Amount in Customer Currency.
     * Rebate on net amount in customer currency
     *
     * @maps RebateonNetAmountInCustomerCurrency
     */
    public function setRebateonNetAmountInCustomerCurrency(?float $rebateonNetAmountInCustomerCurrency): void
    {
        $this->rebateonNetAmountInCustomerCurrency['value'] = $rebateonNetAmountInCustomerCurrency;
    }

    /**
     * Unsets Rebateon Net Amount in Customer Currency.
     * Rebate on net amount in customer currency
     */
    public function unsetRebateonNetAmountInCustomerCurrency(): void
    {
        $this->rebateonNetAmountInCustomerCurrency = [];
    }

    /**
     * Returns Effective Discount in Customer Currency.
     * Effective discount in customers currency
     */
    public function getEffectiveDiscountInCustomerCurrency(): ?float
    {
        if (count($this->effectiveDiscountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->effectiveDiscountInCustomerCurrency['value'];
    }

    /**
     * Sets Effective Discount in Customer Currency.
     * Effective discount in customers currency
     *
     * @maps EffectiveDiscountInCustomerCurrency
     */
    public function setEffectiveDiscountInCustomerCurrency(?float $effectiveDiscountInCustomerCurrency): void
    {
        $this->effectiveDiscountInCustomerCurrency['value'] = $effectiveDiscountInCustomerCurrency;
    }

    /**
     * Unsets Effective Discount in Customer Currency.
     * Effective discount in customers currency
     */
    public function unsetEffectiveDiscountInCustomerCurrency(): void
    {
        $this->effectiveDiscountInCustomerCurrency = [];
    }

    /**
     * Returns Effective Unit Discount in Customer Currency.
     * effectiive unit discount in customers currency
     */
    public function getEffectiveUnitDiscountInCustomerCurrency(): ?float
    {
        if (count($this->effectiveUnitDiscountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->effectiveUnitDiscountInCustomerCurrency['value'];
    }

    /**
     * Sets Effective Unit Discount in Customer Currency.
     * effectiive unit discount in customers currency
     *
     * @maps EffectiveUnitDiscountInCustomerCurrency
     */
    public function setEffectiveUnitDiscountInCustomerCurrency(?float $effectiveUnitDiscountInCustomerCurrency): void
    {
        $this->effectiveUnitDiscountInCustomerCurrency['value'] = $effectiveUnitDiscountInCustomerCurrency;
    }

    /**
     * Unsets Effective Unit Discount in Customer Currency.
     * effectiive unit discount in customers currency
     */
    public function unsetEffectiveUnitDiscountInCustomerCurrency(): void
    {
        $this->effectiveUnitDiscountInCustomerCurrency = [];
    }

    /**
     * Returns Unit Price in Invoice Currency.
     * Unitpricing in invoice currency
     */
    public function getUnitPriceInInvoiceCurrency(): ?float
    {
        if (count($this->unitPriceInInvoiceCurrency) == 0) {
            return null;
        }
        return $this->unitPriceInInvoiceCurrency['value'];
    }

    /**
     * Sets Unit Price in Invoice Currency.
     * Unitpricing in invoice currency
     *
     * @maps UnitPriceInInvoiceCurrency
     */
    public function setUnitPriceInInvoiceCurrency(?float $unitPriceInInvoiceCurrency): void
    {
        $this->unitPriceInInvoiceCurrency['value'] = $unitPriceInInvoiceCurrency;
    }

    /**
     * Unsets Unit Price in Invoice Currency.
     * Unitpricing in invoice currency
     */
    public function unsetUnitPriceInInvoiceCurrency(): void
    {
        $this->unitPriceInInvoiceCurrency = [];
    }

    /**
     * Returns Invoice Tax.
     * Invoice tax
     */
    public function getInvoiceTax(): ?float
    {
        if (count($this->invoiceTax) == 0) {
            return null;
        }
        return $this->invoiceTax['value'];
    }

    /**
     * Sets Invoice Tax.
     * Invoice tax
     *
     * @maps InvoiceTax
     */
    public function setInvoiceTax(?float $invoiceTax): void
    {
        $this->invoiceTax['value'] = $invoiceTax;
    }

    /**
     * Unsets Invoice Tax.
     * Invoice tax
     */
    public function unsetInvoiceTax(): void
    {
        $this->invoiceTax = [];
    }

    /**
     * Returns Invoice Gross Amount.
     * Invoice amount befor tax
     */
    public function getInvoiceGrossAmount(): ?float
    {
        if (count($this->invoiceGrossAmount) == 0) {
            return null;
        }
        return $this->invoiceGrossAmount['value'];
    }

    /**
     * Sets Invoice Gross Amount.
     * Invoice amount befor tax
     *
     * @maps InvoiceGrossAmount
     */
    public function setInvoiceGrossAmount(?float $invoiceGrossAmount): void
    {
        $this->invoiceGrossAmount['value'] = $invoiceGrossAmount;
    }

    /**
     * Unsets Invoice Gross Amount.
     * Invoice amount befor tax
     */
    public function unsetInvoiceGrossAmount(): void
    {
        $this->invoiceGrossAmount = [];
    }

    /**
     * Returns Invoice Net Amount.
     * Invoice amount after tax
     */
    public function getInvoiceNetAmount(): ?float
    {
        if (count($this->invoiceNetAmount) == 0) {
            return null;
        }
        return $this->invoiceNetAmount['value'];
    }

    /**
     * Sets Invoice Net Amount.
     * Invoice amount after tax
     *
     * @maps InvoiceNetAmount
     */
    public function setInvoiceNetAmount(?float $invoiceNetAmount): void
    {
        $this->invoiceNetAmount['value'] = $invoiceNetAmount;
    }

    /**
     * Unsets Invoice Net Amount.
     * Invoice amount after tax
     */
    public function unsetInvoiceNetAmount(): void
    {
        $this->invoiceNetAmount = [];
    }

    /**
     * Returns V a Ton Net Amount in Customer Currency.
     * Vat on net amount in customer currency
     */
    public function getVATonNetAmountInCustomerCurrency(): ?float
    {
        if (count($this->vATonNetAmountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->vATonNetAmountInCustomerCurrency['value'];
    }

    /**
     * Sets V a Ton Net Amount in Customer Currency.
     * Vat on net amount in customer currency
     *
     * @maps VATonNetAmountInCustomerCurrency
     */
    public function setVATonNetAmountInCustomerCurrency(?float $vATonNetAmountInCustomerCurrency): void
    {
        $this->vATonNetAmountInCustomerCurrency['value'] = $vATonNetAmountInCustomerCurrency;
    }

    /**
     * Unsets V a Ton Net Amount in Customer Currency.
     * Vat on net amount in customer currency
     */
    public function unsetVATonNetAmountInCustomerCurrency(): void
    {
        $this->vATonNetAmountInCustomerCurrency = [];
    }

    /**
     * Returns Customer Retail Price Unit Gross.
     * Customer retail unit price before tax
     */
    public function getCustomerRetailPriceUnitGross(): ?float
    {
        if (count($this->customerRetailPriceUnitGross) == 0) {
            return null;
        }
        return $this->customerRetailPriceUnitGross['value'];
    }

    /**
     * Sets Customer Retail Price Unit Gross.
     * Customer retail unit price before tax
     *
     * @maps CustomerRetailPriceUnitGross
     */
    public function setCustomerRetailPriceUnitGross(?float $customerRetailPriceUnitGross): void
    {
        $this->customerRetailPriceUnitGross['value'] = $customerRetailPriceUnitGross;
    }

    /**
     * Unsets Customer Retail Price Unit Gross.
     * Customer retail unit price before tax
     */
    public function unsetCustomerRetailPriceUnitGross(): void
    {
        $this->customerRetailPriceUnitGross = [];
    }

    /**
     * Returns Customer Retail Value Total Gross.
     * Total Customer retail value before tax
     */
    public function getCustomerRetailValueTotalGross(): ?float
    {
        if (count($this->customerRetailValueTotalGross) == 0) {
            return null;
        }
        return $this->customerRetailValueTotalGross['value'];
    }

    /**
     * Sets Customer Retail Value Total Gross.
     * Total Customer retail value before tax
     *
     * @maps CustomerRetailValueTotalGross
     */
    public function setCustomerRetailValueTotalGross(?float $customerRetailValueTotalGross): void
    {
        $this->customerRetailValueTotalGross['value'] = $customerRetailValueTotalGross;
    }

    /**
     * Unsets Customer Retail Value Total Gross.
     * Total Customer retail value before tax
     */
    public function unsetCustomerRetailValueTotalGross(): void
    {
        $this->customerRetailValueTotalGross = [];
    }

    /**
     * Returns Customer Retail Value Total Net.
     * Total customer retail value after tax
     */
    public function getCustomerRetailValueTotalNet(): ?float
    {
        if (count($this->customerRetailValueTotalNet) == 0) {
            return null;
        }
        return $this->customerRetailValueTotalNet['value'];
    }

    /**
     * Sets Customer Retail Value Total Net.
     * Total customer retail value after tax
     *
     * @maps CustomerRetailValueTotalNet
     */
    public function setCustomerRetailValueTotalNet(?float $customerRetailValueTotalNet): void
    {
        $this->customerRetailValueTotalNet['value'] = $customerRetailValueTotalNet;
    }

    /**
     * Unsets Customer Retail Value Total Net.
     * Total customer retail value after tax
     */
    public function unsetCustomerRetailValueTotalNet(): void
    {
        $this->customerRetailValueTotalNet = [];
    }

    /**
     * Returns Transaction Type Description.
     * Trasaction type description
     */
    public function getTransactionTypeDescription(): ?float
    {
        if (count($this->transactionTypeDescription) == 0) {
            return null;
        }
        return $this->transactionTypeDescription['value'];
    }

    /**
     * Sets Transaction Type Description.
     * Trasaction type description
     *
     * @maps TransactionTypeDescription
     */
    public function setTransactionTypeDescription(?float $transactionTypeDescription): void
    {
        $this->transactionTypeDescription['value'] = $transactionTypeDescription;
    }

    /**
     * Unsets Transaction Type Description.
     * Trasaction type description
     */
    public function unsetTransactionTypeDescription(): void
    {
        $this->transactionTypeDescription = [];
    }

    /**
     * Returns Rebateon Net Amount in Transaction Currency.
     * Rebate give to net amountin transaction currency that is used
     */
    public function getRebateonNetAmountInTransactionCurrency(): ?float
    {
        if (count($this->rebateonNetAmountInTransactionCurrency) == 0) {
            return null;
        }
        return $this->rebateonNetAmountInTransactionCurrency['value'];
    }

    /**
     * Sets Rebateon Net Amount in Transaction Currency.
     * Rebate give to net amountin transaction currency that is used
     *
     * @maps RebateonNetAmountInTransactionCurrency
     */
    public function setRebateonNetAmountInTransactionCurrency(?float $rebateonNetAmountInTransactionCurrency): void
    {
        $this->rebateonNetAmountInTransactionCurrency['value'] = $rebateonNetAmountInTransactionCurrency;
    }

    /**
     * Unsets Rebateon Net Amount in Transaction Currency.
     * Rebate give to net amountin transaction currency that is used
     */
    public function unsetRebateonNetAmountInTransactionCurrency(): void
    {
        $this->rebateonNetAmountInTransactionCurrency = [];
    }

    /**
     * Returns Effective Discount in Trx Currency.
     * Currency used to giveEffective discount on transactions
     */
    public function getEffectiveDiscountInTrxCurrency(): ?float
    {
        if (count($this->effectiveDiscountInTrxCurrency) == 0) {
            return null;
        }
        return $this->effectiveDiscountInTrxCurrency['value'];
    }

    /**
     * Sets Effective Discount in Trx Currency.
     * Currency used to giveEffective discount on transactions
     *
     * @maps EffectiveDiscountInTrxCurrency
     */
    public function setEffectiveDiscountInTrxCurrency(?float $effectiveDiscountInTrxCurrency): void
    {
        $this->effectiveDiscountInTrxCurrency['value'] = $effectiveDiscountInTrxCurrency;
    }

    /**
     * Unsets Effective Discount in Trx Currency.
     * Currency used to giveEffective discount on transactions
     */
    public function unsetEffectiveDiscountInTrxCurrency(): void
    {
        $this->effectiveDiscountInTrxCurrency = [];
    }

    /**
     * Returns Del Co to Col Co Exchange Rate.
     * Exchange rate between Delco and Colco
     */
    public function getDelCoToColCoExchangeRate(): ?int
    {
        if (count($this->delCoToColCoExchangeRate) == 0) {
            return null;
        }
        return $this->delCoToColCoExchangeRate['value'];
    }

    /**
     * Sets Del Co to Col Co Exchange Rate.
     * Exchange rate between Delco and Colco
     *
     * @maps DelCoToColCoExchangeRate
     */
    public function setDelCoToColCoExchangeRate(?int $delCoToColCoExchangeRate): void
    {
        $this->delCoToColCoExchangeRate['value'] = $delCoToColCoExchangeRate;
    }

    /**
     * Unsets Del Co to Col Co Exchange Rate.
     * Exchange rate between Delco and Colco
     */
    public function unsetDelCoToColCoExchangeRate(): void
    {
        $this->delCoToColCoExchangeRate = [];
    }

    /**
     * Returns Cards.
     *
     * @return int[]|null
     */
    public function getCards(): ?array
    {
        return $this->cards;
    }

    /**
     * Sets Cards.
     *
     * @maps Cards
     *
     * @param int[]|null $cards
     */
    public function setCards(?array $cards): void
    {
        $this->cards = $cards;
    }

    /**
     * Returns Unit Discount Transaction Currency.
     * Currency used forto provide unit Transaction discount
     */
    public function getUnitDiscountTransactionCurrency(): ?float
    {
        if (count($this->unitDiscountTransactionCurrency) == 0) {
            return null;
        }
        return $this->unitDiscountTransactionCurrency['value'];
    }

    /**
     * Sets Unit Discount Transaction Currency.
     * Currency used forto provide unit Transaction discount
     *
     * @maps UnitDiscountTransactionCurrency
     */
    public function setUnitDiscountTransactionCurrency(?float $unitDiscountTransactionCurrency): void
    {
        $this->unitDiscountTransactionCurrency['value'] = $unitDiscountTransactionCurrency;
    }

    /**
     * Unsets Unit Discount Transaction Currency.
     * Currency used forto provide unit Transaction discount
     */
    public function unsetUnitDiscountTransactionCurrency(): void
    {
        $this->unitDiscountTransactionCurrency = [];
    }

    /**
     * Returns Transaction Gross Amount.
     * Transactional amount before tax
     */
    public function getTransactionGrossAmount(): ?float
    {
        if (count($this->transactionGrossAmount) == 0) {
            return null;
        }
        return $this->transactionGrossAmount['value'];
    }

    /**
     * Sets Transaction Gross Amount.
     * Transactional amount before tax
     *
     * @maps TransactionGrossAmount
     */
    public function setTransactionGrossAmount(?float $transactionGrossAmount): void
    {
        $this->transactionGrossAmount['value'] = $transactionGrossAmount;
    }

    /**
     * Unsets Transaction Gross Amount.
     * Transactional amount before tax
     */
    public function unsetTransactionGrossAmount(): void
    {
        $this->transactionGrossAmount = [];
    }

    /**
     * Returns Transaction Net Amount.
     * Transaction net amount after tax
     */
    public function getTransactionNetAmount(): ?float
    {
        if (count($this->transactionNetAmount) == 0) {
            return null;
        }
        return $this->transactionNetAmount['value'];
    }

    /**
     * Sets Transaction Net Amount.
     * Transaction net amount after tax
     *
     * @maps TransactionNetAmount
     */
    public function setTransactionNetAmount(?float $transactionNetAmount): void
    {
        $this->transactionNetAmount['value'] = $transactionNetAmount;
    }

    /**
     * Unsets Transaction Net Amount.
     * Transaction net amount after tax
     */
    public function unsetTransactionNetAmount(): void
    {
        $this->transactionNetAmount = [];
    }

    /**
     * Returns Transaction Tax.
     * Transaction tax
     */
    public function getTransactionTax(): ?float
    {
        if (count($this->transactionTax) == 0) {
            return null;
        }
        return $this->transactionTax['value'];
    }

    /**
     * Sets Transaction Tax.
     * Transaction tax
     *
     * @maps TransactionTax
     */
    public function setTransactionTax(?float $transactionTax): void
    {
        $this->transactionTax['value'] = $transactionTax;
    }

    /**
     * Unsets Transaction Tax.
     * Transaction tax
     */
    public function unsetTransactionTax(): void
    {
        $this->transactionTax = [];
    }

    /**
     * Returns V a Ton Net Amount.
     * Transactinal tax rates
     */
    public function getVATonNetAmount(): ?float
    {
        if (count($this->vATonNetAmount) == 0) {
            return null;
        }
        return $this->vATonNetAmount['value'];
    }

    /**
     * Sets V a Ton Net Amount.
     * Transactinal tax rates
     *
     * @maps VATonNetAmount
     */
    public function setVATonNetAmount(?float $vATonNetAmount): void
    {
        $this->vATonNetAmount['value'] = $vATonNetAmount;
    }

    /**
     * Unsets V a Ton Net Amount.
     * Transactinal tax rates
     */
    public function unsetVATonNetAmount(): void
    {
        $this->vATonNetAmount = [];
    }

    /**
     * Returns Delco List Price Unit Net.
     * Priv
     */
    public function getDelcoListPriceUnitNet(): ?float
    {
        if (count($this->delcoListPriceUnitNet) == 0) {
            return null;
        }
        return $this->delcoListPriceUnitNet['value'];
    }

    /**
     * Sets Delco List Price Unit Net.
     * Priv
     *
     * @maps DelcoListPriceUnitNet
     */
    public function setDelcoListPriceUnitNet(?float $delcoListPriceUnitNet): void
    {
        $this->delcoListPriceUnitNet['value'] = $delcoListPriceUnitNet;
    }

    /**
     * Unsets Delco List Price Unit Net.
     * Priv
     */
    public function unsetDelcoListPriceUnitNet(): void
    {
        $this->delcoListPriceUnitNet = [];
    }

    /**
     * Returns Delco Retail Price Unit Gross.
     * Delco retail price per unit before tax
     */
    public function getDelcoRetailPriceUnitGross(): ?float
    {
        if (count($this->delcoRetailPriceUnitGross) == 0) {
            return null;
        }
        return $this->delcoRetailPriceUnitGross['value'];
    }

    /**
     * Sets Delco Retail Price Unit Gross.
     * Delco retail price per unit before tax
     *
     * @maps DelcoRetailPriceUnitGross
     */
    public function setDelcoRetailPriceUnitGross(?float $delcoRetailPriceUnitGross): void
    {
        $this->delcoRetailPriceUnitGross['value'] = $delcoRetailPriceUnitGross;
    }

    /**
     * Unsets Delco Retail Price Unit Gross.
     * Delco retail price per unit before tax
     */
    public function unsetDelcoRetailPriceUnitGross(): void
    {
        $this->delcoRetailPriceUnitGross = [];
    }

    /**
     * Returns Unit Price in Transaction Currency.
     * Delco retail price per unit after tax
     */
    public function getUnitPriceInTransactionCurrency(): ?float
    {
        if (count($this->unitPriceInTransactionCurrency) == 0) {
            return null;
        }
        return $this->unitPriceInTransactionCurrency['value'];
    }

    /**
     * Sets Unit Price in Transaction Currency.
     * Delco retail price per unit after tax
     *
     * @maps UnitPriceInTransactionCurrency
     */
    public function setUnitPriceInTransactionCurrency(?float $unitPriceInTransactionCurrency): void
    {
        $this->unitPriceInTransactionCurrency['value'] = $unitPriceInTransactionCurrency;
    }

    /**
     * Unsets Unit Price in Transaction Currency.
     * Delco retail price per unit after tax
     */
    public function unsetUnitPriceInTransactionCurrency(): void
    {
        $this->unitPriceInTransactionCurrency = [];
    }

    /**
     * Returns Delco Retail Price Unit Net.
     * Delco retail price per unit
     */
    public function getDelcoRetailPriceUnitNet(): ?float
    {
        if (count($this->delcoRetailPriceUnitNet) == 0) {
            return null;
        }
        return $this->delcoRetailPriceUnitNet['value'];
    }

    /**
     * Sets Delco Retail Price Unit Net.
     * Delco retail price per unit
     *
     * @maps DelcoRetailPriceUnitNet
     */
    public function setDelcoRetailPriceUnitNet(?float $delcoRetailPriceUnitNet): void
    {
        $this->delcoRetailPriceUnitNet['value'] = $delcoRetailPriceUnitNet;
    }

    /**
     * Unsets Delco Retail Price Unit Net.
     * Delco retail price per unit
     */
    public function unsetDelcoRetailPriceUnitNet(): void
    {
        $this->delcoRetailPriceUnitNet = [];
    }

    /**
     * Returns Delco Retail Value Total Gross.
     * Delco retail price before tax
     */
    public function getDelcoRetailValueTotalGross(): ?float
    {
        if (count($this->delcoRetailValueTotalGross) == 0) {
            return null;
        }
        return $this->delcoRetailValueTotalGross['value'];
    }

    /**
     * Sets Delco Retail Value Total Gross.
     * Delco retail price before tax
     *
     * @maps DelcoRetailValueTotalGross
     */
    public function setDelcoRetailValueTotalGross(?float $delcoRetailValueTotalGross): void
    {
        $this->delcoRetailValueTotalGross['value'] = $delcoRetailValueTotalGross;
    }

    /**
     * Unsets Delco Retail Value Total Gross.
     * Delco retail price before tax
     */
    public function unsetDelcoRetailValueTotalGross(): void
    {
        $this->delcoRetailValueTotalGross = [];
    }

    /**
     * Returns Delco Retail Value Total Net.
     * Delco per unit price after tax
     */
    public function getDelcoRetailValueTotalNet(): ?float
    {
        if (count($this->delcoRetailValueTotalNet) == 0) {
            return null;
        }
        return $this->delcoRetailValueTotalNet['value'];
    }

    /**
     * Sets Delco Retail Value Total Net.
     * Delco per unit price after tax
     *
     * @maps DelcoRetailValueTotalNet
     */
    public function setDelcoRetailValueTotalNet(?float $delcoRetailValueTotalNet): void
    {
        $this->delcoRetailValueTotalNet['value'] = $delcoRetailValueTotalNet;
    }

    /**
     * Unsets Delco Retail Value Total Net.
     * Delco per unit price after tax
     */
    public function unsetDelcoRetailValueTotalNet(): void
    {
        $this->delcoRetailValueTotalNet = [];
    }

    /**
     * Returns Transaction Currency Symbol.
     * Currency used for transaction.
     */
    public function getTransactionCurrencySymbol(): ?string
    {
        if (count($this->transactionCurrencySymbol) == 0) {
            return null;
        }
        return $this->transactionCurrencySymbol['value'];
    }

    /**
     * Sets Transaction Currency Symbol.
     * Currency used for transaction.
     *
     * @maps TransactionCurrencySymbol
     */
    public function setTransactionCurrencySymbol(?string $transactionCurrencySymbol): void
    {
        $this->transactionCurrencySymbol['value'] = $transactionCurrencySymbol;
    }

    /**
     * Unsets Transaction Currency Symbol.
     * Currency used for transaction.
     */
    public function unsetTransactionCurrencySymbol(): void
    {
        $this->transactionCurrencySymbol = [];
    }

    /**
     * Returns Discount Type.
     * Type of discount available
     */
    public function getDiscountType(): ?string
    {
        if (count($this->discountType) == 0) {
            return null;
        }
        return $this->discountType['value'];
    }

    /**
     * Sets Discount Type.
     * Type of discount available
     *
     * @maps DiscountType
     */
    public function setDiscountType(?string $discountType): void
    {
        $this->discountType['value'] = $discountType;
    }

    /**
     * Unsets Discount Type.
     * Type of discount available
     */
    public function unsetDiscountType(): void
    {
        $this->discountType = [];
    }

    /**
     * Returns Dispute Status.
     * Is there any dispute status?True or False
     */
    public function getDisputeStatus(): ?bool
    {
        if (count($this->disputeStatus) == 0) {
            return null;
        }
        return $this->disputeStatus['value'];
    }

    /**
     * Sets Dispute Status.
     * Is there any dispute status?True or False
     *
     * @maps DisputeStatus
     */
    public function setDisputeStatus(?bool $disputeStatus): void
    {
        $this->disputeStatus['value'] = $disputeStatus;
    }

    /**
     * Unsets Dispute Status.
     * Is there any dispute status?True or False
     */
    public function unsetDisputeStatus(): void
    {
        $this->disputeStatus = [];
    }

    /**
     * Returns Is Shell Site.
     * Is it a shell sites?True or False
     */
    public function getIsShellSite(): ?bool
    {
        return $this->isShellSite;
    }

    /**
     * Sets Is Shell Site.
     * Is it a shell sites?True or False
     *
     * @maps IsShellSite
     */
    public function setIsShellSite(?bool $isShellSite): void
    {
        $this->isShellSite = $isShellSite;
    }

    /**
     * Returns Fleet Id Input.
     * Fleet identifier
     */
    public function getFleetIdInput(): ?string
    {
        if (count($this->fleetIdInput) == 0) {
            return null;
        }
        return $this->fleetIdInput['value'];
    }

    /**
     * Sets Fleet Id Input.
     * Fleet identifier
     *
     * @maps FleetIdInput
     */
    public function setFleetIdInput(?string $fleetIdInput): void
    {
        $this->fleetIdInput['value'] = $fleetIdInput;
    }

    /**
     * Unsets Fleet Id Input.
     * Fleet identifier
     */
    public function unsetFleetIdInput(): void
    {
        $this->fleetIdInput = [];
    }

    /**
     * Returns Incoming Product Code.
     * In coming product code
     */
    public function getIncomingProductCode(): ?int
    {
        if (count($this->incomingProductCode) == 0) {
            return null;
        }
        return $this->incomingProductCode['value'];
    }

    /**
     * Sets Incoming Product Code.
     * In coming product code
     *
     * @maps IncomingProductCode
     */
    public function setIncomingProductCode(?int $incomingProductCode): void
    {
        $this->incomingProductCode['value'] = $incomingProductCode;
    }

    /**
     * Unsets Incoming Product Code.
     * In coming product code
     */
    public function unsetIncomingProductCode(): void
    {
        $this->incomingProductCode = [];
    }

    /**
     * Returns Posting Date.
     * Date of Posting
     */
    public function getPostingDate(): ?\DateTime
    {
        if (count($this->postingDate) == 0) {
            return null;
        }
        return $this->postingDate['value'];
    }

    /**
     * Sets Posting Date.
     * Date of Posting
     *
     * @maps PostingDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setPostingDate(?\DateTime $postingDate): void
    {
        $this->postingDate['value'] = $postingDate;
    }

    /**
     * Unsets Posting Date.
     * Date of Posting
     */
    public function unsetPostingDate(): void
    {
        $this->postingDate = [];
    }

    /**
     * Returns Posting Time.
     * Time whern posting happened
     */
    public function getPostingTime(): ?\DateTime
    {
        if (count($this->postingTime) == 0) {
            return null;
        }
        return $this->postingTime['value'];
    }

    /**
     * Sets Posting Time.
     * Time whern posting happened
     *
     * @maps PostingTime
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setPostingTime(?\DateTime $postingTime): void
    {
        $this->postingTime['value'] = $postingTime;
    }

    /**
     * Unsets Posting Time.
     * Time whern posting happened
     */
    public function unsetPostingTime(): void
    {
        $this->postingTime = [];
    }

    /**
     * Returns Product Code.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low octane,24
     * Unleaded Environmental
     */
    public function getProductCode(): ?int
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low octane,24
     * Unleaded Environmental
     *
     * @maps ProductCode
     */
    public function setProductCode(?int $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low octane,24
     * Unleaded Environmental
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * Name of the product
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * Name of the product
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * Name of the product
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Product Group Id.
     * Id of the product to which group it belongs
     */
    public function getProductGroupId(): ?int
    {
        if (count($this->productGroupId) == 0) {
            return null;
        }
        return $this->productGroupId['value'];
    }

    /**
     * Sets Product Group Id.
     * Id of the product to which group it belongs
     *
     * @maps ProductGroupId
     */
    public function setProductGroupId(?int $productGroupId): void
    {
        $this->productGroupId['value'] = $productGroupId;
    }

    /**
     * Unsets Product Group Id.
     * Id of the product to which group it belongs
     */
    public function unsetProductGroupId(): void
    {
        $this->productGroupId = [];
    }

    /**
     * Returns Incoming Currency Code.
     * In coming currecncy code
     */
    public function getIncomingCurrencyCode(): ?string
    {
        if (count($this->incomingCurrencyCode) == 0) {
            return null;
        }
        return $this->incomingCurrencyCode['value'];
    }

    /**
     * Sets Incoming Currency Code.
     * In coming currecncy code
     *
     * @maps IncomingCurrencyCode
     */
    public function setIncomingCurrencyCode(?string $incomingCurrencyCode): void
    {
        $this->incomingCurrencyCode['value'] = $incomingCurrencyCode;
    }

    /**
     * Unsets Incoming Currency Code.
     * In coming currecncy code
     */
    public function unsetIncomingCurrencyCode(): void
    {
        $this->incomingCurrencyCode = [];
    }

    /**
     * Returns Incoming Site Description.
     * In coming Site description
     */
    public function getIncomingSiteDescription(): ?string
    {
        if (count($this->incomingSiteDescription) == 0) {
            return null;
        }
        return $this->incomingSiteDescription['value'];
    }

    /**
     * Sets Incoming Site Description.
     * In coming Site description
     *
     * @maps IncomingSiteDescription
     */
    public function setIncomingSiteDescription(?string $incomingSiteDescription): void
    {
        $this->incomingSiteDescription['value'] = $incomingSiteDescription;
    }

    /**
     * Unsets Incoming Site Description.
     * In coming Site description
     */
    public function unsetIncomingSiteDescription(): void
    {
        $this->incomingSiteDescription = [];
    }

    /**
     * Returns Location.
     * Location of the Shell site
     */
    public function getLocation(): ?string
    {
        if (count($this->location) == 0) {
            return null;
        }
        return $this->location['value'];
    }

    /**
     * Sets Location.
     * Location of the Shell site
     *
     * @maps Location
     */
    public function setLocation(?string $location): void
    {
        $this->location['value'] = $location;
    }

    /**
     * Unsets Location.
     * Location of the Shell site
     */
    public function unsetLocation(): void
    {
        $this->location = [];
    }

    /**
     * Returns Site Name.
     * Shell site name
     */
    public function getSiteName(): ?string
    {
        if (count($this->siteName) == 0) {
            return null;
        }
        return $this->siteName['value'];
    }

    /**
     * Sets Site Name.
     * Shell site name
     *
     * @maps SiteName
     */
    public function setSiteName(?string $siteName): void
    {
        $this->siteName['value'] = $siteName;
    }

    /**
     * Unsets Site Name.
     * Shell site name
     */
    public function unsetSiteName(): void
    {
        $this->siteName = [];
    }

    /**
     * Returns Site Code.
     * Shell site code
     */
    public function getSiteCode(): ?int
    {
        if (count($this->siteCode) == 0) {
            return null;
        }
        return $this->siteCode['value'];
    }

    /**
     * Sets Site Code.
     * Shell site code
     *
     * @maps SiteCode
     */
    public function setSiteCode(?int $siteCode): void
    {
        $this->siteCode['value'] = $siteCode;
    }

    /**
     * Unsets Site Code.
     * Shell site code
     */
    public function unsetSiteCode(): void
    {
        $this->siteCode = [];
    }

    /**
     * Returns Incoming Site Number.
     * In coming site number
     */
    public function getIncomingSiteNumber(): ?int
    {
        if (count($this->incomingSiteNumber) == 0) {
            return null;
        }
        return $this->incomingSiteNumber['value'];
    }

    /**
     * Sets Incoming Site Number.
     * In coming site number
     *
     * @maps IncomingSiteNumber
     */
    public function setIncomingSiteNumber(?int $incomingSiteNumber): void
    {
        $this->incomingSiteNumber['value'] = $incomingSiteNumber;
    }

    /**
     * Unsets Incoming Site Number.
     * In coming site number
     */
    public function unsetIncomingSiteNumber(): void
    {
        $this->incomingSiteNumber = [];
    }

    /**
     * Returns Invoice Currency Code.
     * Currency code on which the invoice is raised
     */
    public function getInvoiceCurrencyCode(): ?string
    {
        if (count($this->invoiceCurrencyCode) == 0) {
            return null;
        }
        return $this->invoiceCurrencyCode['value'];
    }

    /**
     * Sets Invoice Currency Code.
     * Currency code on which the invoice is raised
     *
     * @maps InvoiceCurrencyCode
     */
    public function setInvoiceCurrencyCode(?string $invoiceCurrencyCode): void
    {
        $this->invoiceCurrencyCode['value'] = $invoiceCurrencyCode;
    }

    /**
     * Unsets Invoice Currency Code.
     * Currency code on which the invoice is raised
     */
    public function unsetInvoiceCurrencyCode(): void
    {
        $this->invoiceCurrencyCode = [];
    }

    /**
     * Returns Invoice Date.
     * Date on which the invoice was raised
     */
    public function getInvoiceDate(): ?\DateTime
    {
        if (count($this->invoiceDate) == 0) {
            return null;
        }
        return $this->invoiceDate['value'];
    }

    /**
     * Sets Invoice Date.
     * Date on which the invoice was raised
     *
     * @maps InvoiceDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setInvoiceDate(?\DateTime $invoiceDate): void
    {
        $this->invoiceDate['value'] = $invoiceDate;
    }

    /**
     * Unsets Invoice Date.
     * Date on which the invoice was raised
     */
    public function unsetInvoiceDate(): void
    {
        $this->invoiceDate = [];
    }

    /**
     * Returns Invoice Number.
     * Invoice number
     */
    public function getInvoiceNumber(): ?float
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice number
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?float $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice number
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Fuel Product.
     * Is it a fuel product? True or False
     */
    public function getFuelProduct(): ?bool
    {
        if (count($this->fuelProduct) == 0) {
            return null;
        }
        return $this->fuelProduct['value'];
    }

    /**
     * Sets Fuel Product.
     * Is it a fuel product? True or False
     *
     * @maps FuelProduct
     */
    public function setFuelProduct(?bool $fuelProduct): void
    {
        $this->fuelProduct['value'] = $fuelProduct;
    }

    /**
     * Unsets Fuel Product.
     * Is it a fuel product? True or False
     */
    public function unsetFuelProduct(): void
    {
        $this->fuelProduct = [];
    }

    /**
     * Returns V at Applicable.
     * Is VAT applicable?Y or N
     */
    public function getVATApplicable(): ?string
    {
        if (count($this->vATApplicable) == 0) {
            return null;
        }
        return $this->vATApplicable['value'];
    }

    /**
     * Sets V at Applicable.
     * Is VAT applicable?Y or N
     *
     * @maps VATApplicable
     */
    public function setVATApplicable(?string $vATApplicable): void
    {
        $this->vATApplicable['value'] = $vATApplicable;
    }

    /**
     * Unsets V at Applicable.
     * Is VAT applicable?Y or N
     */
    public function unsetVATApplicable(): void
    {
        $this->vATApplicable = [];
    }

    /**
     * Returns Payer Name.
     * Name of the payer
     */
    public function getPayerName(): ?string
    {
        if (count($this->payerName) == 0) {
            return null;
        }
        return $this->payerName['value'];
    }

    /**
     * Sets Payer Name.
     * Name of the payer
     *
     * @maps PayerName
     */
    public function setPayerName(?string $payerName): void
    {
        $this->payerName['value'] = $payerName;
    }

    /**
     * Unsets Payer Name.
     * Name of the payer
     */
    public function unsetPayerName(): void
    {
        $this->payerName = [];
    }

    /**
     * Returns Payer Number.
     * Payer account number
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer account number
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer account number
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Parent Customer Number.
     * Parent account number of the payer
     */
    public function getParentCustomerNumber(): ?string
    {
        if (count($this->parentCustomerNumber) == 0) {
            return null;
        }
        return $this->parentCustomerNumber['value'];
    }

    /**
     * Sets Parent Customer Number.
     * Parent account number of the payer
     *
     * @maps ParentCustomerNumber
     */
    public function setParentCustomerNumber(?string $parentCustomerNumber): void
    {
        $this->parentCustomerNumber['value'] = $parentCustomerNumber;
    }

    /**
     * Unsets Parent Customer Number.
     * Parent account number of the payer
     */
    public function unsetParentCustomerNumber(): void
    {
        $this->parentCustomerNumber = [];
    }

    /**
     * Returns Payer Group.
     * The group which the payer belongs to
     */
    public function getPayerGroup(): ?string
    {
        if (count($this->payerGroup) == 0) {
            return null;
        }
        return $this->payerGroup['value'];
    }

    /**
     * Sets Payer Group.
     * The group which the payer belongs to
     *
     * @maps PayerGroup
     */
    public function setPayerGroup(?string $payerGroup): void
    {
        $this->payerGroup['value'] = $payerGroup;
    }

    /**
     * Unsets Payer Group.
     * The group which the payer belongs to
     */
    public function unsetPayerGroup(): void
    {
        $this->payerGroup = [];
    }

    /**
     * Returns Payer Group Name.
     * Name of the group to which the payer belongs to.
     */
    public function getPayerGroupName(): ?string
    {
        if (count($this->payerGroupName) == 0) {
            return null;
        }
        return $this->payerGroupName['value'];
    }

    /**
     * Sets Payer Group Name.
     * Name of the group to which the payer belongs to.
     *
     * @maps PayerGroupName
     */
    public function setPayerGroupName(?string $payerGroupName): void
    {
        $this->payerGroupName['value'] = $payerGroupName;
    }

    /**
     * Unsets Payer Group Name.
     * Name of the group to which the payer belongs to.
     */
    public function unsetPayerGroupName(): void
    {
        $this->payerGroupName = [];
    }

    /**
     * Returns Check Digit.
     * Check digit
     */
    public function getCheckDigit(): ?int
    {
        if (count($this->checkDigit) == 0) {
            return null;
        }
        return $this->checkDigit['value'];
    }

    /**
     * Sets Check Digit.
     * Check digit
     *
     * @maps CheckDigit
     */
    public function setCheckDigit(?int $checkDigit): void
    {
        $this->checkDigit['value'] = $checkDigit;
    }

    /**
     * Unsets Check Digit.
     * Check digit
     */
    public function unsetCheckDigit(): void
    {
        $this->checkDigit = [];
    }

    /**
     * Returns Net Invoice Indicator.
     * After tax net invoice number
     */
    public function getNetInvoiceIndicator(): ?string
    {
        if (count($this->netInvoiceIndicator) == 0) {
            return null;
        }
        return $this->netInvoiceIndicator['value'];
    }

    /**
     * Sets Net Invoice Indicator.
     * After tax net invoice number
     *
     * @maps NetInvoiceIndicator
     */
    public function setNetInvoiceIndicator(?string $netInvoiceIndicator): void
    {
        $this->netInvoiceIndicator['value'] = $netInvoiceIndicator;
    }

    /**
     * Unsets Net Invoice Indicator.
     * After tax net invoice number
     */
    public function unsetNetInvoiceIndicator(): void
    {
        $this->netInvoiceIndicator = [];
    }

    /**
     * Returns Delco Code.
     * Delco code
     */
    public function getDelcoCode(): ?int
    {
        if (count($this->delcoCode) == 0) {
            return null;
        }
        return $this->delcoCode['value'];
    }

    /**
     * Sets Delco Code.
     * Delco code
     *
     * @maps DelcoCode
     */
    public function setDelcoCode(?int $delcoCode): void
    {
        $this->delcoCode['value'] = $delcoCode;
    }

    /**
     * Unsets Delco Code.
     * Delco code
     */
    public function unsetDelcoCode(): void
    {
        $this->delcoCode = [];
    }

    /**
     * Returns Network Code.
     * Network  code of the payer
     */
    public function getNetworkCode(): ?int
    {
        if (count($this->networkCode) == 0) {
            return null;
        }
        return $this->networkCode['value'];
    }

    /**
     * Sets Network Code.
     * Network  code of the payer
     *
     * @maps NetworkCode
     */
    public function setNetworkCode(?int $networkCode): void
    {
        $this->networkCode['value'] = $networkCode;
    }

    /**
     * Unsets Network Code.
     * Network  code of the payer
     */
    public function unsetNetworkCode(): void
    {
        $this->networkCode = [];
    }

    /**
     * Returns Purchased in Country.
     * Country of purchase
     */
    public function getPurchasedInCountry(): ?string
    {
        if (count($this->purchasedInCountry) == 0) {
            return null;
        }
        return $this->purchasedInCountry['value'];
    }

    /**
     * Sets Purchased in Country.
     * Country of purchase
     *
     * @maps PurchasedInCountry
     */
    public function setPurchasedInCountry(?string $purchasedInCountry): void
    {
        $this->purchasedInCountry['value'] = $purchasedInCountry;
    }

    /**
     * Unsets Purchased in Country.
     * Country of purchase
     */
    public function unsetPurchasedInCountry(): void
    {
        $this->purchasedInCountry = [];
    }

    /**
     * Returns Site Country.
     * Country where the site exists
     */
    public function getSiteCountry(): ?string
    {
        if (count($this->siteCountry) == 0) {
            return null;
        }
        return $this->siteCountry['value'];
    }

    /**
     * Sets Site Country.
     * Country where the site exists
     *
     * @maps SiteCountry
     */
    public function setSiteCountry(?string $siteCountry): void
    {
        $this->siteCountry['value'] = $siteCountry;
    }

    /**
     * Unsets Site Country.
     * Country where the site exists
     */
    public function unsetSiteCountry(): void
    {
        $this->siteCountry = [];
    }

    /**
     * Returns V at Country.
     * Country where VAT is applicable
     */
    public function getVATCountry(): ?string
    {
        if (count($this->vATCountry) == 0) {
            return null;
        }
        return $this->vATCountry['value'];
    }

    /**
     * Sets V at Country.
     * Country where VAT is applicable
     *
     * @maps VATCountry
     */
    public function setVATCountry(?string $vATCountry): void
    {
        $this->vATCountry['value'] = $vATCountry;
    }

    /**
     * Unsets V at Country.
     * Country where VAT is applicable
     */
    public function unsetVATCountry(): void
    {
        $this->vATCountry = [];
    }

    /**
     * Returns Delco Name.
     * Name of the delivery company
     */
    public function getDelcoName(): ?string
    {
        if (count($this->delcoName) == 0) {
            return null;
        }
        return $this->delcoName['value'];
    }

    /**
     * Sets Delco Name.
     * Name of the delivery company
     *
     * @maps DelcoName
     */
    public function setDelcoName(?string $delcoName): void
    {
        $this->delcoName['value'] = $delcoName;
    }

    /**
     * Unsets Delco Name.
     * Name of the delivery company
     */
    public function unsetDelcoName(): void
    {
        $this->delcoName = [];
    }

    /**
     * Returns Network.
     * Network of the Delivery company
     */
    public function getNetwork(): ?string
    {
        if (count($this->network) == 0) {
            return null;
        }
        return $this->network['value'];
    }

    /**
     * Sets Network.
     * Network of the Delivery company
     *
     * @maps Network
     */
    public function setNetwork(?string $network): void
    {
        $this->network['value'] = $network;
    }

    /**
     * Unsets Network.
     * Network of the Delivery company
     */
    public function unsetNetwork(): void
    {
        $this->network = [];
    }

    /**
     * Returns Odometer Input.
     * Odometet input
     */
    public function getOdometerInput(): ?int
    {
        if (count($this->odometerInput) == 0) {
            return null;
        }
        return $this->odometerInput['value'];
    }

    /**
     * Sets Odometer Input.
     * Odometet input
     *
     * @maps OdometerInput
     */
    public function setOdometerInput(?int $odometerInput): void
    {
        $this->odometerInput['value'] = $odometerInput;
    }

    /**
     * Unsets Odometer Input.
     * Odometet input
     */
    public function unsetOdometerInput(): void
    {
        $this->odometerInput = [];
    }

    /**
     * Returns Original Sales Item Id.
     * Original item identifier for sales
     */
    public function getOriginalSalesItemId(): ?string
    {
        if (count($this->originalSalesItemId) == 0) {
            return null;
        }
        return $this->originalSalesItemId['value'];
    }

    /**
     * Sets Original Sales Item Id.
     * Original item identifier for sales
     *
     * @maps OriginalSalesItemId
     */
    public function setOriginalSalesItemId(?string $originalSalesItemId): void
    {
        $this->originalSalesItemId['value'] = $originalSalesItemId;
    }

    /**
     * Unsets Original Sales Item Id.
     * Original item identifier for sales
     */
    public function unsetOriginalSalesItemId(): void
    {
        $this->originalSalesItemId = [];
    }

    /**
     * Returns Fleet ID Description.
     * Fleet identifier description
     */
    public function getFleetIDDescription(): ?string
    {
        if (count($this->fleetIDDescription) == 0) {
            return null;
        }
        return $this->fleetIDDescription['value'];
    }

    /**
     * Sets Fleet ID Description.
     * Fleet identifier description
     *
     * @maps FleetIDDescription
     */
    public function setFleetIDDescription(?string $fleetIDDescription): void
    {
        $this->fleetIDDescription['value'] = $fleetIDDescription;
    }

    /**
     * Unsets Fleet ID Description.
     * Fleet identifier description
     */
    public function unsetFleetIDDescription(): void
    {
        $this->fleetIDDescription = [];
    }

    /**
     * Returns Parent Customer Id.
     * Identifier of parent customer
     */
    public function getParentCustomerId(): ?int
    {
        if (count($this->parentCustomerId) == 0) {
            return null;
        }
        return $this->parentCustomerId['value'];
    }

    /**
     * Sets Parent Customer Id.
     * Identifier of parent customer
     *
     * @maps ParentCustomerId
     */
    public function setParentCustomerId(?int $parentCustomerId): void
    {
        $this->parentCustomerId['value'] = $parentCustomerId;
    }

    /**
     * Unsets Parent Customer Id.
     * Identifier of parent customer
     */
    public function unsetParentCustomerId(): void
    {
        $this->parentCustomerId = [];
    }

    /**
     * Returns P in Indicator.
     * PIN indicator
     */
    public function getPINIndicator(): ?string
    {
        if (count($this->pINIndicator) == 0) {
            return null;
        }
        return $this->pINIndicator['value'];
    }

    /**
     * Sets P in Indicator.
     * PIN indicator
     *
     * @maps PINIndicator
     */
    public function setPINIndicator(?string $pINIndicator): void
    {
        $this->pINIndicator['value'] = $pINIndicator;
    }

    /**
     * Unsets P in Indicator.
     * PIN indicator
     */
    public function unsetPINIndicator(): void
    {
        $this->pINIndicator = [];
    }

    /**
     * Returns Product Group Name.
     * Name og the group the product belongs to
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Name og the group the product belongs to
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Name og the group the product belongs to
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Purchased in Country Code.
     * The countroy code where the purchase was made
     */
    public function getPurchasedInCountryCode(): ?string
    {
        if (count($this->purchasedInCountryCode) == 0) {
            return null;
        }
        return $this->purchasedInCountryCode['value'];
    }

    /**
     * Sets Purchased in Country Code.
     * The countroy code where the purchase was made
     *
     * @maps PurchasedInCountryCode
     */
    public function setPurchasedInCountryCode(?string $purchasedInCountryCode): void
    {
        $this->purchasedInCountryCode['value'] = $purchasedInCountryCode;
    }

    /**
     * Unsets Purchased in Country Code.
     * The countroy code where the purchase was made
     */
    public function unsetPurchasedInCountryCode(): void
    {
        $this->purchasedInCountryCode = [];
    }

    /**
     * Returns Quantity.
     * Quantity of the product
     */
    public function getQuantity(): ?float
    {
        if (count($this->quantity) == 0) {
            return null;
        }
        return $this->quantity['value'];
    }

    /**
     * Sets Quantity.
     * Quantity of the product
     *
     * @maps Quantity
     */
    public function setQuantity(?float $quantity): void
    {
        $this->quantity['value'] = $quantity;
    }

    /**
     * Unsets Quantity.
     * Quantity of the product
     */
    public function unsetQuantity(): void
    {
        $this->quantity = [];
    }

    /**
     * Returns Rebate Rate.
     * Rebate rate if any
     */
    public function getRebateRate(): ?float
    {
        if (count($this->rebateRate) == 0) {
            return null;
        }
        return $this->rebateRate['value'];
    }

    /**
     * Sets Rebate Rate.
     * Rebate rate if any
     *
     * @maps RebateRate
     */
    public function setRebateRate(?float $rebateRate): void
    {
        $this->rebateRate['value'] = $rebateRate;
    }

    /**
     * Unsets Rebate Rate.
     * Rebate rate if any
     */
    public function unsetRebateRate(): void
    {
        $this->rebateRate = [];
    }

    /**
     * Returns Receipt Number.
     * Reciept number
     */
    public function getReceiptNumber(): ?int
    {
        if (count($this->receiptNumber) == 0) {
            return null;
        }
        return $this->receiptNumber['value'];
    }

    /**
     * Sets Receipt Number.
     * Reciept number
     *
     * @maps ReceiptNumber
     */
    public function setReceiptNumber(?int $receiptNumber): void
    {
        $this->receiptNumber['value'] = $receiptNumber;
    }

    /**
     * Unsets Receipt Number.
     * Reciept number
     */
    public function unsetReceiptNumber(): void
    {
        $this->receiptNumber = [];
    }

    /**
     * Returns Refund Flag.
     * Flag to check if there is any refund
     */
    public function getRefundFlag(): ?string
    {
        return $this->refundFlag;
    }

    /**
     * Sets Refund Flag.
     * Flag to check if there is any refund
     *
     * @maps RefundFlag
     * @factory \ShellDataReportingAPIsLib\Models\PricedTransactionRespV2RefundFlagEnum::checkValue
     */
    public function setRefundFlag(?string $refundFlag): void
    {
        $this->refundFlag = $refundFlag;
    }

    /**
     * Returns Site Group Id.
     * Group identifier for the site
     */
    public function getSiteGroupId(): ?int
    {
        if (count($this->siteGroupId) == 0) {
            return null;
        }
        return $this->siteGroupId['value'];
    }

    /**
     * Sets Site Group Id.
     * Group identifier for the site
     *
     * @maps SiteGroupId
     */
    public function setSiteGroupId(?int $siteGroupId): void
    {
        $this->siteGroupId['value'] = $siteGroupId;
    }

    /**
     * Unsets Site Group Id.
     * Group identifier for the site
     */
    public function unsetSiteGroupId(): void
    {
        $this->siteGroupId = [];
    }

    /**
     * Returns Site Group Name.
     * Name of the Site group
     */
    public function getSiteGroupName(): ?string
    {
        if (count($this->siteGroupName) == 0) {
            return null;
        }
        return $this->siteGroupName['value'];
    }

    /**
     * Sets Site Group Name.
     * Name of the Site group
     *
     * @maps SiteGroupName
     */
    public function setSiteGroupName(?string $siteGroupName): void
    {
        $this->siteGroupName['value'] = $siteGroupName;
    }

    /**
     * Unsets Site Group Name.
     * Name of the Site group
     */
    public function unsetSiteGroupName(): void
    {
        $this->siteGroupName = [];
    }

    /**
     * Returns Latitude.
     * Latitude of the site
     */
    public function getLatitude(): ?float
    {
        if (count($this->latitude) == 0) {
            return null;
        }
        return $this->latitude['value'];
    }

    /**
     * Sets Latitude.
     * Latitude of the site
     *
     * @maps Latitude
     */
    public function setLatitude(?float $latitude): void
    {
        $this->latitude['value'] = $latitude;
    }

    /**
     * Unsets Latitude.
     * Latitude of the site
     */
    public function unsetLatitude(): void
    {
        $this->latitude = [];
    }

    /**
     * Returns Longitude.
     * Longitude of the site
     */
    public function getLongitude(): ?float
    {
        if (count($this->longitude) == 0) {
            return null;
        }
        return $this->longitude['value'];
    }

    /**
     * Sets Longitude.
     * Longitude of the site
     *
     * @maps Longitude
     */
    public function setLongitude(?float $longitude): void
    {
        $this->longitude['value'] = $longitude;
    }

    /**
     * Unsets Longitude.
     * Longitude of the site
     */
    public function unsetLongitude(): void
    {
        $this->longitude = [];
    }

    /**
     * Returns Del Co Exchange Rate.
     * Delivery company exchange rate
     */
    public function getDelCoExchangeRate(): ?float
    {
        if (count($this->delCoExchangeRate) == 0) {
            return null;
        }
        return $this->delCoExchangeRate['value'];
    }

    /**
     * Sets Del Co Exchange Rate.
     * Delivery company exchange rate
     *
     * @maps DelCoExchangeRate
     */
    public function setDelCoExchangeRate(?float $delCoExchangeRate): void
    {
        $this->delCoExchangeRate['value'] = $delCoExchangeRate;
    }

    /**
     * Unsets Del Co Exchange Rate.
     * Delivery company exchange rate
     */
    public function unsetDelCoExchangeRate(): void
    {
        $this->delCoExchangeRate = [];
    }

    /**
     * Returns Euro Rebate Amount.
     * Rebate amount in Euros
     */
    public function getEuroRebateAmount(): ?float
    {
        if (count($this->euroRebateAmount) == 0) {
            return null;
        }
        return $this->euroRebateAmount['value'];
    }

    /**
     * Sets Euro Rebate Amount.
     * Rebate amount in Euros
     *
     * @maps EuroRebateAmount
     */
    public function setEuroRebateAmount(?float $euroRebateAmount): void
    {
        $this->euroRebateAmount['value'] = $euroRebateAmount;
    }

    /**
     * Unsets Euro Rebate Amount.
     * Rebate amount in Euros
     */
    public function unsetEuroRebateAmount(): void
    {
        $this->euroRebateAmount = [];
    }

    /**
     * Returns Net Euro Amount.
     * Net amount in Euros
     */
    public function getNetEuroAmount(): ?float
    {
        if (count($this->netEuroAmount) == 0) {
            return null;
        }
        return $this->netEuroAmount['value'];
    }

    /**
     * Sets Net Euro Amount.
     * Net amount in Euros
     *
     * @maps NetEuroAmount
     */
    public function setNetEuroAmount(?float $netEuroAmount): void
    {
        $this->netEuroAmount['value'] = $netEuroAmount;
    }

    /**
     * Unsets Net Euro Amount.
     * Net amount in Euros
     */
    public function unsetNetEuroAmount(): void
    {
        $this->netEuroAmount = [];
    }

    /**
     * Returns Euro VAT Amount.
     * Vat amount in Euros
     */
    public function getEuroVATAmount(): ?float
    {
        if (count($this->euroVATAmount) == 0) {
            return null;
        }
        return $this->euroVATAmount['value'];
    }

    /**
     * Sets Euro VAT Amount.
     * Vat amount in Euros
     *
     * @maps EuroVATAmount
     */
    public function setEuroVATAmount(?float $euroVATAmount): void
    {
        $this->euroVATAmount['value'] = $euroVATAmount;
    }

    /**
     * Unsets Euro VAT Amount.
     * Vat amount in Euros
     */
    public function unsetEuroVATAmount(): void
    {
        $this->euroVATAmount = [];
    }

    /**
     * Returns Parent Customer Name.
     * Customers parent name
     */
    public function getParentCustomerName(): ?string
    {
        if (count($this->parentCustomerName) == 0) {
            return null;
        }
        return $this->parentCustomerName['value'];
    }

    /**
     * Sets Parent Customer Name.
     * Customers parent name
     *
     * @maps ParentCustomerName
     */
    public function setParentCustomerName(?string $parentCustomerName): void
    {
        $this->parentCustomerName['value'] = $parentCustomerName;
    }

    /**
     * Unsets Parent Customer Name.
     * Customers parent name
     */
    public function unsetParentCustomerName(): void
    {
        $this->parentCustomerName = [];
    }

    /**
     * Returns Is Invoiced.
     * Is invoice raised
     */
    public function getIsInvoiced(): ?bool
    {
        if (count($this->isInvoiced) == 0) {
            return null;
        }
        return $this->isInvoiced['value'];
    }

    /**
     * Sets Is Invoiced.
     * Is invoice raised
     *
     * @maps IsInvoiced
     */
    public function setIsInvoiced(?bool $isInvoiced): void
    {
        $this->isInvoiced['value'] = $isInvoiced;
    }

    /**
     * Unsets Is Invoiced.
     * Is invoice raised
     */
    public function unsetIsInvoiced(): void
    {
        $this->isInvoiced = [];
    }

    /**
     * Returns Transaction Currency Code.
     * Transaction currency code
     */
    public function getTransactionCurrencyCode(): ?string
    {
        if (count($this->transactionCurrencyCode) == 0) {
            return null;
        }
        return $this->transactionCurrencyCode['value'];
    }

    /**
     * Sets Transaction Currency Code.
     * Transaction currency code
     *
     * @maps TransactionCurrencyCode
     */
    public function setTransactionCurrencyCode(?string $transactionCurrencyCode): void
    {
        $this->transactionCurrencyCode['value'] = $transactionCurrencyCode;
    }

    /**
     * Unsets Transaction Currency Code.
     * Transaction currency code
     */
    public function unsetTransactionCurrencyCode(): void
    {
        $this->transactionCurrencyCode = [];
    }

    /**
     * Returns Credit Debit Code.
     * Is it Credit or debit C for credit D for Debit
     */
    public function getCreditDebitCode(): ?string
    {
        if (count($this->creditDebitCode) == 0) {
            return null;
        }
        return $this->creditDebitCode['value'];
    }

    /**
     * Sets Credit Debit Code.
     * Is it Credit or debit C for credit D for Debit
     *
     * @maps CreditDebitCode
     */
    public function setCreditDebitCode(?string $creditDebitCode): void
    {
        $this->creditDebitCode['value'] = $creditDebitCode;
    }

    /**
     * Unsets Credit Debit Code.
     * Is it Credit or debit C for credit D for Debit
     */
    public function unsetCreditDebitCode(): void
    {
        $this->creditDebitCode = [];
    }

    /**
     * Returns Transaction Date.
     * Date of transaction
     */
    public function getTransactionDate(): ?\DateTime
    {
        if (count($this->transactionDate) == 0) {
            return null;
        }
        return $this->transactionDate['value'];
    }

    /**
     * Sets Transaction Date.
     * Date of transaction
     *
     * @maps TransactionDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setTransactionDate(?\DateTime $transactionDate): void
    {
        $this->transactionDate['value'] = $transactionDate;
    }

    /**
     * Unsets Transaction Date.
     * Date of transaction
     */
    public function unsetTransactionDate(): void
    {
        $this->transactionDate = [];
    }

    /**
     * Returns Transaction Time.
     * Time of transaction
     */
    public function getTransactionTime(): ?\DateTime
    {
        if (count($this->transactionTime) == 0) {
            return null;
        }
        return $this->transactionTime['value'];
    }

    /**
     * Sets Transaction Time.
     * Time of transaction
     *
     * @maps TransactionTime
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setTransactionTime(?\DateTime $transactionTime): void
    {
        $this->transactionTime['value'] = $transactionTime;
    }

    /**
     * Unsets Transaction Time.
     * Time of transaction
     */
    public function unsetTransactionTime(): void
    {
        $this->transactionTime = [];
    }

    /**
     * Returns Transaction Item Id.
     * Identifier of the Iem in transaction
     */
    public function getTransactionItemId(): ?string
    {
        if (count($this->transactionItemId) == 0) {
            return null;
        }
        return $this->transactionItemId['value'];
    }

    /**
     * Sets Transaction Item Id.
     * Identifier of the Iem in transaction
     *
     * @maps TransactionItemId
     */
    public function setTransactionItemId(?string $transactionItemId): void
    {
        $this->transactionItemId['value'] = $transactionItemId;
    }

    /**
     * Unsets Transaction Item Id.
     * Identifier of the Iem in transaction
     */
    public function unsetTransactionItemId(): void
    {
        $this->transactionItemId = [];
    }

    /**
     * Returns Trn Identifier.
     * Transaction identifier
     */
    public function getTrnIdentifier(): ?string
    {
        if (count($this->trnIdentifier) == 0) {
            return null;
        }
        return $this->trnIdentifier['value'];
    }

    /**
     * Sets Trn Identifier.
     * Transaction identifier
     *
     * @maps TrnIdentifier
     */
    public function setTrnIdentifier(?string $trnIdentifier): void
    {
        $this->trnIdentifier['value'] = $trnIdentifier;
    }

    /**
     * Unsets Trn Identifier.
     * Transaction identifier
     */
    public function unsetTrnIdentifier(): void
    {
        $this->trnIdentifier = [];
    }

    /**
     * Returns Type.
     * Transaction type for Delco
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     * Transaction type for Delco
     *
     * @maps Type
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     * Transaction type for Delco
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Transaction Line.
     */
    public function getTransactionLine(): ?int
    {
        if (count($this->transactionLine) == 0) {
            return null;
        }
        return $this->transactionLine['value'];
    }

    /**
     * Sets Transaction Line.
     *
     * @maps TransactionLine
     */
    public function setTransactionLine(?int $transactionLine): void
    {
        $this->transactionLine['value'] = $transactionLine;
    }

    /**
     * Unsets Transaction Line.
     */
    public function unsetTransactionLine(): void
    {
        $this->transactionLine = [];
    }

    /**
     * Returns Transaction Type.
     * Transaction type Colco
     */
    public function getTransactionType(): ?string
    {
        if (count($this->transactionType) == 0) {
            return null;
        }
        return $this->transactionType['value'];
    }

    /**
     * Sets Transaction Type.
     * Transaction type Colco
     *
     * @maps TransactionType
     */
    public function setTransactionType(?string $transactionType): void
    {
        $this->transactionType['value'] = $transactionType;
    }

    /**
     * Unsets Transaction Type.
     * Transaction type Colco
     */
    public function unsetTransactionType(): void
    {
        $this->transactionType = [];
    }

    /**
     * Returns U TC Offset.
     * Leaving country
     */
    public function getUTCOffset(): ?string
    {
        if (count($this->uTCOffset) == 0) {
            return null;
        }
        return $this->uTCOffset['value'];
    }

    /**
     * Sets U TC Offset.
     * Leaving country
     *
     * @maps UTCOffset
     */
    public function setUTCOffset(?string $uTCOffset): void
    {
        $this->uTCOffset['value'] = $uTCOffset;
    }

    /**
     * Unsets U TC Offset.
     * Leaving country
     */
    public function unsetUTCOffset(): void
    {
        $this->uTCOffset = [];
    }

    /**
     * Returns V at Category.
     * To which category and counry does the  VAT come under
     */
    public function getVATCategory(): ?string
    {
        if (count($this->vATCategory) == 0) {
            return null;
        }
        return $this->vATCategory['value'];
    }

    /**
     * Sets V at Category.
     * To which category and counry does the  VAT come under
     *
     * @maps VATCategory
     */
    public function setVATCategory(?string $vATCategory): void
    {
        $this->vATCategory['value'] = $vATCategory;
    }

    /**
     * Unsets V at Category.
     * To which category and counry does the  VAT come under
     */
    public function unsetVATCategory(): void
    {
        $this->vATCategory = [];
    }

    /**
     * Returns V at Rate.
     * VAT rate
     */
    public function getVATRate(): ?float
    {
        if (count($this->vATRate) == 0) {
            return null;
        }
        return $this->vATRate['value'];
    }

    /**
     * Sets V at Rate.
     * VAT rate
     *
     * @maps VATRate
     */
    public function setVATRate(?float $vATRate): void
    {
        $this->vATRate['value'] = $vATRate;
    }

    /**
     * Unsets V at Rate.
     * VAT rate
     */
    public function unsetVATRate(): void
    {
        $this->vATRate = [];
    }

    /**
     * Returns Vehicle Registration.
     * Vehicle registration number
     */
    public function getVehicleRegistration(): ?string
    {
        if (count($this->vehicleRegistration) == 0) {
            return null;
        }
        return $this->vehicleRegistration['value'];
    }

    /**
     * Sets Vehicle Registration.
     * Vehicle registration number
     *
     * @maps VehicleRegistration
     */
    public function setVehicleRegistration(?string $vehicleRegistration): void
    {
        $this->vehicleRegistration['value'] = $vehicleRegistration;
    }

    /**
     * Unsets Vehicle Registration.
     * Vehicle registration number
     */
    public function unsetVehicleRegistration(): void
    {
        $this->vehicleRegistration = [];
    }

    /**
     * Returns Is Cancelled.
     * Check if the pruchase is cancelled
     */
    public function getIsCancelled(): ?string
    {
        if (count($this->isCancelled) == 0) {
            return null;
        }
        return $this->isCancelled['value'];
    }

    /**
     * Sets Is Cancelled.
     * Check if the pruchase is cancelled
     *
     * @maps IsCancelled
     */
    public function setIsCancelled(?string $isCancelled): void
    {
        $this->isCancelled['value'] = $isCancelled;
    }

    /**
     * Unsets Is Cancelled.
     * Check if the pruchase is cancelled
     */
    public function unsetIsCancelled(): void
    {
        $this->isCancelled = [];
    }

    /**
     * Returns Col Co Gross Amount.
     * Gross amount from Colco
     */
    public function getColCoGrossAmount(): ?float
    {
        if (count($this->colCoGrossAmount) == 0) {
            return null;
        }
        return $this->colCoGrossAmount['value'];
    }

    /**
     * Sets Col Co Gross Amount.
     * Gross amount from Colco
     *
     * @maps ColCoGrossAmount
     */
    public function setColCoGrossAmount(?float $colCoGrossAmount): void
    {
        $this->colCoGrossAmount['value'] = $colCoGrossAmount;
    }

    /**
     * Unsets Col Co Gross Amount.
     * Gross amount from Colco
     */
    public function unsetColCoGrossAmount(): void
    {
        $this->colCoGrossAmount = [];
    }

    /**
     * Returns Col Co Net Amount.
     * Net amount from Colco
     */
    public function getColCoNetAmount(): ?float
    {
        if (count($this->colCoNetAmount) == 0) {
            return null;
        }
        return $this->colCoNetAmount['value'];
    }

    /**
     * Sets Col Co Net Amount.
     * Net amount from Colco
     *
     * @maps ColCoNetAmount
     */
    public function setColCoNetAmount(?float $colCoNetAmount): void
    {
        $this->colCoNetAmount['value'] = $colCoNetAmount;
    }

    /**
     * Unsets Col Co Net Amount.
     * Net amount from Colco
     */
    public function unsetColCoNetAmount(): void
    {
        $this->colCoNetAmount = [];
    }

    /**
     * Returns Col Co VAT Amount.
     * Colco VAT amount
     */
    public function getColCoVATAmount(): ?float
    {
        if (count($this->colCoVATAmount) == 0) {
            return null;
        }
        return $this->colCoVATAmount['value'];
    }

    /**
     * Sets Col Co VAT Amount.
     * Colco VAT amount
     *
     * @maps ColCoVATAmount
     */
    public function setColCoVATAmount(?float $colCoVATAmount): void
    {
        $this->colCoVATAmount['value'] = $colCoVATAmount;
    }

    /**
     * Unsets Col Co VAT Amount.
     * Colco VAT amount
     */
    public function unsetColCoVATAmount(): void
    {
        $this->colCoVATAmount = [];
    }

    /**
     * Returns Original Currency Symbol.
     * Original currency code
     */
    public function getOriginalCurrencySymbol(): ?string
    {
        if (count($this->originalCurrencySymbol) == 0) {
            return null;
        }
        return $this->originalCurrencySymbol['value'];
    }

    /**
     * Sets Original Currency Symbol.
     * Original currency code
     *
     * @maps OriginalCurrencySymbol
     */
    public function setOriginalCurrencySymbol(?string $originalCurrencySymbol): void
    {
        $this->originalCurrencySymbol['value'] = $originalCurrencySymbol;
    }

    /**
     * Unsets Original Currency Symbol.
     * Original currency code
     */
    public function unsetOriginalCurrencySymbol(): void
    {
        $this->originalCurrencySymbol = [];
    }

    /**
     * Returns Original Currency Code.
     * Original currency code
     */
    public function getOriginalCurrencyCode(): ?string
    {
        if (count($this->originalCurrencyCode) == 0) {
            return null;
        }
        return $this->originalCurrencyCode['value'];
    }

    /**
     * Sets Original Currency Code.
     * Original currency code
     *
     * @maps OriginalCurrencyCode
     */
    public function setOriginalCurrencyCode(?string $originalCurrencyCode): void
    {
        $this->originalCurrencyCode['value'] = $originalCurrencyCode;
    }

    /**
     * Unsets Original Currency Code.
     * Original currency code
     */
    public function unsetOriginalCurrencyCode(): void
    {
        $this->originalCurrencyCode = [];
    }

    /**
     * Returns Original VAT Amount.
     * Original VAT amount
     */
    public function getOriginalVATAmount(): ?float
    {
        if (count($this->originalVATAmount) == 0) {
            return null;
        }
        return $this->originalVATAmount['value'];
    }

    /**
     * Sets Original VAT Amount.
     * Original VAT amount
     *
     * @maps OriginalVATAmount
     */
    public function setOriginalVATAmount(?float $originalVATAmount): void
    {
        $this->originalVATAmount['value'] = $originalVATAmount;
    }

    /**
     * Unsets Original VAT Amount.
     * Original VAT amount
     */
    public function unsetOriginalVATAmount(): void
    {
        $this->originalVATAmount = [];
    }

    /**
     * Returns Emboss Text.
     * Comapany name embosses in text
     */
    public function getEmbossText(): ?string
    {
        if (count($this->embossText) == 0) {
            return null;
        }
        return $this->embossText['value'];
    }

    /**
     * Sets Emboss Text.
     * Comapany name embosses in text
     *
     * @maps EmbossText
     */
    public function setEmbossText(?string $embossText): void
    {
        $this->embossText['value'] = $embossText;
    }

    /**
     * Unsets Emboss Text.
     * Comapany name embosses in text
     */
    public function unsetEmbossText(): void
    {
        $this->embossText = [];
    }

    /**
     * Returns Original Exchange Rate.
     * Orginal exchange rate
     */
    public function getOriginalExchangeRate(): ?float
    {
        if (count($this->originalExchangeRate) == 0) {
            return null;
        }
        return $this->originalExchangeRate['value'];
    }

    /**
     * Sets Original Exchange Rate.
     * Orginal exchange rate
     *
     * @maps OriginalExchangeRate
     */
    public function setOriginalExchangeRate(?float $originalExchangeRate): void
    {
        $this->originalExchangeRate['value'] = $originalExchangeRate;
    }

    /**
     * Unsets Original Exchange Rate.
     * Orginal exchange rate
     */
    public function unsetOriginalExchangeRate(): void
    {
        $this->originalExchangeRate = [];
    }

    /**
     * Returns Original Transaction Item Invoice Date.
     * Original treansaction date
     */
    public function getOriginalTransactionItemInvoiceDate(): ?\DateTime
    {
        if (count($this->originalTransactionItemInvoiceDate) == 0) {
            return null;
        }
        return $this->originalTransactionItemInvoiceDate['value'];
    }

    /**
     * Sets Original Transaction Item Invoice Date.
     * Original treansaction date
     *
     * @maps OriginalTransactionItemInvoiceDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setOriginalTransactionItemInvoiceDate(?\DateTime $originalTransactionItemInvoiceDate): void
    {
        $this->originalTransactionItemInvoiceDate['value'] = $originalTransactionItemInvoiceDate;
    }

    /**
     * Unsets Original Transaction Item Invoice Date.
     * Original treansaction date
     */
    public function unsetOriginalTransactionItemInvoiceDate(): void
    {
        $this->originalTransactionItemInvoiceDate = [];
    }

    /**
     * Returns Fee Type Id.
     * Fee type identifier
     */
    public function getFeeTypeId(): ?int
    {
        if (count($this->feeTypeId) == 0) {
            return null;
        }
        return $this->feeTypeId['value'];
    }

    /**
     * Sets Fee Type Id.
     * Fee type identifier
     *
     * @maps FeeTypeId
     */
    public function setFeeTypeId(?int $feeTypeId): void
    {
        $this->feeTypeId['value'] = $feeTypeId;
    }

    /**
     * Unsets Fee Type Id.
     * Fee type identifier
     */
    public function unsetFeeTypeId(): void
    {
        $this->feeTypeId = [];
    }

    /**
     * Returns Line Item Description.
     * Line item identifier of the product
     */
    public function getLineItemDescription(): ?bool
    {
        if (count($this->lineItemDescription) == 0) {
            return null;
        }
        return $this->lineItemDescription['value'];
    }

    /**
     * Sets Line Item Description.
     * Line item identifier of the product
     *
     * @maps LineItemDescription
     */
    public function setLineItemDescription(?bool $lineItemDescription): void
    {
        $this->lineItemDescription['value'] = $lineItemDescription;
    }

    /**
     * Unsets Line Item Description.
     * Line item identifier of the product
     */
    public function unsetLineItemDescription(): void
    {
        $this->lineItemDescription = [];
    }

    /**
     * Returns Fee Rule Description.
     * Fee rule description
     */
    public function getFeeRuleDescription(): ?string
    {
        if (count($this->feeRuleDescription) == 0) {
            return null;
        }
        return $this->feeRuleDescription['value'];
    }

    /**
     * Sets Fee Rule Description.
     * Fee rule description
     *
     * @maps FeeRuleDescription
     */
    public function setFeeRuleDescription(?string $feeRuleDescription): void
    {
        $this->feeRuleDescription['value'] = $feeRuleDescription;
    }

    /**
     * Unsets Fee Rule Description.
     * Fee rule description
     */
    public function unsetFeeRuleDescription(): void
    {
        $this->feeRuleDescription = [];
    }

    /**
     * Returns Frequency.
     * Frequency of transaction
     */
    public function getFrequency(): ?int
    {
        if (count($this->frequency) == 0) {
            return null;
        }
        return $this->frequency['value'];
    }

    /**
     * Sets Frequency.
     * Frequency of transaction
     *
     * @maps Frequency
     */
    public function setFrequency(?int $frequency): void
    {
        $this->frequency['value'] = $frequency;
    }

    /**
     * Unsets Frequency.
     * Frequency of transaction
     */
    public function unsetFrequency(): void
    {
        $this->frequency = [];
    }

    /**
     * Returns Fee Rule Id.
     * Fee rule identifier
     */
    public function getFeeRuleId(): ?int
    {
        if (count($this->feeRuleId) == 0) {
            return null;
        }
        return $this->feeRuleId['value'];
    }

    /**
     * Sets Fee Rule Id.
     * Fee rule identifier
     *
     * @maps FeeRuleId
     */
    public function setFeeRuleId(?int $feeRuleId): void
    {
        $this->feeRuleId['value'] = $feeRuleId;
    }

    /**
     * Unsets Fee Rule Id.
     * Fee rule identifier
     */
    public function unsetFeeRuleId(): void
    {
        $this->feeRuleId = [];
    }

    /**
     * Returns System Entry Date.
     * Entry date in the system
     */
    public function getSystemEntryDate(): ?\DateTime
    {
        if (count($this->systemEntryDate) == 0) {
            return null;
        }
        return $this->systemEntryDate['value'];
    }

    /**
     * Sets System Entry Date.
     * Entry date in the system
     *
     * @maps SystemEntryDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setSystemEntryDate(?\DateTime $systemEntryDate): void
    {
        $this->systemEntryDate['value'] = $systemEntryDate;
    }

    /**
     * Unsets System Entry Date.
     * Entry date in the system
     */
    public function unsetSystemEntryDate(): void
    {
        $this->systemEntryDate = [];
    }

    /**
     * Returns System Entry Time.
     * Entry time in the system
     */
    public function getSystemEntryTime(): ?\DateTime
    {
        if (count($this->systemEntryTime) == 0) {
            return null;
        }
        return $this->systemEntryTime['value'];
    }

    /**
     * Sets System Entry Time.
     * Entry time in the system
     *
     * @maps SystemEntryTime
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setSystemEntryTime(?\DateTime $systemEntryTime): void
    {
        $this->systemEntryTime['value'] = $systemEntryTime;
    }

    /**
     * Unsets System Entry Time.
     * Entry time in the system
     */
    public function unsetSystemEntryTime(): void
    {
        $this->systemEntryTime = [];
    }

    /**
     * Returns Is Manual.
     * Checking if its manual
     */
    public function getIsManual(): ?string
    {
        if (count($this->isManual) == 0) {
            return null;
        }
        return $this->isManual['value'];
    }

    /**
     * Sets Is Manual.
     * Checking if its manual
     *
     * @maps IsManual
     */
    public function setIsManual(?string $isManual): void
    {
        $this->isManual['value'] = $isManual;
    }

    /**
     * Unsets Is Manual.
     * Checking if its manual
     */
    public function unsetIsManual(): void
    {
        $this->isManual = [];
    }

    /**
     * Returns Original Transaction Item Id.
     * Is it manual
     */
    public function getOriginalTransactionItemId(): ?string
    {
        if (count($this->originalTransactionItemId) == 0) {
            return null;
        }
        return $this->originalTransactionItemId['value'];
    }

    /**
     * Sets Original Transaction Item Id.
     * Is it manual
     *
     * @maps OriginalTransactionItemId
     */
    public function setOriginalTransactionItemId(?string $originalTransactionItemId): void
    {
        $this->originalTransactionItemId['value'] = $originalTransactionItemId;
    }

    /**
     * Unsets Original Transaction Item Id.
     * Is it manual
     */
    public function unsetOriginalTransactionItemId(): void
    {
        $this->originalTransactionItemId = [];
    }

    /**
     * Returns Original Transaction Item Invoice Number.
     * Original invoice transaction number
     */
    public function getOriginalTransactionItemInvoiceNumber(): ?int
    {
        if (count($this->originalTransactionItemInvoiceNumber) == 0) {
            return null;
        }
        return $this->originalTransactionItemInvoiceNumber['value'];
    }

    /**
     * Sets Original Transaction Item Invoice Number.
     * Original invoice transaction number
     *
     * @maps OriginalTransactionItemInvoiceNumber
     */
    public function setOriginalTransactionItemInvoiceNumber(?int $originalTransactionItemInvoiceNumber): void
    {
        $this->originalTransactionItemInvoiceNumber['value'] = $originalTransactionItemInvoiceNumber;
    }

    /**
     * Unsets Original Transaction Item Invoice Number.
     * Original invoice transaction number
     */
    public function unsetOriginalTransactionItemInvoiceNumber(): void
    {
        $this->originalTransactionItemInvoiceNumber = [];
    }

    /**
     * Returns Original Transaction Item Invoice Id.
     * Original Invoice transaction Identifier
     */
    public function getOriginalTransactionItemInvoiceId(): ?int
    {
        if (count($this->originalTransactionItemInvoiceId) == 0) {
            return null;
        }
        return $this->originalTransactionItemInvoiceId['value'];
    }

    /**
     * Sets Original Transaction Item Invoice Id.
     * Original Invoice transaction Identifier
     *
     * @maps OriginalTransactionItemInvoiceId
     */
    public function setOriginalTransactionItemInvoiceId(?int $originalTransactionItemInvoiceId): void
    {
        $this->originalTransactionItemInvoiceId['value'] = $originalTransactionItemInvoiceId;
    }

    /**
     * Unsets Original Transaction Item Invoice Id.
     * Original Invoice transaction Identifier
     */
    public function unsetOriginalTransactionItemInvoiceId(): void
    {
        $this->originalTransactionItemInvoiceId = [];
    }

    /**
     * Returns Payer Short Name.
     * Payers short name
     */
    public function getPayerShortName(): ?string
    {
        if (count($this->payerShortName) == 0) {
            return null;
        }
        return $this->payerShortName['value'];
    }

    /**
     * Sets Payer Short Name.
     * Payers short name
     *
     * @maps PayerShortName
     */
    public function setPayerShortName(?string $payerShortName): void
    {
        $this->payerShortName['value'] = $payerShortName;
    }

    /**
     * Unsets Payer Short Name.
     * Payers short name
     */
    public function unsetPayerShortName(): void
    {
        $this->payerShortName = [];
    }

    /**
     * Returns Reverse Charge.
     * Is reverse charge?
     */
    public function getReverseCharge(): ?string
    {
        if (count($this->reverseCharge) == 0) {
            return null;
        }
        return $this->reverseCharge['value'];
    }

    /**
     * Sets Reverse Charge.
     * Is reverse charge?
     *
     * @maps ReverseCharge
     */
    public function setReverseCharge(?string $reverseCharge): void
    {
        $this->reverseCharge['value'] = $reverseCharge;
    }

    /**
     * Unsets Reverse Charge.
     * Is reverse charge?
     */
    public function unsetReverseCharge(): void
    {
        $this->reverseCharge = [];
    }

    /**
     * Returns Original Gross Amount.
     * Original gross amount
     */
    public function getOriginalGrossAmount(): ?float
    {
        if (count($this->originalGrossAmount) == 0) {
            return null;
        }
        return $this->originalGrossAmount['value'];
    }

    /**
     * Sets Original Gross Amount.
     * Original gross amount
     *
     * @maps OriginalGrossAmount
     */
    public function setOriginalGrossAmount(?float $originalGrossAmount): void
    {
        $this->originalGrossAmount['value'] = $originalGrossAmount;
    }

    /**
     * Unsets Original Gross Amount.
     * Original gross amount
     */
    public function unsetOriginalGrossAmount(): void
    {
        $this->originalGrossAmount = [];
    }

    /**
     * Returns Original Net Amount.
     * Original Net amount
     */
    public function getOriginalNetAmount(): ?float
    {
        if (count($this->originalNetAmount) == 0) {
            return null;
        }
        return $this->originalNetAmount['value'];
    }

    /**
     * Sets Original Net Amount.
     * Original Net amount
     *
     * @maps OriginalNetAmount
     */
    public function setOriginalNetAmount(?float $originalNetAmount): void
    {
        $this->originalNetAmount['value'] = $originalNetAmount;
    }

    /**
     * Unsets Original Net Amount.
     * Original Net amount
     */
    public function unsetOriginalNetAmount(): void
    {
        $this->originalNetAmount = [];
    }

    /**
     * Returns Unit of Measure.
     * Unit of measure
     */
    public function getUnitOfMeasure(): ?string
    {
        if (count($this->unitOfMeasure) == 0) {
            return null;
        }
        return $this->unitOfMeasure['value'];
    }

    /**
     * Sets Unit of Measure.
     * Unit of measure
     *
     * @maps UnitOfMeasure
     */
    public function setUnitOfMeasure(?string $unitOfMeasure): void
    {
        $this->unitOfMeasure['value'] = $unitOfMeasure;
    }

    /**
     * Unsets Unit of Measure.
     * Unit of measure
     */
    public function unsetUnitOfMeasure(): void
    {
        $this->unitOfMeasure = [];
    }

    /**
     * Returns Road Type.
     * Type of road
     */
    public function getRoadType(): ?string
    {
        if (count($this->roadType) == 0) {
            return null;
        }
        return $this->roadType['value'];
    }

    /**
     * Sets Road Type.
     * Type of road
     *
     * @maps RoadType
     */
    public function setRoadType(?string $roadType): void
    {
        $this->roadType['value'] = $roadType;
    }

    /**
     * Unsets Road Type.
     * Type of road
     */
    public function unsetRoadType(): void
    {
        $this->roadType = [];
    }

    /**
     * Returns Customer Country Iso Code.
     * Customer country ISO Code
     */
    public function getCustomerCountryIsoCode(): ?string
    {
        if (count($this->customerCountryIsoCode) == 0) {
            return null;
        }
        return $this->customerCountryIsoCode['value'];
    }

    /**
     * Sets Customer Country Iso Code.
     * Customer country ISO Code
     *
     * @maps CustomerCountryIsoCode
     */
    public function setCustomerCountryIsoCode(?string $customerCountryIsoCode): void
    {
        $this->customerCountryIsoCode['value'] = $customerCountryIsoCode;
    }

    /**
     * Unsets Customer Country Iso Code.
     * Customer country ISO Code
     */
    public function unsetCustomerCountryIsoCode(): void
    {
        $this->customerCountryIsoCode = [];
    }

    /**
     * Returns E V Operator.
     * EvOperator Name
     */
    public function getEVOperator(): ?string
    {
        if (count($this->eVOperator) == 0) {
            return null;
        }
        return $this->eVOperator['value'];
    }

    /**
     * Sets E V Operator.
     * EvOperator Name
     *
     * @maps EVOperator
     */
    public function setEVOperator(?string $eVOperator): void
    {
        $this->eVOperator['value'] = $eVOperator;
    }

    /**
     * Unsets E V Operator.
     * EvOperator Name
     */
    public function unsetEVOperator(): void
    {
        $this->eVOperator = [];
    }

    /**
     * Returns E V Serial Id.
     * Ev Operator identifier
     */
    public function getEVSerialId(): ?string
    {
        if (count($this->eVSerialId) == 0) {
            return null;
        }
        return $this->eVSerialId['value'];
    }

    /**
     * Sets E V Serial Id.
     * Ev Operator identifier
     *
     * @maps EVSerialId
     */
    public function setEVSerialId(?string $eVSerialId): void
    {
        $this->eVSerialId['value'] = $eVSerialId;
    }

    /**
     * Unsets E V Serial Id.
     * Ev Operator identifier
     */
    public function unsetEVSerialId(): void
    {
        $this->eVSerialId = [];
    }

    /**
     * Returns E V Charge Point Serial.
     * EV Charging point iserial identifier
     */
    public function getEVChargePointSerial(): ?string
    {
        if (count($this->eVChargePointSerial) == 0) {
            return null;
        }
        return $this->eVChargePointSerial['value'];
    }

    /**
     * Sets E V Charge Point Serial.
     * EV Charging point iserial identifier
     *
     * @maps EVChargePointSerial
     */
    public function setEVChargePointSerial(?string $eVChargePointSerial): void
    {
        $this->eVChargePointSerial['value'] = $eVChargePointSerial;
    }

    /**
     * Unsets E V Charge Point Serial.
     * EV Charging point iserial identifier
     */
    public function unsetEVChargePointSerial(): void
    {
        $this->eVChargePointSerial = [];
    }

    /**
     * Returns E V Charge Point Connector Type.
     * Ev chariging connector type
     */
    public function getEVChargePointConnectorType(): ?int
    {
        if (count($this->eVChargePointConnectorType) == 0) {
            return null;
        }
        return $this->eVChargePointConnectorType['value'];
    }

    /**
     * Sets E V Charge Point Connector Type.
     * Ev chariging connector type
     *
     * @maps EVChargePointConnectorType
     */
    public function setEVChargePointConnectorType(?int $eVChargePointConnectorType): void
    {
        $this->eVChargePointConnectorType['value'] = $eVChargePointConnectorType;
    }

    /**
     * Unsets E V Charge Point Connector Type.
     * Ev chariging connector type
     */
    public function unsetEVChargePointConnectorType(): void
    {
        $this->eVChargePointConnectorType = [];
    }

    /**
     * Returns E V Charge Point Connector Type Description.
     * EV charging point connector type description
     */
    public function getEVChargePointConnectorTypeDescription(): ?string
    {
        if (count($this->eVChargePointConnectorTypeDescription) == 0) {
            return null;
        }
        return $this->eVChargePointConnectorTypeDescription['value'];
    }

    /**
     * Sets E V Charge Point Connector Type Description.
     * EV charging point connector type description
     *
     * @maps EVChargePointConnectorTypeDescription
     */
    public function setEVChargePointConnectorTypeDescription(?string $eVChargePointConnectorTypeDescription): void
    {
        $this->eVChargePointConnectorTypeDescription['value'] = $eVChargePointConnectorTypeDescription;
    }

    /**
     * Unsets E V Charge Point Connector Type Description.
     * EV charging point connector type description
     */
    public function unsetEVChargePointConnectorTypeDescription(): void
    {
        $this->eVChargePointConnectorTypeDescription = [];
    }

    /**
     * Returns E V Charge Duration.
     * Ev charging Duration
     */
    public function getEVChargeDuration(): ?string
    {
        if (count($this->eVChargeDuration) == 0) {
            return null;
        }
        return $this->eVChargeDuration['value'];
    }

    /**
     * Sets E V Charge Duration.
     * Ev charging Duration
     *
     * @maps EVChargeDuration
     */
    public function setEVChargeDuration(?string $eVChargeDuration): void
    {
        $this->eVChargeDuration['value'] = $eVChargeDuration;
    }

    /**
     * Unsets E V Charge Duration.
     * Ev charging Duration
     */
    public function unsetEVChargeDuration(): void
    {
        $this->eVChargeDuration = [];
    }

    /**
     * Returns E V Charge Start Date.
     * EvCharging start Date
     */
    public function getEVChargeStartDate(): ?\DateTime
    {
        if (count($this->eVChargeStartDate) == 0) {
            return null;
        }
        return $this->eVChargeStartDate['value'];
    }

    /**
     * Sets E V Charge Start Date.
     * EvCharging start Date
     *
     * @maps EVChargeStartDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setEVChargeStartDate(?\DateTime $eVChargeStartDate): void
    {
        $this->eVChargeStartDate['value'] = $eVChargeStartDate;
    }

    /**
     * Unsets E V Charge Start Date.
     * EvCharging start Date
     */
    public function unsetEVChargeStartDate(): void
    {
        $this->eVChargeStartDate = [];
    }

    /**
     * Returns E V Charge Start Time.
     * EvCharging start time
     */
    public function getEVChargeStartTime(): ?\DateTime
    {
        if (count($this->eVChargeStartTime) == 0) {
            return null;
        }
        return $this->eVChargeStartTime['value'];
    }

    /**
     * Sets E V Charge Start Time.
     * EvCharging start time
     *
     * @maps EVChargeStartTime
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setEVChargeStartTime(?\DateTime $eVChargeStartTime): void
    {
        $this->eVChargeStartTime['value'] = $eVChargeStartTime;
    }

    /**
     * Unsets E V Charge Start Time.
     * EvCharging start time
     */
    public function unsetEVChargeStartTime(): void
    {
        $this->eVChargeStartTime = [];
    }

    /**
     * Returns E V Charge End Date.
     * EvCharging End Date
     */
    public function getEVChargeEndDate(): ?\DateTime
    {
        if (count($this->eVChargeEndDate) == 0) {
            return null;
        }
        return $this->eVChargeEndDate['value'];
    }

    /**
     * Sets E V Charge End Date.
     * EvCharging End Date
     *
     * @maps EVChargeEndDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setEVChargeEndDate(?\DateTime $eVChargeEndDate): void
    {
        $this->eVChargeEndDate['value'] = $eVChargeEndDate;
    }

    /**
     * Unsets E V Charge End Date.
     * EvCharging End Date
     */
    public function unsetEVChargeEndDate(): void
    {
        $this->eVChargeEndDate = [];
    }

    /**
     * Returns E V Charge End Time.
     * EvCharging End time
     */
    public function getEVChargeEndTime(): ?\DateTime
    {
        if (count($this->eVChargeEndTime) == 0) {
            return null;
        }
        return $this->eVChargeEndTime['value'];
    }

    /**
     * Sets E V Charge End Time.
     * EvCharging End time
     *
     * @maps EVChargeEndTime
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setEVChargeEndTime(?\DateTime $eVChargeEndTime): void
    {
        $this->eVChargeEndTime['value'] = $eVChargeEndTime;
    }

    /**
     * Unsets E V Charge End Time.
     * EvCharging End time
     */
    public function unsetEVChargeEndTime(): void
    {
        $this->eVChargeEndTime = [];
    }

    /**
     * Returns Hosting Collecting Company Number.
     */
    public function getHostingCollectingCompanyNumber(): ?int
    {
        if (count($this->hostingCollectingCompanyNumber) == 0) {
            return null;
        }
        return $this->hostingCollectingCompanyNumber['value'];
    }

    /**
     * Sets Hosting Collecting Company Number.
     *
     * @maps HostingCollectingCompanyNumber
     */
    public function setHostingCollectingCompanyNumber(?int $hostingCollectingCompanyNumber): void
    {
        $this->hostingCollectingCompanyNumber['value'] = $hostingCollectingCompanyNumber;
    }

    /**
     * Unsets Hosting Collecting Company Number.
     */
    public function unsetHostingCollectingCompanyNumber(): void
    {
        $this->hostingCollectingCompanyNumber = [];
    }

    /**
     * Returns Transaction Id.
     */
    public function getTransactionId(): ?float
    {
        if (count($this->transactionId) == 0) {
            return null;
        }
        return $this->transactionId['value'];
    }

    /**
     * Sets Transaction Id.
     *
     * @maps TransactionId
     */
    public function setTransactionId(?float $transactionId): void
    {
        $this->transactionId['value'] = $transactionId;
    }

    /**
     * Unsets Transaction Id.
     */
    public function unsetTransactionId(): void
    {
        $this->transactionId = [];
    }

    /**
     * Returns Fuel Only.
     */
    public function getFuelOnly(): ?bool
    {
        if (count($this->fuelOnly) == 0) {
            return null;
        }
        return $this->fuelOnly['value'];
    }

    /**
     * Sets Fuel Only.
     *
     * @maps FuelOnly
     */
    public function setFuelOnly(?bool $fuelOnly): void
    {
        $this->fuelOnly['value'] = $fuelOnly;
    }

    /**
     * Unsets Fuel Only.
     */
    public function unsetFuelOnly(): void
    {
        $this->fuelOnly = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountName)) {
            $json['AccountName']                             = $this->accountName['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                               = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                           = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']                        = $this->accountShortName['value'];
        }
        if (!empty($this->additional1)) {
            $json['Additional1']                             = $this->additional1['value'];
        }
        if (!empty($this->additional2)) {
            $json['Additional2']                             = $this->additional2['value'];
        }
        if (!empty($this->additional3)) {
            $json['Additional3']                             = $this->additional3['value'];
        }
        if (!empty($this->additional4)) {
            $json['Additional4']                             = $this->additional4['value'];
        }
        if (!empty($this->allowClearing)) {
            $json['AllowClearing']                           = $this->allowClearing['value'];
        }
        if (!empty($this->authorisationCode)) {
            $json['AuthorisationCode']                       = $this->authorisationCode['value'];
        }
        if (!empty($this->transactionStatus)) {
            $json['TransactionStatus']                       = $this->transactionStatus['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                              = $this->driverName['value'];
        }
        if (!empty($this->cardExpiryPeriod)) {
            $json['CardExpiryPeriod']                        = $this->cardExpiryPeriod['value'];
        }
        if (!empty($this->cardExpiry)) {
            $json['CardExpiry']                              = DateTimeHelper::toSimpleDate($this->cardExpiry['value']);
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']                             = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']                           = $this->cardGroupName['value'];
        }
        if (!empty($this->issuerCode)) {
            $json['IssuerCode']                              = $this->issuerCode['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']                                 = $this->cardPAN['value'];
        }
        if (!empty($this->releaseCode)) {
            $json['ReleaseCode']                             = $this->releaseCode['value'];
        }
        if (!empty($this->cardSequenceNumber)) {
            $json['CardSequenceNumber']                      = $this->cardSequenceNumber['value'];
        }
        if (!empty($this->cardType)) {
            $json['CardType']                                = $this->cardType['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                               = $this->colCoCode['value'];
        }
        if (!empty($this->unitDiscountInvoiceCurrency)) {
            $json['UnitDiscountInvoiceCurrency']             = $this->unitDiscountInvoiceCurrency['value'];
        }
        if (isset($this->colCoExchangeRate)) {
            $json['ColCoExchangeRate']                       = $this->colCoExchangeRate;
        }
        if (!empty($this->invoiceCurrencySymbol)) {
            $json['InvoiceCurrencySymbol']                   = $this->invoiceCurrencySymbol['value'];
        }
        if (!empty($this->correctionFlag)) {
            $json['CorrectionFlag']                          = $this->correctionFlag['value'];
        }
        if (!empty($this->cRMNumber)) {
            $json['CRMNumber']                               = $this->cRMNumber['value'];
        }
        if (!empty($this->customerCountry)) {
            $json['CustomerCountry']                         = $this->customerCountry['value'];
        }
        if (!empty($this->customerCurrencyCode)) {
            $json['CustomerCurrencyCode']                    = $this->customerCurrencyCode['value'];
        }
        if (!empty($this->customerCurrencySymbol)) {
            $json['CustomerCurrencySymbol']                  = $this->customerCurrencySymbol['value'];
        }
        if (!empty($this->rebateonNetAmountInCustomerCurrency)) {
            $json['RebateonNetAmountInCustomerCurrency']     = $this->rebateonNetAmountInCustomerCurrency['value'];
        }
        if (!empty($this->effectiveDiscountInCustomerCurrency)) {
            $json['EffectiveDiscountInCustomerCurrency']     = $this->effectiveDiscountInCustomerCurrency['value'];
        }
        if (!empty($this->effectiveUnitDiscountInCustomerCurrency)) {
            $json['EffectiveUnitDiscountInCustomerCurrency'] = $this->effectiveUnitDiscountInCustomerCurrency['value'];
        }
        if (!empty($this->unitPriceInInvoiceCurrency)) {
            $json['UnitPriceInInvoiceCurrency']              = $this->unitPriceInInvoiceCurrency['value'];
        }
        if (!empty($this->invoiceTax)) {
            $json['InvoiceTax']                              = $this->invoiceTax['value'];
        }
        if (!empty($this->invoiceGrossAmount)) {
            $json['InvoiceGrossAmount']                      = $this->invoiceGrossAmount['value'];
        }
        if (!empty($this->invoiceNetAmount)) {
            $json['InvoiceNetAmount']                        = $this->invoiceNetAmount['value'];
        }
        if (!empty($this->vATonNetAmountInCustomerCurrency)) {
            $json['VATonNetAmountInCustomerCurrency']        = $this->vATonNetAmountInCustomerCurrency['value'];
        }
        if (!empty($this->customerRetailPriceUnitGross)) {
            $json['CustomerRetailPriceUnitGross']            = $this->customerRetailPriceUnitGross['value'];
        }
        if (!empty($this->customerRetailValueTotalGross)) {
            $json['CustomerRetailValueTotalGross']           = $this->customerRetailValueTotalGross['value'];
        }
        if (!empty($this->customerRetailValueTotalNet)) {
            $json['CustomerRetailValueTotalNet']             = $this->customerRetailValueTotalNet['value'];
        }
        if (!empty($this->transactionTypeDescription)) {
            $json['TransactionTypeDescription']              = $this->transactionTypeDescription['value'];
        }
        if (!empty($this->rebateonNetAmountInTransactionCurrency)) {
            $json['RebateonNetAmountInTransactionCurrency']  = $this->rebateonNetAmountInTransactionCurrency['value'];
        }
        if (!empty($this->effectiveDiscountInTrxCurrency)) {
            $json['EffectiveDiscountInTrxCurrency']          = $this->effectiveDiscountInTrxCurrency['value'];
        }
        if (!empty($this->delCoToColCoExchangeRate)) {
            $json['DelCoToColCoExchangeRate']                = $this->delCoToColCoExchangeRate['value'];
        }
        if (isset($this->cards)) {
            $json['Cards']                                   = $this->cards;
        }
        if (!empty($this->unitDiscountTransactionCurrency)) {
            $json['UnitDiscountTransactionCurrency']         = $this->unitDiscountTransactionCurrency['value'];
        }
        if (!empty($this->transactionGrossAmount)) {
            $json['TransactionGrossAmount']                  = $this->transactionGrossAmount['value'];
        }
        if (!empty($this->transactionNetAmount)) {
            $json['TransactionNetAmount']                    = $this->transactionNetAmount['value'];
        }
        if (!empty($this->transactionTax)) {
            $json['TransactionTax']                          = $this->transactionTax['value'];
        }
        if (!empty($this->vATonNetAmount)) {
            $json['VATonNetAmount']                          = $this->vATonNetAmount['value'];
        }
        if (!empty($this->delcoListPriceUnitNet)) {
            $json['DelcoListPriceUnitNet']                   = $this->delcoListPriceUnitNet['value'];
        }
        if (!empty($this->delcoRetailPriceUnitGross)) {
            $json['DelcoRetailPriceUnitGross']               = $this->delcoRetailPriceUnitGross['value'];
        }
        if (!empty($this->unitPriceInTransactionCurrency)) {
            $json['UnitPriceInTransactionCurrency']          = $this->unitPriceInTransactionCurrency['value'];
        }
        if (!empty($this->delcoRetailPriceUnitNet)) {
            $json['DelcoRetailPriceUnitNet']                 = $this->delcoRetailPriceUnitNet['value'];
        }
        if (!empty($this->delcoRetailValueTotalGross)) {
            $json['DelcoRetailValueTotalGross']              = $this->delcoRetailValueTotalGross['value'];
        }
        if (!empty($this->delcoRetailValueTotalNet)) {
            $json['DelcoRetailValueTotalNet']                = $this->delcoRetailValueTotalNet['value'];
        }
        if (!empty($this->transactionCurrencySymbol)) {
            $json['TransactionCurrencySymbol']               = $this->transactionCurrencySymbol['value'];
        }
        if (!empty($this->discountType)) {
            $json['DiscountType']                            = $this->discountType['value'];
        }
        if (!empty($this->disputeStatus)) {
            $json['DisputeStatus']                           = $this->disputeStatus['value'];
        }
        if (isset($this->isShellSite)) {
            $json['IsShellSite']                             = $this->isShellSite;
        }
        if (!empty($this->fleetIdInput)) {
            $json['FleetIdInput']                            = $this->fleetIdInput['value'];
        }
        if (!empty($this->incomingProductCode)) {
            $json['IncomingProductCode']                     = $this->incomingProductCode['value'];
        }
        if (!empty($this->postingDate)) {
            $json['PostingDate']                             =
                DateTimeHelper::toSimpleDate(
                    $this->postingDate['value']
                );
        }
        if (!empty($this->postingTime)) {
            $json['PostingTime']                             =
                DateTimeHelper::toRfc3339DateTime(
                    $this->postingTime['value']
                );
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']                             = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']                             = $this->productName['value'];
        }
        if (!empty($this->productGroupId)) {
            $json['ProductGroupId']                          = $this->productGroupId['value'];
        }
        if (!empty($this->incomingCurrencyCode)) {
            $json['IncomingCurrencyCode']                    = $this->incomingCurrencyCode['value'];
        }
        if (!empty($this->incomingSiteDescription)) {
            $json['IncomingSiteDescription']                 = $this->incomingSiteDescription['value'];
        }
        if (!empty($this->location)) {
            $json['Location']                                = $this->location['value'];
        }
        if (!empty($this->siteName)) {
            $json['SiteName']                                = $this->siteName['value'];
        }
        if (!empty($this->siteCode)) {
            $json['SiteCode']                                = $this->siteCode['value'];
        }
        if (!empty($this->incomingSiteNumber)) {
            $json['IncomingSiteNumber']                      = $this->incomingSiteNumber['value'];
        }
        if (!empty($this->invoiceCurrencyCode)) {
            $json['InvoiceCurrencyCode']                     = $this->invoiceCurrencyCode['value'];
        }
        if (!empty($this->invoiceDate)) {
            $json['InvoiceDate']                             =
                DateTimeHelper::toSimpleDate(
                    $this->invoiceDate['value']
                );
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber']                           = $this->invoiceNumber['value'];
        }
        if (!empty($this->fuelProduct)) {
            $json['FuelProduct']                             = $this->fuelProduct['value'];
        }
        if (!empty($this->vATApplicable)) {
            $json['VATApplicable']                           = $this->vATApplicable['value'];
        }
        if (!empty($this->payerName)) {
            $json['PayerName']                               = $this->payerName['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                             = $this->payerNumber['value'];
        }
        if (!empty($this->parentCustomerNumber)) {
            $json['ParentCustomerNumber']                    = $this->parentCustomerNumber['value'];
        }
        if (!empty($this->payerGroup)) {
            $json['PayerGroup']                              = $this->payerGroup['value'];
        }
        if (!empty($this->payerGroupName)) {
            $json['PayerGroupName']                          = $this->payerGroupName['value'];
        }
        if (!empty($this->checkDigit)) {
            $json['CheckDigit']                              = $this->checkDigit['value'];
        }
        if (!empty($this->netInvoiceIndicator)) {
            $json['NetInvoiceIndicator']                     = $this->netInvoiceIndicator['value'];
        }
        if (!empty($this->delcoCode)) {
            $json['DelcoCode']                               = $this->delcoCode['value'];
        }
        if (!empty($this->networkCode)) {
            $json['NetworkCode']                             = $this->networkCode['value'];
        }
        if (!empty($this->purchasedInCountry)) {
            $json['PurchasedInCountry']                      = $this->purchasedInCountry['value'];
        }
        if (!empty($this->siteCountry)) {
            $json['SiteCountry']                             = $this->siteCountry['value'];
        }
        if (!empty($this->vATCountry)) {
            $json['VATCountry']                              = $this->vATCountry['value'];
        }
        if (!empty($this->delcoName)) {
            $json['DelcoName']                               = $this->delcoName['value'];
        }
        if (!empty($this->network)) {
            $json['Network']                                 = $this->network['value'];
        }
        if (!empty($this->odometerInput)) {
            $json['OdometerInput']                           = $this->odometerInput['value'];
        }
        if (!empty($this->originalSalesItemId)) {
            $json['OriginalSalesItemId']                     = $this->originalSalesItemId['value'];
        }
        if (!empty($this->fleetIDDescription)) {
            $json['FleetIDDescription']                      = $this->fleetIDDescription['value'];
        }
        if (!empty($this->parentCustomerId)) {
            $json['ParentCustomerId']                        = $this->parentCustomerId['value'];
        }
        if (!empty($this->pINIndicator)) {
            $json['PINIndicator']                            = $this->pINIndicator['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']                        = $this->productGroupName['value'];
        }
        if (!empty($this->purchasedInCountryCode)) {
            $json['PurchasedInCountryCode']                  = $this->purchasedInCountryCode['value'];
        }
        if (!empty($this->quantity)) {
            $json['Quantity']                                = $this->quantity['value'];
        }
        if (!empty($this->rebateRate)) {
            $json['RebateRate']                              = $this->rebateRate['value'];
        }
        if (!empty($this->receiptNumber)) {
            $json['ReceiptNumber']                           = $this->receiptNumber['value'];
        }
        if (isset($this->refundFlag)) {
            $json['RefundFlag']                              =
                PricedTransactionRespV2RefundFlagEnum::checkValue(
                    $this->refundFlag
                );
        }
        if (!empty($this->siteGroupId)) {
            $json['SiteGroupId']                             = $this->siteGroupId['value'];
        }
        if (!empty($this->siteGroupName)) {
            $json['SiteGroupName']                           = $this->siteGroupName['value'];
        }
        if (!empty($this->latitude)) {
            $json['Latitude']                                = $this->latitude['value'];
        }
        if (!empty($this->longitude)) {
            $json['Longitude']                               = $this->longitude['value'];
        }
        if (!empty($this->delCoExchangeRate)) {
            $json['DelCoExchangeRate']                       = $this->delCoExchangeRate['value'];
        }
        if (!empty($this->euroRebateAmount)) {
            $json['EuroRebateAmount']                        = $this->euroRebateAmount['value'];
        }
        if (!empty($this->netEuroAmount)) {
            $json['NetEuroAmount']                           = $this->netEuroAmount['value'];
        }
        if (!empty($this->euroVATAmount)) {
            $json['EuroVATAmount']                           = $this->euroVATAmount['value'];
        }
        if (!empty($this->parentCustomerName)) {
            $json['ParentCustomerName']                      = $this->parentCustomerName['value'];
        }
        if (!empty($this->isInvoiced)) {
            $json['IsInvoiced']                              = $this->isInvoiced['value'];
        }
        if (!empty($this->transactionCurrencyCode)) {
            $json['TransactionCurrencyCode']                 = $this->transactionCurrencyCode['value'];
        }
        if (!empty($this->creditDebitCode)) {
            $json['CreditDebitCode']                         = $this->creditDebitCode['value'];
        }
        if (!empty($this->transactionDate)) {
            $json['TransactionDate']                         =
                DateTimeHelper::toSimpleDate(
                    $this->transactionDate['value']
                );
        }
        if (!empty($this->transactionTime)) {
            $json['TransactionTime']                         =
                DateTimeHelper::toRfc3339DateTime(
                    $this->transactionTime['value']
                );
        }
        if (!empty($this->transactionItemId)) {
            $json['TransactionItemId']                       = $this->transactionItemId['value'];
        }
        if (!empty($this->trnIdentifier)) {
            $json['TrnIdentifier']                           = $this->trnIdentifier['value'];
        }
        if (!empty($this->type)) {
            $json['Type']                                    = $this->type['value'];
        }
        if (!empty($this->transactionLine)) {
            $json['TransactionLine']                         = $this->transactionLine['value'];
        }
        if (!empty($this->transactionType)) {
            $json['TransactionType']                         = $this->transactionType['value'];
        }
        if (!empty($this->uTCOffset)) {
            $json['UTCOffset']                               = $this->uTCOffset['value'];
        }
        if (!empty($this->vATCategory)) {
            $json['VATCategory']                             = $this->vATCategory['value'];
        }
        if (!empty($this->vATRate)) {
            $json['VATRate']                                 = $this->vATRate['value'];
        }
        if (!empty($this->vehicleRegistration)) {
            $json['VehicleRegistration']                     = $this->vehicleRegistration['value'];
        }
        if (!empty($this->isCancelled)) {
            $json['IsCancelled']                             = $this->isCancelled['value'];
        }
        if (!empty($this->colCoGrossAmount)) {
            $json['ColCoGrossAmount']                        = $this->colCoGrossAmount['value'];
        }
        if (!empty($this->colCoNetAmount)) {
            $json['ColCoNetAmount']                          = $this->colCoNetAmount['value'];
        }
        if (!empty($this->colCoVATAmount)) {
            $json['ColCoVATAmount']                          = $this->colCoVATAmount['value'];
        }
        if (!empty($this->originalCurrencySymbol)) {
            $json['OriginalCurrencySymbol']                  = $this->originalCurrencySymbol['value'];
        }
        if (!empty($this->originalCurrencyCode)) {
            $json['OriginalCurrencyCode']                    = $this->originalCurrencyCode['value'];
        }
        if (!empty($this->originalVATAmount)) {
            $json['OriginalVATAmount']                       = $this->originalVATAmount['value'];
        }
        if (!empty($this->embossText)) {
            $json['EmbossText']                              = $this->embossText['value'];
        }
        if (!empty($this->originalExchangeRate)) {
            $json['OriginalExchangeRate']                    = $this->originalExchangeRate['value'];
        }
        if (!empty($this->originalTransactionItemInvoiceDate)) {
            $json['OriginalTransactionItemInvoiceDate']      =
                DateTimeHelper::toSimpleDate(
                    $this->originalTransactionItemInvoiceDate['value']
                );
        }
        if (!empty($this->feeTypeId)) {
            $json['FeeTypeId']                               = $this->feeTypeId['value'];
        }
        if (!empty($this->lineItemDescription)) {
            $json['LineItemDescription']                     = $this->lineItemDescription['value'];
        }
        if (!empty($this->feeRuleDescription)) {
            $json['FeeRuleDescription']                      = $this->feeRuleDescription['value'];
        }
        if (!empty($this->frequency)) {
            $json['Frequency']                               = $this->frequency['value'];
        }
        if (!empty($this->feeRuleId)) {
            $json['FeeRuleId']                               = $this->feeRuleId['value'];
        }
        if (!empty($this->systemEntryDate)) {
            $json['SystemEntryDate']                         =
                DateTimeHelper::toSimpleDate(
                    $this->systemEntryDate['value']
                );
        }
        if (!empty($this->systemEntryTime)) {
            $json['SystemEntryTime']                         =
                DateTimeHelper::toRfc3339DateTime(
                    $this->systemEntryTime['value']
                );
        }
        if (!empty($this->isManual)) {
            $json['IsManual']                                = $this->isManual['value'];
        }
        if (!empty($this->originalTransactionItemId)) {
            $json['OriginalTransactionItemId']               = $this->originalTransactionItemId['value'];
        }
        if (!empty($this->originalTransactionItemInvoiceNumber)) {
            $json['OriginalTransactionItemInvoiceNumber']    = $this->originalTransactionItemInvoiceNumber['value'];
        }
        if (!empty($this->originalTransactionItemInvoiceId)) {
            $json['OriginalTransactionItemInvoiceId']        = $this->originalTransactionItemInvoiceId['value'];
        }
        if (!empty($this->payerShortName)) {
            $json['PayerShortName']                          = $this->payerShortName['value'];
        }
        if (!empty($this->reverseCharge)) {
            $json['ReverseCharge']                           = $this->reverseCharge['value'];
        }
        if (!empty($this->originalGrossAmount)) {
            $json['OriginalGrossAmount']                     = $this->originalGrossAmount['value'];
        }
        if (!empty($this->originalNetAmount)) {
            $json['OriginalNetAmount']                       = $this->originalNetAmount['value'];
        }
        if (!empty($this->unitOfMeasure)) {
            $json['UnitOfMeasure']                           = $this->unitOfMeasure['value'];
        }
        if (!empty($this->roadType)) {
            $json['RoadType']                                = $this->roadType['value'];
        }
        if (!empty($this->customerCountryIsoCode)) {
            $json['CustomerCountryIsoCode']                  = $this->customerCountryIsoCode['value'];
        }
        if (!empty($this->eVOperator)) {
            $json['EVOperator']                              = $this->eVOperator['value'];
        }
        if (!empty($this->eVSerialId)) {
            $json['EVSerialId']                              = $this->eVSerialId['value'];
        }
        if (!empty($this->eVChargePointSerial)) {
            $json['EVChargePointSerial']                     = $this->eVChargePointSerial['value'];
        }
        if (!empty($this->eVChargePointConnectorType)) {
            $json['EVChargePointConnectorType']              = $this->eVChargePointConnectorType['value'];
        }
        if (!empty($this->eVChargePointConnectorTypeDescription)) {
            $json['EVChargePointConnectorTypeDescription']   = $this->eVChargePointConnectorTypeDescription['value'];
        }
        if (!empty($this->eVChargeDuration)) {
            $json['EVChargeDuration']                        = $this->eVChargeDuration['value'];
        }
        if (!empty($this->eVChargeStartDate)) {
            $json['EVChargeStartDate']                       =
                DateTimeHelper::toSimpleDate(
                    $this->eVChargeStartDate['value']
                );
        }
        if (!empty($this->eVChargeStartTime)) {
            $json['EVChargeStartTime']                       =
                DateTimeHelper::toRfc3339DateTime(
                    $this->eVChargeStartTime['value']
                );
        }
        if (!empty($this->eVChargeEndDate)) {
            $json['EVChargeEndDate']                         =
                DateTimeHelper::toSimpleDate(
                    $this->eVChargeEndDate['value']
                );
        }
        if (!empty($this->eVChargeEndTime)) {
            $json['EVChargeEndTime']                         =
                DateTimeHelper::toRfc3339DateTime(
                    $this->eVChargeEndTime['value']
                );
        }
        if (!empty($this->hostingCollectingCompanyNumber)) {
            $json['HostingCollectingCompanyNumber']          = $this->hostingCollectingCompanyNumber['value'];
        }
        if (!empty($this->transactionId)) {
            $json['TransactionId']                           = $this->transactionId['value'];
        }
        if (!empty($this->fuelOnly)) {
            $json['FuelOnly']                                = $this->fuelOnly['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class Address implements \JsonSerializable
{
    /**
     * @var array
     */
    private $addressId = [];

    /**
     * @var array
     */
    private $addressLine1 = [];

    /**
     * @var array
     */
    private $addressLine2 = [];

    /**
     * @var array
     */
    private $addressLine3 = [];

    /**
     * @var array
     */
    private $zipCode = [];

    /**
     * @var array
     */
    private $city = [];

    /**
     * @var array
     */
    private $regionId = [];

    /**
     * @var array
     */
    private $countryISOCode = [];

    /**
     * @var array
     */
    private $country = [];

    /**
     * @var array
     */
    private $telephone = [];

    /**
     * @var array
     */
    private $emailAddress = [];

    /**
     * @var array
     */
    private $fax = [];

    /**
     * Returns Address Id.
     * Address Id in cards platform.
     */
    public function getAddressId(): ?int
    {
        if (count($this->addressId) == 0) {
            return null;
        }
        return $this->addressId['value'];
    }

    /**
     * Sets Address Id.
     * Address Id in cards platform.
     *
     * @maps AddressId
     */
    public function setAddressId(?int $addressId): void
    {
        $this->addressId['value'] = $addressId;
    }

    /**
     * Unsets Address Id.
     * Address Id in cards platform.
     */
    public function unsetAddressId(): void
    {
        $this->addressId = [];
    }

    /**
     * Returns Address Line 1.
     * Address line1
     */
    public function getAddressLine1(): ?string
    {
        if (count($this->addressLine1) == 0) {
            return null;
        }
        return $this->addressLine1['value'];
    }

    /**
     * Sets Address Line 1.
     * Address line1
     *
     * @maps AddressLine1
     */
    public function setAddressLine1(?string $addressLine1): void
    {
        $this->addressLine1['value'] = $addressLine1;
    }

    /**
     * Unsets Address Line 1.
     * Address line1
     */
    public function unsetAddressLine1(): void
    {
        $this->addressLine1 = [];
    }

    /**
     * Returns Address Line 2.
     * Address line2
     */
    public function getAddressLine2(): ?string
    {
        if (count($this->addressLine2) == 0) {
            return null;
        }
        return $this->addressLine2['value'];
    }

    /**
     * Sets Address Line 2.
     * Address line2
     *
     * @maps AddressLine2
     */
    public function setAddressLine2(?string $addressLine2): void
    {
        $this->addressLine2['value'] = $addressLine2;
    }

    /**
     * Unsets Address Line 2.
     * Address line2
     */
    public function unsetAddressLine2(): void
    {
        $this->addressLine2 = [];
    }

    /**
     * Returns Address Line 3.
     * AddressLine3
     */
    public function getAddressLine3(): ?string
    {
        if (count($this->addressLine3) == 0) {
            return null;
        }
        return $this->addressLine3['value'];
    }

    /**
     * Sets Address Line 3.
     * AddressLine3
     *
     * @maps AddressLine3
     */
    public function setAddressLine3(?string $addressLine3): void
    {
        $this->addressLine3['value'] = $addressLine3;
    }

    /**
     * Unsets Address Line 3.
     * AddressLine3
     */
    public function unsetAddressLine3(): void
    {
        $this->addressLine3 = [];
    }

    /**
     * Returns Zip Code.
     * ZipCode
     */
    public function getZipCode(): ?string
    {
        if (count($this->zipCode) == 0) {
            return null;
        }
        return $this->zipCode['value'];
    }

    /**
     * Sets Zip Code.
     * ZipCode
     *
     * @maps ZipCode
     */
    public function setZipCode(?string $zipCode): void
    {
        $this->zipCode['value'] = $zipCode;
    }

    /**
     * Unsets Zip Code.
     * ZipCode
     */
    public function unsetZipCode(): void
    {
        $this->zipCode = [];
    }

    /**
     * Returns City.
     * City
     */
    public function getCity(): ?string
    {
        if (count($this->city) == 0) {
            return null;
        }
        return $this->city['value'];
    }

    /**
     * Sets City.
     * City
     *
     * @maps City
     */
    public function setCity(?string $city): void
    {
        $this->city['value'] = $city;
    }

    /**
     * Unsets City.
     * City
     */
    public function unsetCity(): void
    {
        $this->city = [];
    }

    /**
     * Returns Region Id.
     * Region Id of the address.
     */
    public function getRegionId(): ?int
    {
        if (count($this->regionId) == 0) {
            return null;
        }
        return $this->regionId['value'];
    }

    /**
     * Sets Region Id.
     * Region Id of the address.
     *
     * @maps RegionId
     */
    public function setRegionId(?int $regionId): void
    {
        $this->regionId['value'] = $regionId;
    }

    /**
     * Unsets Region Id.
     * Region Id of the address.
     */
    public function unsetRegionId(): void
    {
        $this->regionId = [];
    }

    /**
     * Returns Country ISO Code.
     * Country ISO code of the address
     */
    public function getCountryISOCode(): ?string
    {
        if (count($this->countryISOCode) == 0) {
            return null;
        }
        return $this->countryISOCode['value'];
    }

    /**
     * Sets Country ISO Code.
     * Country ISO code of the address
     *
     * @maps CountryISOCode
     */
    public function setCountryISOCode(?string $countryISOCode): void
    {
        $this->countryISOCode['value'] = $countryISOCode;
    }

    /**
     * Unsets Country ISO Code.
     * Country ISO code of the address
     */
    public function unsetCountryISOCode(): void
    {
        $this->countryISOCode = [];
    }

    /**
     * Returns Country.
     * Country for the address
     */
    public function getCountry(): ?string
    {
        if (count($this->country) == 0) {
            return null;
        }
        return $this->country['value'];
    }

    /**
     * Sets Country.
     * Country for the address
     *
     * @maps Country
     */
    public function setCountry(?string $country): void
    {
        $this->country['value'] = $country;
    }

    /**
     * Unsets Country.
     * Country for the address
     */
    public function unsetCountry(): void
    {
        $this->country = [];
    }

    /**
     * Returns Telephone.
     * Telephone number of the address contact
     */
    public function getTelephone(): ?string
    {
        if (count($this->telephone) == 0) {
            return null;
        }
        return $this->telephone['value'];
    }

    /**
     * Sets Telephone.
     * Telephone number of the address contact
     *
     * @maps Telephone
     */
    public function setTelephone(?string $telephone): void
    {
        $this->telephone['value'] = $telephone;
    }

    /**
     * Unsets Telephone.
     * Telephone number of the address contact
     */
    public function unsetTelephone(): void
    {
        $this->telephone = [];
    }

    /**
     * Returns Email Address.
     * Email address of the address contact
     */
    public function getEmailAddress(): ?string
    {
        if (count($this->emailAddress) == 0) {
            return null;
        }
        return $this->emailAddress['value'];
    }

    /**
     * Sets Email Address.
     * Email address of the address contact
     *
     * @maps EmailAddress
     */
    public function setEmailAddress(?string $emailAddress): void
    {
        $this->emailAddress['value'] = $emailAddress;
    }

    /**
     * Unsets Email Address.
     * Email address of the address contact
     */
    public function unsetEmailAddress(): void
    {
        $this->emailAddress = [];
    }

    /**
     * Returns Fax.
     * Fax number of the address contact
     */
    public function getFax(): ?string
    {
        if (count($this->fax) == 0) {
            return null;
        }
        return $this->fax['value'];
    }

    /**
     * Sets Fax.
     * Fax number of the address contact
     *
     * @maps Fax
     */
    public function setFax(?string $fax): void
    {
        $this->fax['value'] = $fax;
    }

    /**
     * Unsets Fax.
     * Fax number of the address contact
     */
    public function unsetFax(): void
    {
        $this->fax = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->addressId)) {
            $json['AddressId']      = $this->addressId['value'];
        }
        if (!empty($this->addressLine1)) {
            $json['AddressLine1']   = $this->addressLine1['value'];
        }
        if (!empty($this->addressLine2)) {
            $json['AddressLine2']   = $this->addressLine2['value'];
        }
        if (!empty($this->addressLine3)) {
            $json['AddressLine3']   = $this->addressLine3['value'];
        }
        if (!empty($this->zipCode)) {
            $json['ZipCode']        = $this->zipCode['value'];
        }
        if (!empty($this->city)) {
            $json['City']           = $this->city['value'];
        }
        if (!empty($this->regionId)) {
            $json['RegionId']       = $this->regionId['value'];
        }
        if (!empty($this->countryISOCode)) {
            $json['CountryISOCode'] = $this->countryISOCode['value'];
        }
        if (!empty($this->country)) {
            $json['Country']        = $this->country['value'];
        }
        if (!empty($this->telephone)) {
            $json['Telephone']      = $this->telephone['value'];
        }
        if (!empty($this->emailAddress)) {
            $json['EmailAddress']   = $this->emailAddress['value'];
        }
        if (!empty($this->fax)) {
            $json['Fax']            = $this->fax['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class MonthlyInvoiceTrend implements \JsonSerializable
{
    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $month = [];

    /**
     * @var array
     */
    private $totalNetAmount = [];

    /**
     * @var array
     */
    private $totalVATAmount = [];

    /**
     * @var array
     */
    private $year = [];

    /**
     * Returns Currency Code.
     * ISO code of invoice currency.
     *
     * Example: EUR
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * ISO code of invoice currency.
     *
     * Example: EUR
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * ISO code of invoice currency.
     *
     * Example: EUR
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Symbol of invoice currency.
     *
     * Example: €
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Symbol of invoice currency.
     *
     * Example: €
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Symbol of invoice currency.
     *
     * Example: €
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Month.
     * Month.
     */
    public function getMonth(): ?int
    {
        if (count($this->month) == 0) {
            return null;
        }
        return $this->month['value'];
    }

    /**
     * Sets Month.
     * Month.
     *
     * @maps Month
     */
    public function setMonth(?int $month): void
    {
        $this->month['value'] = $month;
    }

    /**
     * Unsets Month.
     * Month.
     */
    public function unsetMonth(): void
    {
        $this->month = [];
    }

    /**
     * Returns Total Net Amount.
     * Total net amount invoiced in this month.
     */
    public function getTotalNetAmount(): ?float
    {
        if (count($this->totalNetAmount) == 0) {
            return null;
        }
        return $this->totalNetAmount['value'];
    }

    /**
     * Sets Total Net Amount.
     * Total net amount invoiced in this month.
     *
     * @maps TotalNetAmount
     */
    public function setTotalNetAmount(?float $totalNetAmount): void
    {
        $this->totalNetAmount['value'] = $totalNetAmount;
    }

    /**
     * Unsets Total Net Amount.
     * Total net amount invoiced in this month.
     */
    public function unsetTotalNetAmount(): void
    {
        $this->totalNetAmount = [];
    }

    /**
     * Returns Total VAT Amount.
     * Total VAT amount invoiced in this month.
     */
    public function getTotalVATAmount(): ?float
    {
        if (count($this->totalVATAmount) == 0) {
            return null;
        }
        return $this->totalVATAmount['value'];
    }

    /**
     * Sets Total VAT Amount.
     * Total VAT amount invoiced in this month.
     *
     * @maps TotalVATAmount
     */
    public function setTotalVATAmount(?float $totalVATAmount): void
    {
        $this->totalVATAmount['value'] = $totalVATAmount;
    }

    /**
     * Unsets Total VAT Amount.
     * Total VAT amount invoiced in this month.
     */
    public function unsetTotalVATAmount(): void
    {
        $this->totalVATAmount = [];
    }

    /**
     * Returns Year.
     * Year.
     */
    public function getYear(): ?int
    {
        if (count($this->year) == 0) {
            return null;
        }
        return $this->year['value'];
    }

    /**
     * Sets Year.
     * Year.
     *
     * @maps Year
     */
    public function setYear(?int $year): void
    {
        $this->year['value'] = $year;
    }

    /**
     * Unsets Year.
     * Year.
     */
    public function unsetYear(): void
    {
        $this->year = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']   = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol'] = $this->currencySymbol['value'];
        }
        if (!empty($this->month)) {
            $json['Month']          = $this->month['value'];
        }
        if (!empty($this->totalNetAmount)) {
            $json['TotalNetAmount'] = $this->totalNetAmount['value'];
        }
        if (!empty($this->totalVATAmount)) {
            $json['TotalVATAmount'] = $this->totalVATAmount['value'];
        }
        if (!empty($this->year)) {
            $json['Year']           = $this->year['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

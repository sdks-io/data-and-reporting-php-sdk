<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class AuditResponseAuditsItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $additionalInformation1 = [];

    /**
     * @var array
     */
    private $additionalInformation2 = [];

    /**
     * @var array
     */
    private $additionalInformation3 = [];

    /**
     * @var array
     */
    private $additionalInformation4 = [];

    /**
     * @var array
     */
    private $additionalInformation5 = [];

    /**
     * @var array
     */
    private $additionalInformation6 = [];

    /**
     * @var array
     */
    private $additionalInformation7 = [];

    /**
     * @var array
     */
    private $additionalInformation8 = [];

    /**
     * @var array
     */
    private $additionalInformation9 = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var string|null
     */
    private $errorCode;

    /**
     * @var array
     */
    private $errorString = [];

    /**
     * @var array
     */
    private $globalRequestID = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $processedOn = [];

    /**
     * @var array
     */
    private $requestedBy = [];

    /**
     * @var array
     */
    private $requestedOperation = [];

    /**
     * @var array
     */
    private $requestReference = [];

    /**
     * @var array
     */
    private $requestType = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $submittedOn = [];

    /**
     * @var array
     */
    private $subRequestReference = [];

    /**
     * @var array
     */
    private $userDisplayName = [];

    /**
     * Returns Account Id.
     * Account id of the customer.
     * It will be the source account id in case of “Fund Transfer
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account id of the customer.
     * It will be the source account id in case of “Fund Transfer
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account id of the customer.
     * It will be the source account id in case of “Fund Transfer
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account number of the customer.
     * It will be the source account number in case of “Fund Transfer”
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account number of the customer.
     * It will be the source account number in case of “Fund Transfer”
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account number of the customer.
     * It will be the source account number in case of “Fund Transfer”
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Additional Information 1.
     * Additional information in the request.
     */
    public function getAdditionalInformation1(): ?string
    {
        if (count($this->additionalInformation1) == 0) {
            return null;
        }
        return $this->additionalInformation1['value'];
    }

    /**
     * Sets Additional Information 1.
     * Additional information in the request.
     *
     * @maps AdditionalInformation1
     */
    public function setAdditionalInformation1(?string $additionalInformation1): void
    {
        $this->additionalInformation1['value'] = $additionalInformation1;
    }

    /**
     * Unsets Additional Information 1.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation1(): void
    {
        $this->additionalInformation1 = [];
    }

    /**
     * Returns Additional Information 2.
     * Additional information in the request.
     */
    public function getAdditionalInformation2(): ?string
    {
        if (count($this->additionalInformation2) == 0) {
            return null;
        }
        return $this->additionalInformation2['value'];
    }

    /**
     * Sets Additional Information 2.
     * Additional information in the request.
     *
     * @maps AdditionalInformation2
     */
    public function setAdditionalInformation2(?string $additionalInformation2): void
    {
        $this->additionalInformation2['value'] = $additionalInformation2;
    }

    /**
     * Unsets Additional Information 2.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation2(): void
    {
        $this->additionalInformation2 = [];
    }

    /**
     * Returns Additional Information 3.
     * Additional information in the request.
     */
    public function getAdditionalInformation3(): ?string
    {
        if (count($this->additionalInformation3) == 0) {
            return null;
        }
        return $this->additionalInformation3['value'];
    }

    /**
     * Sets Additional Information 3.
     * Additional information in the request.
     *
     * @maps AdditionalInformation3
     */
    public function setAdditionalInformation3(?string $additionalInformation3): void
    {
        $this->additionalInformation3['value'] = $additionalInformation3;
    }

    /**
     * Unsets Additional Information 3.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation3(): void
    {
        $this->additionalInformation3 = [];
    }

    /**
     * Returns Additional Information 4.
     * Additional information in the request.
     */
    public function getAdditionalInformation4(): ?string
    {
        if (count($this->additionalInformation4) == 0) {
            return null;
        }
        return $this->additionalInformation4['value'];
    }

    /**
     * Sets Additional Information 4.
     * Additional information in the request.
     *
     * @maps AdditionalInformation4
     */
    public function setAdditionalInformation4(?string $additionalInformation4): void
    {
        $this->additionalInformation4['value'] = $additionalInformation4;
    }

    /**
     * Unsets Additional Information 4.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation4(): void
    {
        $this->additionalInformation4 = [];
    }

    /**
     * Returns Additional Information 5.
     * Additional information in the request.
     */
    public function getAdditionalInformation5(): ?string
    {
        if (count($this->additionalInformation5) == 0) {
            return null;
        }
        return $this->additionalInformation5['value'];
    }

    /**
     * Sets Additional Information 5.
     * Additional information in the request.
     *
     * @maps AdditionalInformation5
     */
    public function setAdditionalInformation5(?string $additionalInformation5): void
    {
        $this->additionalInformation5['value'] = $additionalInformation5;
    }

    /**
     * Unsets Additional Information 5.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation5(): void
    {
        $this->additionalInformation5 = [];
    }

    /**
     * Returns Additional Information 6.
     * Additional information in the request.
     */
    public function getAdditionalInformation6(): ?string
    {
        if (count($this->additionalInformation6) == 0) {
            return null;
        }
        return $this->additionalInformation6['value'];
    }

    /**
     * Sets Additional Information 6.
     * Additional information in the request.
     *
     * @maps AdditionalInformation6
     */
    public function setAdditionalInformation6(?string $additionalInformation6): void
    {
        $this->additionalInformation6['value'] = $additionalInformation6;
    }

    /**
     * Unsets Additional Information 6.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation6(): void
    {
        $this->additionalInformation6 = [];
    }

    /**
     * Returns Additional Information 7.
     * Additional information in the request.
     */
    public function getAdditionalInformation7(): ?string
    {
        if (count($this->additionalInformation7) == 0) {
            return null;
        }
        return $this->additionalInformation7['value'];
    }

    /**
     * Sets Additional Information 7.
     * Additional information in the request.
     *
     * @maps AdditionalInformation7
     */
    public function setAdditionalInformation7(?string $additionalInformation7): void
    {
        $this->additionalInformation7['value'] = $additionalInformation7;
    }

    /**
     * Unsets Additional Information 7.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation7(): void
    {
        $this->additionalInformation7 = [];
    }

    /**
     * Returns Additional Information 8.
     * Additional information in the request.
     */
    public function getAdditionalInformation8(): ?string
    {
        if (count($this->additionalInformation8) == 0) {
            return null;
        }
        return $this->additionalInformation8['value'];
    }

    /**
     * Sets Additional Information 8.
     * Additional information in the request.
     *
     * @maps AdditionalInformation8
     */
    public function setAdditionalInformation8(?string $additionalInformation8): void
    {
        $this->additionalInformation8['value'] = $additionalInformation8;
    }

    /**
     * Unsets Additional Information 8.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation8(): void
    {
        $this->additionalInformation8 = [];
    }

    /**
     * Returns Additional Information 9.
     * Additional information in the request.
     */
    public function getAdditionalInformation9(): ?string
    {
        if (count($this->additionalInformation9) == 0) {
            return null;
        }
        return $this->additionalInformation9['value'];
    }

    /**
     * Sets Additional Information 9.
     * Additional information in the request.
     *
     * @maps AdditionalInformation9
     */
    public function setAdditionalInformation9(?string $additionalInformation9): void
    {
        $this->additionalInformation9['value'] = $additionalInformation9;
    }

    /**
     * Unsets Additional Information 9.
     * Additional information in the request.
     */
    public function unsetAdditionalInformation9(): void
    {
        $this->additionalInformation9 = [];
    }

    /**
     * Returns Card Group Id.
     * Additional information in the request.
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Additional information in the request.
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Additional information in the request.
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card group name in the request.
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card group name in the request.
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card group name in the request.
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Card Id.
     * Card Id in the request
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card Id in the request
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card Id in the request
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting company code of the customer
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting company code of the customer
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting company code of the customer
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting company id of the customer.
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting company id of the customer.
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting company id of the customer.
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Error Code.
     * Error code of the request
     */
    public function getErrorCode(): ?string
    {
        return $this->errorCode;
    }

    /**
     * Sets Error Code.
     * Error code of the request
     *
     * @maps ErrorCode
     */
    public function setErrorCode(?string $errorCode): void
    {
        $this->errorCode = $errorCode;
    }

    /**
     * Returns Error String.
     * Error description of the request
     */
    public function getErrorString(): ?string
    {
        if (count($this->errorString) == 0) {
            return null;
        }
        return $this->errorString['value'];
    }

    /**
     * Sets Error String.
     * Error description of the request
     *
     * @maps ErrorString
     */
    public function setErrorString(?string $errorString): void
    {
        $this->errorString['value'] = $errorString;
    }

    /**
     * Unsets Error String.
     * Error description of the request
     */
    public function unsetErrorString(): void
    {
        $this->errorString = [];
    }

    /**
     * Returns Global Request ID.
     * Global unique request reference provided by client application.
     */
    public function getGlobalRequestID(): ?string
    {
        if (count($this->globalRequestID) == 0) {
            return null;
        }
        return $this->globalRequestID['value'];
    }

    /**
     * Sets Global Request ID.
     * Global unique request reference provided by client application.
     *
     * @maps GlobalRequestID
     */
    public function setGlobalRequestID(?string $globalRequestID): void
    {
        $this->globalRequestID['value'] = $globalRequestID;
    }

    /**
     * Unsets Global Request ID.
     * Global unique request reference provided by client application.
     */
    public function unsetGlobalRequestID(): void
    {
        $this->globalRequestID = [];
    }

    /**
     * Returns P AN.
     * PAN in the request.
     * If Mask PAN is enabled at Microservices configuration then all digits of the PAN, except the last 6
     * digits, will be masked.
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * PAN in the request.
     * If Mask PAN is enabled at Microservices configuration then all digits of the PAN, except the last 6
     * digits, will be masked.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * PAN in the request.
     * If Mask PAN is enabled at Microservices configuration then all digits of the PAN, except the last 6
     * digits, will be masked.
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Payer Id.
     * Payer id of the customer.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer id of the customer.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer id of the customer.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer number of the customer.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer number of the customer.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer number of the customer.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Processed On.
     * Request processed date.
     *
     * Format: yyyyMMdd HH:mm: ss
     */
    public function getProcessedOn(): ?string
    {
        if (count($this->processedOn) == 0) {
            return null;
        }
        return $this->processedOn['value'];
    }

    /**
     * Sets Processed On.
     * Request processed date.
     *
     * Format: yyyyMMdd HH:mm: ss
     *
     * @maps ProcessedOn
     */
    public function setProcessedOn(?string $processedOn): void
    {
        $this->processedOn['value'] = $processedOn;
    }

    /**
     * Unsets Processed On.
     * Request processed date.
     *
     * Format: yyyyMMdd HH:mm: ss
     */
    public function unsetProcessedOn(): void
    {
        $this->processedOn = [];
    }

    /**
     * Returns Requested By.
     * vUUID of the user who submitted this request.
     * It will be the UUID of the Driver in the case of “MobilePaymentRegistration”
     */
    public function getRequestedBy(): ?string
    {
        if (count($this->requestedBy) == 0) {
            return null;
        }
        return $this->requestedBy['value'];
    }

    /**
     * Sets Requested By.
     * vUUID of the user who submitted this request.
     * It will be the UUID of the Driver in the case of “MobilePaymentRegistration”
     *
     * @maps RequestedBy
     */
    public function setRequestedBy(?string $requestedBy): void
    {
        $this->requestedBy['value'] = $requestedBy;
    }

    /**
     * Unsets Requested By.
     * vUUID of the user who submitted this request.
     * It will be the UUID of the Driver in the case of “MobilePaymentRegistration”
     */
    public function unsetRequestedBy(): void
    {
        $this->requestedBy = [];
    }

    /**
     * Returns Requested Operation.
     * User requested operation.
     *
     * Possible values:
     *
     * •    OrderCard
     *
     * •    CreateCardGroup
     *
     * •    PINReminder
     *
     * •    MoveCard
     *
     * •    UpdateCardStatus
     *
     * •    UpdateCardGroup
     *
     * •    AutoRenew
     *
     * •    BulkCardOrder
     *
     * •    BulkCardBlock
     *
     * •    BulkCardOrderMultiAccount
     *
     * •    MobilePaymentRegistration
     *
     * •    UpdateCompanyInfo
     *
     * •    BCOSummary
     *
     * •    BCOMultiAccountSummary
     *
     * •    BCBSummary
     *
     * •    FundTransfer
     *
     * •    DeliveryAddressUpdate
     */
    public function getRequestedOperation(): ?string
    {
        if (count($this->requestedOperation) == 0) {
            return null;
        }
        return $this->requestedOperation['value'];
    }

    /**
     * Sets Requested Operation.
     * User requested operation.
     *
     * Possible values:
     *
     * •    OrderCard
     *
     * •    CreateCardGroup
     *
     * •    PINReminder
     *
     * •    MoveCard
     *
     * •    UpdateCardStatus
     *
     * •    UpdateCardGroup
     *
     * •    AutoRenew
     *
     * •    BulkCardOrder
     *
     * •    BulkCardBlock
     *
     * •    BulkCardOrderMultiAccount
     *
     * •    MobilePaymentRegistration
     *
     * •    UpdateCompanyInfo
     *
     * •    BCOSummary
     *
     * •    BCOMultiAccountSummary
     *
     * •    BCBSummary
     *
     * •    FundTransfer
     *
     * •    DeliveryAddressUpdate
     *
     * @maps RequestedOperation
     */
    public function setRequestedOperation(?string $requestedOperation): void
    {
        $this->requestedOperation['value'] = $requestedOperation;
    }

    /**
     * Unsets Requested Operation.
     * User requested operation.
     *
     * Possible values:
     *
     * •    OrderCard
     *
     * •    CreateCardGroup
     *
     * •    PINReminder
     *
     * •    MoveCard
     *
     * •    UpdateCardStatus
     *
     * •    UpdateCardGroup
     *
     * •    AutoRenew
     *
     * •    BulkCardOrder
     *
     * •    BulkCardBlock
     *
     * •    BulkCardOrderMultiAccount
     *
     * •    MobilePaymentRegistration
     *
     * •    UpdateCompanyInfo
     *
     * •    BCOSummary
     *
     * •    BCOMultiAccountSummary
     *
     * •    BCBSummary
     *
     * •    FundTransfer
     *
     * •    DeliveryAddressUpdate
     */
    public function unsetRequestedOperation(): void
    {
        $this->requestedOperation = [];
    }

    /**
     * Returns Request Reference.
     * Reference number for the requested operation.
     */
    public function getRequestReference(): ?int
    {
        if (count($this->requestReference) == 0) {
            return null;
        }
        return $this->requestReference['value'];
    }

    /**
     * Sets Request Reference.
     * Reference number for the requested operation.
     *
     * @maps RequestReference
     */
    public function setRequestReference(?int $requestReference): void
    {
        $this->requestReference['value'] = $requestReference;
    }

    /**
     * Unsets Request Reference.
     * Reference number for the requested operation.
     */
    public function unsetRequestReference(): void
    {
        $this->requestReference = [];
    }

    /**
     * Returns Request Type.
     * Request type initiated under the requested operation.
     *
     * Possible values:
     *
     * •    OrderCard
     *
     * •    CreateCardGroup
     *
     * •    PINReminder
     *
     * •    MoveCard
     *
     * •    UpdateCardStatus
     *
     * •    UpdateCardGroup
     *
     * •    AutoRenew
     *
     * •    BulkCardOrder
     *
     * •    BulkCardBlock
     *
     * •    BulkCardOrderMultiAccount
     *
     * •    MobilePaymentRegistration
     *
     * •    UpdateCompanyInfo
     *
     * •    BCOSummary
     *
     * •    BCOMultiAccountSummary
     *
     * •    BCBSummary
     *
     * •    FundTransfer
     *
     * •    DeliveryAddressUpdate
     */
    public function getRequestType(): ?string
    {
        if (count($this->requestType) == 0) {
            return null;
        }
        return $this->requestType['value'];
    }

    /**
     * Sets Request Type.
     * Request type initiated under the requested operation.
     *
     * Possible values:
     *
     * •    OrderCard
     *
     * •    CreateCardGroup
     *
     * •    PINReminder
     *
     * •    MoveCard
     *
     * •    UpdateCardStatus
     *
     * •    UpdateCardGroup
     *
     * •    AutoRenew
     *
     * •    BulkCardOrder
     *
     * •    BulkCardBlock
     *
     * •    BulkCardOrderMultiAccount
     *
     * •    MobilePaymentRegistration
     *
     * •    UpdateCompanyInfo
     *
     * •    BCOSummary
     *
     * •    BCOMultiAccountSummary
     *
     * •    BCBSummary
     *
     * •    FundTransfer
     *
     * •    DeliveryAddressUpdate
     *
     * @maps RequestType
     */
    public function setRequestType(?string $requestType): void
    {
        $this->requestType['value'] = $requestType;
    }

    /**
     * Unsets Request Type.
     * Request type initiated under the requested operation.
     *
     * Possible values:
     *
     * •    OrderCard
     *
     * •    CreateCardGroup
     *
     * •    PINReminder
     *
     * •    MoveCard
     *
     * •    UpdateCardStatus
     *
     * •    UpdateCardGroup
     *
     * •    AutoRenew
     *
     * •    BulkCardOrder
     *
     * •    BulkCardBlock
     *
     * •    BulkCardOrderMultiAccount
     *
     * •    MobilePaymentRegistration
     *
     * •    UpdateCompanyInfo
     *
     * •    BCOSummary
     *
     * •    BCOMultiAccountSummary
     *
     * •    BCBSummary
     *
     * •    FundTransfer
     *
     * •    DeliveryAddressUpdate
     */
    public function unsetRequestType(): void
    {
        $this->requestType = [];
    }

    /**
     * Returns Status.
     * Status of the request.
     * Possible values:
     * •    Success
     * •    Failed
     * •    InProgress
     * •    Submitted
     * •    Rejected
     * •    PendingApproval
     * •    MailedToCSC
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status of the request.
     * Possible values:
     * •    Success
     * •    Failed
     * •    InProgress
     * •    Submitted
     * •    Rejected
     * •    PendingApproval
     * •    MailedToCSC
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status of the request.
     * Possible values:
     * •    Success
     * •    Failed
     * •    InProgress
     * •    Submitted
     * •    Rejected
     * •    PendingApproval
     * •    MailedToCSC
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Submitted On.
     * Request submitted date.
     *
     * Format: yyyyMMdd HH:mm: ss
     */
    public function getSubmittedOn(): ?string
    {
        if (count($this->submittedOn) == 0) {
            return null;
        }
        return $this->submittedOn['value'];
    }

    /**
     * Sets Submitted On.
     * Request submitted date.
     *
     * Format: yyyyMMdd HH:mm: ss
     *
     * @maps SubmittedOn
     */
    public function setSubmittedOn(?string $submittedOn): void
    {
        $this->submittedOn['value'] = $submittedOn;
    }

    /**
     * Unsets Submitted On.
     * Request submitted date.
     *
     * Format: yyyyMMdd HH:mm: ss
     */
    public function unsetSubmittedOn(): void
    {
        $this->submittedOn = [];
    }

    /**
     * Returns Sub Request Reference.
     * Reference number for the individual request type.
     */
    public function getSubRequestReference(): ?int
    {
        if (count($this->subRequestReference) == 0) {
            return null;
        }
        return $this->subRequestReference['value'];
    }

    /**
     * Sets Sub Request Reference.
     * Reference number for the individual request type.
     *
     * @maps SubRequestReference
     */
    public function setSubRequestReference(?int $subRequestReference): void
    {
        $this->subRequestReference['value'] = $subRequestReference;
    }

    /**
     * Unsets Sub Request Reference.
     * Reference number for the individual request type.
     */
    public function unsetSubRequestReference(): void
    {
        $this->subRequestReference = [];
    }

    /**
     * Returns User Display Name.
     * Display name of the user who submitted this request.
     * It will be the Display Name of the Driver in the case of “MobilePaymentRegistration” in the below
     * format:
     */
    public function getUserDisplayName(): ?string
    {
        if (count($this->userDisplayName) == 0) {
            return null;
        }
        return $this->userDisplayName['value'];
    }

    /**
     * Sets User Display Name.
     * Display name of the user who submitted this request.
     * It will be the Display Name of the Driver in the case of “MobilePaymentRegistration” in the below
     * format:
     *
     * @maps UserDisplayName
     */
    public function setUserDisplayName(?string $userDisplayName): void
    {
        $this->userDisplayName['value'] = $userDisplayName;
    }

    /**
     * Unsets User Display Name.
     * Display name of the user who submitted this request.
     * It will be the Display Name of the Driver in the case of “MobilePaymentRegistration” in the below
     * format:
     */
    public function unsetUserDisplayName(): void
    {
        $this->userDisplayName = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']              = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']          = $this->accountNumber['value'];
        }
        if (!empty($this->additionalInformation1)) {
            $json['AdditionalInformation1'] = $this->additionalInformation1['value'];
        }
        if (!empty($this->additionalInformation2)) {
            $json['AdditionalInformation2'] = $this->additionalInformation2['value'];
        }
        if (!empty($this->additionalInformation3)) {
            $json['AdditionalInformation3'] = $this->additionalInformation3['value'];
        }
        if (!empty($this->additionalInformation4)) {
            $json['AdditionalInformation4'] = $this->additionalInformation4['value'];
        }
        if (!empty($this->additionalInformation5)) {
            $json['AdditionalInformation5'] = $this->additionalInformation5['value'];
        }
        if (!empty($this->additionalInformation6)) {
            $json['AdditionalInformation6'] = $this->additionalInformation6['value'];
        }
        if (!empty($this->additionalInformation7)) {
            $json['AdditionalInformation7'] = $this->additionalInformation7['value'];
        }
        if (!empty($this->additionalInformation8)) {
            $json['AdditionalInformation8'] = $this->additionalInformation8['value'];
        }
        if (!empty($this->additionalInformation9)) {
            $json['AdditionalInformation9'] = $this->additionalInformation9['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']            = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']          = $this->cardGroupName['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                 = $this->cardId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']              = $this->colCoCode['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                = $this->colCoId['value'];
        }
        if (isset($this->errorCode)) {
            $json['ErrorCode']              = $this->errorCode;
        }
        if (!empty($this->errorString)) {
            $json['ErrorString']            = $this->errorString['value'];
        }
        if (!empty($this->globalRequestID)) {
            $json['GlobalRequestID']        = $this->globalRequestID['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']                    = $this->pAN['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']            = $this->payerNumber['value'];
        }
        if (!empty($this->processedOn)) {
            $json['ProcessedOn']            = $this->processedOn['value'];
        }
        if (!empty($this->requestedBy)) {
            $json['RequestedBy']            = $this->requestedBy['value'];
        }
        if (!empty($this->requestedOperation)) {
            $json['RequestedOperation']     = $this->requestedOperation['value'];
        }
        if (!empty($this->requestReference)) {
            $json['RequestReference']       = $this->requestReference['value'];
        }
        if (!empty($this->requestType)) {
            $json['RequestType']            = $this->requestType['value'];
        }
        if (!empty($this->status)) {
            $json['Status']                 = $this->status['value'];
        }
        if (!empty($this->submittedOn)) {
            $json['SubmittedOn']            = $this->submittedOn['value'];
        }
        if (!empty($this->subRequestReference)) {
            $json['SubRequestReference']    = $this->subRequestReference['value'];
        }
        if (!empty($this->userDisplayName)) {
            $json['UserDisplayName']        = $this->userDisplayName['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

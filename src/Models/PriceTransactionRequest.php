<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class PriceTransactionRequest implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var Accounts|null
     */
    private $accounts;

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $vehicleRegistrationNumber = [];

    /**
     * @var array
     */
    private $invoiceStatus = [];

    /**
     * @var array
     */
    private $productId = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $purchasedInCountry = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $sortOrder = [];

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $period = [];

    /**
     * @var array
     */
    private $siteCode = [];

    /**
     * @var array
     */
    private $siteGroupId = [];

    /**
     * @var array
     */
    private $postingDateFrom = [];

    /**
     * @var array
     */
    private $postingDateTo = [];

    /**
     * @var array
     */
    private $salesItemId = [];

    /**
     * @var array
     */
    private $transactionId = [];

    /**
     * @var array
     */
    private $invoiceDate = [];

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $validInvoiceDateOnly = [];

    /**
     * @var array
     */
    private $invoiceFromDate = [];

    /**
     * @var array
     */
    private $invoiceToDate = [];

    /**
     * @var array
     */
    private $fuelOnly = [];

    /**
     * @var array
     */
    private $includeFees = [];

    /**
     * @var array
     */
    private $useFieldId = [];

    /**
     * @var array
     */
    private $currentPage = [];

    /**
     * @var int|null
     */
    private $pageSize;

    /**
     * Returns Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id  of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id  of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id  of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number (Ex: GB000000123) of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory
     *
     * Example: GB000000123
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number (Ex: GB000000123) of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory
     *
     * Example: GB000000123
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number (Ex: GB000000123) of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory
     *
     * Example: GB000000123
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Accounts.
     */
    public function getAccounts(): ?Accounts
    {
        return $this->accounts;
    }

    /**
     * Sets Accounts.
     *
     * @maps Accounts
     */
    public function setAccounts(?Accounts $accounts): void
    {
        $this->accounts = $accounts;
    }

    /**
     * Returns Card Id.
     * Card Id (i.e. Unique Card Id in GFN)
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have transactions of
     * all cards under the selected payer or account
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card Id (i.e. Unique Card Id in GFN)
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have transactions of
     * all cards under the selected payer or account
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card Id (i.e. Unique Card Id in GFN)
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have transactions of
     * all cards under the selected payer or account
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Card PAN.
     * Full Card PAN
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have transactions of
     * all cards under the selected payer or account.
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Full Card PAN
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have transactions of
     * all cards under the selected payer or account.
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Full Card PAN
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have transactions of
     * all cards under the selected payer or account.
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns Driver Name.
     * Driver Name (of Card record)
     *
     * Optional
     *
     * Minimum of 4 characters should be provided else not considered
     *
     * Transactions of the card having the entered value at any part of the Driver Name will be returned
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver Name (of Card record)
     *
     * Optional
     *
     * Minimum of 4 characters should be provided else not considered
     *
     * Transactions of the card having the entered value at any part of the Driver Name will be returned
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver Name (of Card record)
     *
     * Optional
     *
     * Minimum of 4 characters should be provided else not considered
     *
     * Transactions of the card having the entered value at any part of the Driver Name will be returned
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Vehicle Registration Number.
     * Vehicle Registration (of Card record)
     *
     * Optional
     *
     * Minimum of 4 characters should be provided else not considered
     *
     * Transactions of the card having the entered value at any part of the VRN will be returned
     */
    public function getVehicleRegistrationNumber(): ?string
    {
        if (count($this->vehicleRegistrationNumber) == 0) {
            return null;
        }
        return $this->vehicleRegistrationNumber['value'];
    }

    /**
     * Sets Vehicle Registration Number.
     * Vehicle Registration (of Card record)
     *
     * Optional
     *
     * Minimum of 4 characters should be provided else not considered
     *
     * Transactions of the card having the entered value at any part of the VRN will be returned
     *
     * @maps VehicleRegistrationNumber
     */
    public function setVehicleRegistrationNumber(?string $vehicleRegistrationNumber): void
    {
        $this->vehicleRegistrationNumber['value'] = $vehicleRegistrationNumber;
    }

    /**
     * Unsets Vehicle Registration Number.
     * Vehicle Registration (of Card record)
     *
     * Optional
     *
     * Minimum of 4 characters should be provided else not considered
     *
     * Transactions of the card having the entered value at any part of the VRN will be returned
     */
    public function unsetVehicleRegistrationNumber(): void
    {
        $this->vehicleRegistrationNumber = [];
    }

    /**
     * Returns Invoice Status.
     * Invoice status of the transactions.
     *
     * Mandatory
     *
     * Possible options:
     *
     * I - Invoiced
     *
     * U – Un-Invoiced
     *
     * A – All
     */
    public function getInvoiceStatus(): ?string
    {
        if (count($this->invoiceStatus) == 0) {
            return null;
        }
        return $this->invoiceStatus['value'];
    }

    /**
     * Sets Invoice Status.
     * Invoice status of the transactions.
     *
     * Mandatory
     *
     * Possible options:
     *
     * I - Invoiced
     *
     * U – Un-Invoiced
     *
     * A – All
     *
     * @maps InvoiceStatus
     */
    public function setInvoiceStatus(?string $invoiceStatus): void
    {
        $this->invoiceStatus['value'] = $invoiceStatus;
    }

    /**
     * Unsets Invoice Status.
     * Invoice status of the transactions.
     *
     * Mandatory
     *
     * Possible options:
     *
     * I - Invoiced
     *
     * U – Un-Invoiced
     *
     * A – All
     */
    public function unsetInvoiceStatus(): void
    {
        $this->invoiceStatus = [];
    }

    /**
     * Returns Product Id.
     * Product Id
     *
     * Example:
     *
     * 21 Unleaded - High octane
     *
     * 22 Unleaded - Medium octane
     *
     * 23 Unleaded - Low octane
     *
     * 24 Unleaded Environmental
     */
    public function getProductId(): ?int
    {
        if (count($this->productId) == 0) {
            return null;
        }
        return $this->productId['value'];
    }

    /**
     * Sets Product Id.
     * Product Id
     *
     * Example:
     *
     * 21 Unleaded - High octane
     *
     * 22 Unleaded - Medium octane
     *
     * 23 Unleaded - Low octane
     *
     * 24 Unleaded Environmental
     *
     * @maps ProductId
     */
    public function setProductId(?int $productId): void
    {
        $this->productId['value'] = $productId;
    }

    /**
     * Unsets Product Id.
     * Product Id
     *
     * Example:
     *
     * 21 Unleaded - High octane
     *
     * 22 Unleaded - Medium octane
     *
     * 23 Unleaded - Low octane
     *
     * 24 Unleaded Environmental
     */
    public function unsetProductId(): void
    {
        $this->productId = [];
    }

    /**
     * Returns Product Code.
     * Product Code – Global as per GFN configuration
     *
     * Optional
     *
     * Max Length: 8
     *
     * Example:
     *
     * 10 TMF Charges
     *
     * 11 Tunnel/Bridges
     *
     * 12 Motorway toll
     *
     * 13 Ferries
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code – Global as per GFN configuration
     *
     * Optional
     *
     * Max Length: 8
     *
     * Example:
     *
     * 10 TMF Charges
     *
     * 11 Tunnel/Bridges
     *
     * 12 Motorway toll
     *
     * 13 Ferries
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code – Global as per GFN configuration
     *
     * Optional
     *
     * Max Length: 8
     *
     * Example:
     *
     * 10 TMF Charges
     *
     * 11 Tunnel/Bridges
     *
     * 12 Motorway toll
     *
     * 13 Ferries
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Purchased in Country.
     * ISO Country Code (ex: UK, FR)
     *
     *
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function getPurchasedInCountry(): ?string
    {
        if (count($this->purchasedInCountry) == 0) {
            return null;
        }
        return $this->purchasedInCountry['value'];
    }

    /**
     * Sets Purchased in Country.
     * ISO Country Code (ex: UK, FR)
     *
     *
     *
     * Note: If IncludeFees is true then this filter will be ignored
     *
     * @maps PurchasedInCountry
     */
    public function setPurchasedInCountry(?string $purchasedInCountry): void
    {
        $this->purchasedInCountry['value'] = $purchasedInCountry;
    }

    /**
     * Unsets Purchased in Country.
     * ISO Country Code (ex: UK, FR)
     *
     *
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function unsetPurchasedInCountry(): void
    {
        $this->purchasedInCountry = [];
    }

    /**
     * Returns Card Group Id.
     * Card Group Id in GFN
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card Group Id in GFN
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card Group Id in GFN
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Sort Order.
     * Allowed Sorting Options:
     *
     * 1. TransactionDateAscending
     *
     * 2. TransactionDateDescending
     *
     * 3. GrossAmountDescending
     *
     * 4. GrossAmountAscending
     *
     * 5. DriverNameAscending (If Driver Name is null then VRN value will be considered)
     *
     * 6. DriverNameDescending (If Driver Name is null then VRN value will be considered)
     *
     * 7. VRNAscending (If VRN is null then Driver Name value will be considered)
     *
     * 8. VRNDescending (If VRN is null then Driver Name value will be considered)
     *
     * 9. NetAmountAscending
     *
     * 10. NetAmountDescensding
     *
     * Example value to be passed: “1,3”
     */
    public function getSortOrder(): ?string
    {
        if (count($this->sortOrder) == 0) {
            return null;
        }
        return $this->sortOrder['value'];
    }

    /**
     * Sets Sort Order.
     * Allowed Sorting Options:
     *
     * 1. TransactionDateAscending
     *
     * 2. TransactionDateDescending
     *
     * 3. GrossAmountDescending
     *
     * 4. GrossAmountAscending
     *
     * 5. DriverNameAscending (If Driver Name is null then VRN value will be considered)
     *
     * 6. DriverNameDescending (If Driver Name is null then VRN value will be considered)
     *
     * 7. VRNAscending (If VRN is null then Driver Name value will be considered)
     *
     * 8. VRNDescending (If VRN is null then Driver Name value will be considered)
     *
     * 9. NetAmountAscending
     *
     * 10. NetAmountDescensding
     *
     * Example value to be passed: “1,3”
     *
     * @maps SortOrder
     */
    public function setSortOrder(?string $sortOrder): void
    {
        $this->sortOrder['value'] = $sortOrder;
    }

    /**
     * Unsets Sort Order.
     * Allowed Sorting Options:
     *
     * 1. TransactionDateAscending
     *
     * 2. TransactionDateDescending
     *
     * 3. GrossAmountDescending
     *
     * 4. GrossAmountAscending
     *
     * 5. DriverNameAscending (If Driver Name is null then VRN value will be considered)
     *
     * 6. DriverNameDescending (If Driver Name is null then VRN value will be considered)
     *
     * 7. VRNAscending (If VRN is null then Driver Name value will be considered)
     *
     * 8. VRNDescending (If VRN is null then Driver Name value will be considered)
     *
     * 9. NetAmountAscending
     *
     * 10. NetAmountDescensding
     *
     * Example value to be passed: “1,3”
     */
    public function unsetSortOrder(): void
    {
        $this->sortOrder = [];
    }

    /**
     * Returns From Date.
     * Transactions from Date/Time.
     *
     * Optional – When provided, it should be with in last 24 months.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * Transactions from Date/Time.
     *
     * Optional – When provided, it should be with in last 24 months.
     *
     *
     *
     * Format: yyyyMMdd
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * Transactions from Date/Time.
     *
     * Optional – When provided, it should be with in last 24 months.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Transactions to Date/Time.
     *
     * Optional- Refer introduction section of this operation for the priority and sequence of different
     * date and invoice number filters that are conditionally applied.
     *
     * Note:
     *
     * 1) When the value is blank and FromDate is provided on the input, all transactions took place
     * 210(Configurable) days after the given FromDate is returned.
     *
     * 2) Difference between FromDate and ToDate cannot be more than 210 (Configurable) days.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Transactions to Date/Time.
     *
     * Optional- Refer introduction section of this operation for the priority and sequence of different
     * date and invoice number filters that are conditionally applied.
     *
     * Note:
     *
     * 1) When the value is blank and FromDate is provided on the input, all transactions took place
     * 210(Configurable) days after the given FromDate is returned.
     *
     * 2) Difference between FromDate and ToDate cannot be more than 210 (Configurable) days.
     *
     *
     *
     * Format: yyyyMMdd
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Transactions to Date/Time.
     *
     * Optional- Refer introduction section of this operation for the priority and sequence of different
     * date and invoice number filters that are conditionally applied.
     *
     * Note:
     *
     * 1) When the value is blank and FromDate is provided on the input, all transactions took place
     * 210(Configurable) days after the given FromDate is returned.
     *
     * 2) Difference between FromDate and ToDate cannot be more than 210 (Configurable) days.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Period.
     * Transactions Period.
     *
     * Possible values are:
     *
     * 1. Last 7 Days
     *
     * 2. Last 30 Days
     *
     * 3. Last 90 Days
     *
     * Optional - Refer introduction section of this operation for the priority and sequence of different
     * date and invoice number filters that are conditionally applied.
     */
    public function getPeriod(): ?int
    {
        if (count($this->period) == 0) {
            return null;
        }
        return $this->period['value'];
    }

    /**
     * Sets Period.
     * Transactions Period.
     *
     * Possible values are:
     *
     * 1. Last 7 Days
     *
     * 2. Last 30 Days
     *
     * 3. Last 90 Days
     *
     * Optional - Refer introduction section of this operation for the priority and sequence of different
     * date and invoice number filters that are conditionally applied.
     *
     * @maps Period
     */
    public function setPeriod(?int $period): void
    {
        $this->period['value'] = $period;
    }

    /**
     * Unsets Period.
     * Transactions Period.
     *
     * Possible values are:
     *
     * 1. Last 7 Days
     *
     * 2. Last 30 Days
     *
     * 3. Last 90 Days
     *
     * Optional - Refer introduction section of this operation for the priority and sequence of different
     * date and invoice number filters that are conditionally applied.
     */
    public function unsetPeriod(): void
    {
        $this->period = [];
    }

    /**
     * Returns Site Code.
     * Site Code as configured in GFN
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     *
     * 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761.
     *
     * 050006 - HARTSHEAD MOOR WESTBOUND MWSA.
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function getSiteCode(): ?string
    {
        if (count($this->siteCode) == 0) {
            return null;
        }
        return $this->siteCode['value'];
    }

    /**
     * Sets Site Code.
     * Site Code as configured in GFN
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     *
     * 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761.
     *
     * 050006 - HARTSHEAD MOOR WESTBOUND MWSA.
     *
     * Note: If IncludeFees is true then this filter will be ignored
     *
     * @maps SiteCode
     */
    public function setSiteCode(?string $siteCode): void
    {
        $this->siteCode['value'] = $siteCode;
    }

    /**
     * Unsets Site Code.
     * Site Code as configured in GFN
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     *
     * 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761.
     *
     * 050006 - HARTSHEAD MOOR WESTBOUND MWSA.
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function unsetSiteCode(): void
    {
        $this->siteCode = [];
    }

    /**
     * Returns Site Group Id.
     * Site Group Id in GFN
     *
     * Optional
     *
     * Example: 202
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function getSiteGroupId(): ?int
    {
        if (count($this->siteGroupId) == 0) {
            return null;
        }
        return $this->siteGroupId['value'];
    }

    /**
     * Sets Site Group Id.
     * Site Group Id in GFN
     *
     * Optional
     *
     * Example: 202
     *
     * Note: If IncludeFees is true then this filter will be ignored
     *
     * @maps SiteGroupId
     */
    public function setSiteGroupId(?int $siteGroupId): void
    {
        $this->siteGroupId['value'] = $siteGroupId;
    }

    /**
     * Unsets Site Group Id.
     * Site Group Id in GFN
     *
     * Optional
     *
     * Example: 202
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function unsetSiteGroupId(): void
    {
        $this->siteGroupId = [];
    }

    /**
     * Returns Posting Date From.
     * Transaction Posting Date/time in the Cards Platform - From Date/time.
     *
     *
     *
     * Note:
     *
     * 1) When the value of both PostingDateFrom and PostingDateTo are present in the request then the
     * value of PostingDateFrom must be less than PostingDateTo.
     *
     * 2) If IncludeFees is true then this filter will be ignored
     *
     * Format: yyyyMMdd HH:mm:ss
     */
    public function getPostingDateFrom(): ?string
    {
        if (count($this->postingDateFrom) == 0) {
            return null;
        }
        return $this->postingDateFrom['value'];
    }

    /**
     * Sets Posting Date From.
     * Transaction Posting Date/time in the Cards Platform - From Date/time.
     *
     *
     *
     * Note:
     *
     * 1) When the value of both PostingDateFrom and PostingDateTo are present in the request then the
     * value of PostingDateFrom must be less than PostingDateTo.
     *
     * 2) If IncludeFees is true then this filter will be ignored
     *
     * Format: yyyyMMdd HH:mm:ss
     *
     * @maps PostingDateFrom
     */
    public function setPostingDateFrom(?string $postingDateFrom): void
    {
        $this->postingDateFrom['value'] = $postingDateFrom;
    }

    /**
     * Unsets Posting Date From.
     * Transaction Posting Date/time in the Cards Platform - From Date/time.
     *
     *
     *
     * Note:
     *
     * 1) When the value of both PostingDateFrom and PostingDateTo are present in the request then the
     * value of PostingDateFrom must be less than PostingDateTo.
     *
     * 2) If IncludeFees is true then this filter will be ignored
     *
     * Format: yyyyMMdd HH:mm:ss
     */
    public function unsetPostingDateFrom(): void
    {
        $this->postingDateFrom = [];
    }

    /**
     * Returns Posting Date To.
     * Transaction Posting Date/time in the Cards Platform – To Date/time.
     *
     *
     *
     * Note:
     *
     * 1) If IncludeFees is true then this filter will be ignored.
     *
     * 2) When the value of both PostingDateFrom and PostingDateTo are present in the request then the
     * value of PostingDateFrom must be less than PostingDateTo.
     *
     * Format: yyyyMMdd HH:mm:ss
     */
    public function getPostingDateTo(): ?string
    {
        if (count($this->postingDateTo) == 0) {
            return null;
        }
        return $this->postingDateTo['value'];
    }

    /**
     * Sets Posting Date To.
     * Transaction Posting Date/time in the Cards Platform – To Date/time.
     *
     *
     *
     * Note:
     *
     * 1) If IncludeFees is true then this filter will be ignored.
     *
     * 2) When the value of both PostingDateFrom and PostingDateTo are present in the request then the
     * value of PostingDateFrom must be less than PostingDateTo.
     *
     * Format: yyyyMMdd HH:mm:ss
     *
     * @maps PostingDateTo
     */
    public function setPostingDateTo(?string $postingDateTo): void
    {
        $this->postingDateTo['value'] = $postingDateTo;
    }

    /**
     * Unsets Posting Date To.
     * Transaction Posting Date/time in the Cards Platform – To Date/time.
     *
     *
     *
     * Note:
     *
     * 1) If IncludeFees is true then this filter will be ignored.
     *
     * 2) When the value of both PostingDateFrom and PostingDateTo are present in the request then the
     * value of PostingDateFrom must be less than PostingDateTo.
     *
     * Format: yyyyMMdd HH:mm:ss
     */
    public function unsetPostingDateTo(): void
    {
        $this->postingDateTo = [];
    }

    /**
     * Returns Sales Item Id.
     * Unique SalesItemId (Either Billed on Unbilled)
     *
     * Optional
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function getSalesItemId(): ?string
    {
        if (count($this->salesItemId) == 0) {
            return null;
        }
        return $this->salesItemId['value'];
    }

    /**
     * Sets Sales Item Id.
     * Unique SalesItemId (Either Billed on Unbilled)
     *
     * Optional
     *
     * Note: If IncludeFees is true then this filter will be ignored
     *
     * @maps SalesItemId
     */
    public function setSalesItemId(?string $salesItemId): void
    {
        $this->salesItemId['value'] = $salesItemId;
    }

    /**
     * Unsets Sales Item Id.
     * Unique SalesItemId (Either Billed on Unbilled)
     *
     * Optional
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function unsetSalesItemId(): void
    {
        $this->salesItemId = [];
    }

    /**
     * Returns Transaction Id.
     * Unique Transaction Id
     *
     * Optional
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function getTransactionId(): ?string
    {
        if (count($this->transactionId) == 0) {
            return null;
        }
        return $this->transactionId['value'];
    }

    /**
     * Sets Transaction Id.
     * Unique Transaction Id
     *
     * Optional
     *
     * Note: If IncludeFees is true then this filter will be ignored
     *
     * @maps TransactionId
     */
    public function setTransactionId(?string $transactionId): void
    {
        $this->transactionId['value'] = $transactionId;
    }

    /**
     * Unsets Transaction Id.
     * Unique Transaction Id
     *
     * Optional
     *
     * Note: If IncludeFees is true then this filter will be ignored
     */
    public function unsetTransactionId(): void
    {
        $this->transactionId = [];
    }

    /**
     * Returns Invoice Date.
     * Invoice Date.
     *
     * Optional
     *
     * Note:
     *
     * 1) If value is not blank then the system will ignore the InvoiceStatus parameter and it will return
     * all the billed transactions for the given invoice date.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function getInvoiceDate(): ?string
    {
        if (count($this->invoiceDate) == 0) {
            return null;
        }
        return $this->invoiceDate['value'];
    }

    /**
     * Sets Invoice Date.
     * Invoice Date.
     *
     * Optional
     *
     * Note:
     *
     * 1) If value is not blank then the system will ignore the InvoiceStatus parameter and it will return
     * all the billed transactions for the given invoice date.
     *
     *
     *
     * Format: yyyyMMdd
     *
     * @maps InvoiceDate
     */
    public function setInvoiceDate(?string $invoiceDate): void
    {
        $this->invoiceDate['value'] = $invoiceDate;
    }

    /**
     * Unsets Invoice Date.
     * Invoice Date.
     *
     * Optional
     *
     * Note:
     *
     * 1) If value is not blank then the system will ignore the InvoiceStatus parameter and it will return
     * all the billed transactions for the given invoice date.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function unsetInvoiceDate(): void
    {
        $this->invoiceDate = [];
    }

    /**
     * Returns Invoice Number.
     * Invoice Number.
     *
     * Optional
     *
     * Note:
     *
     * 1) If value is not blank then the system will ignore the InvoiceStatus parameter and it will return
     * all the billed transactions for the given invoice date.
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice Number.
     *
     * Optional
     *
     * Note:
     *
     * 1) If value is not blank then the system will ignore the InvoiceStatus parameter and it will return
     * all the billed transactions for the given invoice date.
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice Number.
     *
     * Optional
     *
     * Note:
     *
     * 1) If value is not blank then the system will ignore the InvoiceStatus parameter and it will return
     * all the billed transactions for the given invoice date.
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Valid Invoice Date Only.
     * True/False
     *
     * Optional
     *
     * Default value: True.
     *
     * When passed as ‘True’ the transactions records with report date not equal to 9999-12-30 will be
     * returned.
     *
     * When passed as ‘False’ the above condition will not be checked.
     */
    public function getValidInvoiceDateOnly(): ?bool
    {
        if (count($this->validInvoiceDateOnly) == 0) {
            return null;
        }
        return $this->validInvoiceDateOnly['value'];
    }

    /**
     * Sets Valid Invoice Date Only.
     * True/False
     *
     * Optional
     *
     * Default value: True.
     *
     * When passed as ‘True’ the transactions records with report date not equal to 9999-12-30 will be
     * returned.
     *
     * When passed as ‘False’ the above condition will not be checked.
     *
     * @maps ValidInvoiceDateOnly
     */
    public function setValidInvoiceDateOnly(?bool $validInvoiceDateOnly): void
    {
        $this->validInvoiceDateOnly['value'] = $validInvoiceDateOnly;
    }

    /**
     * Unsets Valid Invoice Date Only.
     * True/False
     *
     * Optional
     *
     * Default value: True.
     *
     * When passed as ‘True’ the transactions records with report date not equal to 9999-12-30 will be
     * returned.
     *
     * When passed as ‘False’ the above condition will not be checked.
     */
    public function unsetValidInvoiceDateOnly(): void
    {
        $this->validInvoiceDateOnly = [];
    }

    /**
     * Returns Invoice From Date.
     * Start date for transaction search by invoice date.
     *
     * Optional
     *
     * Note:
     *
     *
     *
     * 1) Value should be with in last 24 months (if provided).
     *
     * 2) Maximum of 90(Configurable) day’s duration allowed per search.
     *
     * 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     *
     * Format: yyyyMMdd
     */
    public function getInvoiceFromDate(): ?string
    {
        if (count($this->invoiceFromDate) == 0) {
            return null;
        }
        return $this->invoiceFromDate['value'];
    }

    /**
     * Sets Invoice From Date.
     * Start date for transaction search by invoice date.
     *
     * Optional
     *
     * Note:
     *
     *
     *
     * 1) Value should be with in last 24 months (if provided).
     *
     * 2) Maximum of 90(Configurable) day’s duration allowed per search.
     *
     * 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     *
     * Format: yyyyMMdd
     *
     * @maps InvoiceFromDate
     */
    public function setInvoiceFromDate(?string $invoiceFromDate): void
    {
        $this->invoiceFromDate['value'] = $invoiceFromDate;
    }

    /**
     * Unsets Invoice From Date.
     * Start date for transaction search by invoice date.
     *
     * Optional
     *
     * Note:
     *
     *
     *
     * 1) Value should be with in last 24 months (if provided).
     *
     * 2) Maximum of 90(Configurable) day’s duration allowed per search.
     *
     * 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     *
     * Format: yyyyMMdd
     */
    public function unsetInvoiceFromDate(): void
    {
        $this->invoiceFromDate = [];
    }

    /**
     * Returns Invoice to Date.
     * End date for transaction search by invoice date.
     *
     * Optional
     *
     * Note:
     *
     *
     *
     * 1) When InvoiceFromDate is provided and InvoiceToDate is null, then InvoiceToDate will be calculated
     * as (InvoiceFromDate + 90 days) or (CurrentDate) whichever is lesser.
     *
     * Format: yyyyMMdd
     */
    public function getInvoiceToDate(): ?string
    {
        if (count($this->invoiceToDate) == 0) {
            return null;
        }
        return $this->invoiceToDate['value'];
    }

    /**
     * Sets Invoice to Date.
     * End date for transaction search by invoice date.
     *
     * Optional
     *
     * Note:
     *
     *
     *
     * 1) When InvoiceFromDate is provided and InvoiceToDate is null, then InvoiceToDate will be calculated
     * as (InvoiceFromDate + 90 days) or (CurrentDate) whichever is lesser.
     *
     * Format: yyyyMMdd
     *
     * @maps InvoiceToDate
     */
    public function setInvoiceToDate(?string $invoiceToDate): void
    {
        $this->invoiceToDate['value'] = $invoiceToDate;
    }

    /**
     * Unsets Invoice to Date.
     * End date for transaction search by invoice date.
     *
     * Optional
     *
     * Note:
     *
     *
     *
     * 1) When InvoiceFromDate is provided and InvoiceToDate is null, then InvoiceToDate will be calculated
     * as (InvoiceFromDate + 90 days) or (CurrentDate) whichever is lesser.
     *
     * Format: yyyyMMdd
     */
    public function unsetInvoiceToDate(): void
    {
        $this->invoiceToDate = [];
    }

    /**
     * Returns Fuel Only.
     * True/False
     *
     * Optional
     *
     * Default value: False.
     *
     * When passed as ‘True’ Only returned records with Fuel transactions.
     *
     * When passed as ‘False’ the above condition will not be checked.
     */
    public function getFuelOnly(): ?bool
    {
        if (count($this->fuelOnly) == 0) {
            return null;
        }
        return $this->fuelOnly['value'];
    }

    /**
     * Sets Fuel Only.
     * True/False
     *
     * Optional
     *
     * Default value: False.
     *
     * When passed as ‘True’ Only returned records with Fuel transactions.
     *
     * When passed as ‘False’ the above condition will not be checked.
     *
     * @maps FuelOnly
     */
    public function setFuelOnly(?bool $fuelOnly): void
    {
        $this->fuelOnly['value'] = $fuelOnly;
    }

    /**
     * Unsets Fuel Only.
     * True/False
     *
     * Optional
     *
     * Default value: False.
     *
     * When passed as ‘True’ Only returned records with Fuel transactions.
     *
     * When passed as ‘False’ the above condition will not be checked.
     */
    public function unsetFuelOnly(): void
    {
        $this->fuelOnly = [];
    }

    /**
     * Returns Include Fees.
     * True/False
     *
     * Optional
     *
     * Default value: False
     *
     * When passed as ‘True’ then  ignore few filters, all sales items along with fees included on the same
     * response
     */
    public function getIncludeFees(): ?bool
    {
        if (count($this->includeFees) == 0) {
            return null;
        }
        return $this->includeFees['value'];
    }

    /**
     * Sets Include Fees.
     * True/False
     *
     * Optional
     *
     * Default value: False
     *
     * When passed as ‘True’ then  ignore few filters, all sales items along with fees included on the same
     * response
     *
     * @maps IncludeFees
     */
    public function setIncludeFees(?bool $includeFees): void
    {
        $this->includeFees['value'] = $includeFees;
    }

    /**
     * Unsets Include Fees.
     * True/False
     *
     * Optional
     *
     * Default value: False
     *
     * When passed as ‘True’ then  ignore few filters, all sales items along with fees included on the same
     * response
     */
    public function unsetIncludeFees(): void
    {
        $this->includeFees = [];
    }

    /**
     * Returns Use Field Id.
     * True/False
     *
     * Optional
     *
     * Default value – False.
     *
     * When set to True, the property names in the output will be replaced by Field IDs.
     *
     * This will reduce the output payload size significantly for large data sets and help faster
     * transmission of data over networks.
     */
    public function getUseFieldId(): ?bool
    {
        if (count($this->useFieldId) == 0) {
            return null;
        }
        return $this->useFieldId['value'];
    }

    /**
     * Sets Use Field Id.
     * True/False
     *
     * Optional
     *
     * Default value – False.
     *
     * When set to True, the property names in the output will be replaced by Field IDs.
     *
     * This will reduce the output payload size significantly for large data sets and help faster
     * transmission of data over networks.
     *
     * @maps UseFieldId
     */
    public function setUseFieldId(?bool $useFieldId): void
    {
        $this->useFieldId['value'] = $useFieldId;
    }

    /**
     * Unsets Use Field Id.
     * True/False
     *
     * Optional
     *
     * Default value – False.
     *
     * When set to True, the property names in the output will be replaced by Field IDs.
     *
     * This will reduce the output payload size significantly for large data sets and help faster
     * transmission of data over networks.
     */
    public function unsetUseFieldId(): void
    {
        $this->useFieldId = [];
    }

    /**
     * Returns Current Page.
     * Current Page Number
     */
    public function getCurrentPage(): ?int
    {
        if (count($this->currentPage) == 0) {
            return null;
        }
        return $this->currentPage['value'];
    }

    /**
     * Sets Current Page.
     * Current Page Number
     *
     * @maps CurrentPage
     */
    public function setCurrentPage(?int $currentPage): void
    {
        $this->currentPage['value'] = $currentPage;
    }

    /**
     * Unsets Current Page.
     * Current Page Number
     */
    public function unsetCurrentPage(): void
    {
        $this->currentPage = [];
    }

    /**
     * Returns Page Size.
     * Page Size – Number of records to show on a page
     *
     * Optional
     *
     * Default value 50
     */
    public function getPageSize(): ?int
    {
        return $this->pageSize;
    }

    /**
     * Sets Page Size.
     * Page Size – Number of records to show on a page
     *
     * Optional
     *
     * Default value 50
     *
     * @maps PageSize
     */
    public function setPageSize(?int $pageSize): void
    {
        $this->pageSize = $pageSize;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoId)) {
            $json['ColCoId']                   = $this->colCoId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                 = $this->colCoCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                   = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']               = $this->payerNumber['value'];
        }
        if (isset($this->accounts)) {
            $json['Accounts']                  = $this->accounts;
        }
        if (!empty($this->cardId)) {
            $json['CardId']                    = $this->cardId['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']                   = $this->cardPAN['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                = $this->driverName['value'];
        }
        if (!empty($this->vehicleRegistrationNumber)) {
            $json['VehicleRegistrationNumber'] = $this->vehicleRegistrationNumber['value'];
        }
        if (!empty($this->invoiceStatus)) {
            $json['InvoiceStatus']             = $this->invoiceStatus['value'];
        }
        if (!empty($this->productId)) {
            $json['ProductId']                 = $this->productId['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']               = $this->productCode['value'];
        }
        if (!empty($this->purchasedInCountry)) {
            $json['PurchasedInCountry']        = $this->purchasedInCountry['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']               = $this->cardGroupId['value'];
        }
        if (!empty($this->sortOrder)) {
            $json['SortOrder']                 = $this->sortOrder['value'];
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']                  = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']                    = $this->toDate['value'];
        }
        if (!empty($this->period)) {
            $json['Period']                    = $this->period['value'];
        }
        if (!empty($this->siteCode)) {
            $json['SiteCode']                  = $this->siteCode['value'];
        }
        if (!empty($this->siteGroupId)) {
            $json['SiteGroupId']               = $this->siteGroupId['value'];
        }
        if (!empty($this->postingDateFrom)) {
            $json['PostingDateFrom']           = $this->postingDateFrom['value'];
        }
        if (!empty($this->postingDateTo)) {
            $json['PostingDateTo']             = $this->postingDateTo['value'];
        }
        if (!empty($this->salesItemId)) {
            $json['SalesItemId']               = $this->salesItemId['value'];
        }
        if (!empty($this->transactionId)) {
            $json['TransactionId']             = $this->transactionId['value'];
        }
        if (!empty($this->invoiceDate)) {
            $json['InvoiceDate']               = $this->invoiceDate['value'];
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber']             = $this->invoiceNumber['value'];
        }
        if (!empty($this->validInvoiceDateOnly)) {
            $json['ValidInvoiceDateOnly']      = $this->validInvoiceDateOnly['value'];
        }
        if (!empty($this->invoiceFromDate)) {
            $json['InvoiceFromDate']           = $this->invoiceFromDate['value'];
        }
        if (!empty($this->invoiceToDate)) {
            $json['InvoiceToDate']             = $this->invoiceToDate['value'];
        }
        if (!empty($this->fuelOnly)) {
            $json['FuelOnly']                  = $this->fuelOnly['value'];
        }
        if (!empty($this->includeFees)) {
            $json['IncludeFees']               = $this->includeFees['value'];
        }
        if (!empty($this->useFieldId)) {
            $json['UseFieldId']                = $this->useFieldId['value'];
        }
        if (!empty($this->currentPage)) {
            $json['CurrentPage']               = $this->currentPage['value'];
        }
        if (isset($this->pageSize)) {
            $json['PageSize']                  = $this->pageSize;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

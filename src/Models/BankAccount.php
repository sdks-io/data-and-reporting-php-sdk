<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class BankAccount implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $bankName = [];

    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $dateEffective = [];

    /**
     * @var array
     */
    private $dateTerminated = [];

    /**
     * @var array
     */
    private $iBAN = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $countryISOCode = [];

    /**
     * @var array
     */
    private $country = [];

    /**
     * @var array
     */
    private $sortCode = [];

    /**
     * @var array
     */
    private $swiftCode = [];

    /**
     * @var array
     */
    private $bankType = [];

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Bank Name.
     * Bank Name
     */
    public function getBankName(): ?string
    {
        if (count($this->bankName) == 0) {
            return null;
        }
        return $this->bankName['value'];
    }

    /**
     * Sets Bank Name.
     * Bank Name
     *
     * @maps BankName
     */
    public function setBankName(?string $bankName): void
    {
        $this->bankName['value'] = $bankName;
    }

    /**
     * Unsets Bank Name.
     * Bank Name
     */
    public function unsetBankName(): void
    {
        $this->bankName = [];
    }

    /**
     * Returns Account Name.
     * Account Name
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Account Name
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Account Name
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Date Effective.
     * Bank Account effective date for the payer
     */
    public function getDateEffective(): ?string
    {
        if (count($this->dateEffective) == 0) {
            return null;
        }
        return $this->dateEffective['value'];
    }

    /**
     * Sets Date Effective.
     * Bank Account effective date for the payer
     *
     * @maps DateEffective
     */
    public function setDateEffective(?string $dateEffective): void
    {
        $this->dateEffective['value'] = $dateEffective;
    }

    /**
     * Unsets Date Effective.
     * Bank Account effective date for the payer
     */
    public function unsetDateEffective(): void
    {
        $this->dateEffective = [];
    }

    /**
     * Returns Date Terminated.
     * Bank Account terminated date. Default is null
     */
    public function getDateTerminated(): ?string
    {
        if (count($this->dateTerminated) == 0) {
            return null;
        }
        return $this->dateTerminated['value'];
    }

    /**
     * Sets Date Terminated.
     * Bank Account terminated date. Default is null
     *
     * @maps DateTerminated
     */
    public function setDateTerminated(?string $dateTerminated): void
    {
        $this->dateTerminated['value'] = $dateTerminated;
    }

    /**
     * Unsets Date Terminated.
     * Bank Account terminated date. Default is null
     */
    public function unsetDateTerminated(): void
    {
        $this->dateTerminated = [];
    }

    /**
     * Returns I BAN.
     * Bank Account IBAN for Payer
     */
    public function getIBAN(): ?string
    {
        if (count($this->iBAN) == 0) {
            return null;
        }
        return $this->iBAN['value'];
    }

    /**
     * Sets I BAN.
     * Bank Account IBAN for Payer
     *
     * @maps IBAN
     */
    public function setIBAN(?string $iBAN): void
    {
        $this->iBAN['value'] = $iBAN;
    }

    /**
     * Unsets I BAN.
     * Bank Account IBAN for Payer
     */
    public function unsetIBAN(): void
    {
        $this->iBAN = [];
    }

    /**
     * Returns Currency Code.
     * Bank Account currency ISO code.
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * Bank Account currency ISO code.
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * Bank Account currency ISO code.
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Bank Account currency Symbol.
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Bank Account currency Symbol.
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Bank Account currency Symbol.
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Country ISO Code.
     * Bank Account Country ISO Code
     */
    public function getCountryISOCode(): ?string
    {
        if (count($this->countryISOCode) == 0) {
            return null;
        }
        return $this->countryISOCode['value'];
    }

    /**
     * Sets Country ISO Code.
     * Bank Account Country ISO Code
     *
     * @maps CountryISOCode
     */
    public function setCountryISOCode(?string $countryISOCode): void
    {
        $this->countryISOCode['value'] = $countryISOCode;
    }

    /**
     * Unsets Country ISO Code.
     * Bank Account Country ISO Code
     */
    public function unsetCountryISOCode(): void
    {
        $this->countryISOCode = [];
    }

    /**
     * Returns Country.
     * Bank Account Country Name
     *
     * 1-Austria
     *
     * 2-Belgium
     *
     * 3-Bulgaria
     *
     * 4-Croatia
     *
     * 5-Czech Republic
     */
    public function getCountry(): ?string
    {
        if (count($this->country) == 0) {
            return null;
        }
        return $this->country['value'];
    }

    /**
     * Sets Country.
     * Bank Account Country Name
     *
     * 1-Austria
     *
     * 2-Belgium
     *
     * 3-Bulgaria
     *
     * 4-Croatia
     *
     * 5-Czech Republic
     *
     * @maps Country
     */
    public function setCountry(?string $country): void
    {
        $this->country['value'] = $country;
    }

    /**
     * Unsets Country.
     * Bank Account Country Name
     *
     * 1-Austria
     *
     * 2-Belgium
     *
     * 3-Bulgaria
     *
     * 4-Croatia
     *
     * 5-Czech Republic
     */
    public function unsetCountry(): void
    {
        $this->country = [];
    }

    /**
     * Returns Sort Code.
     * Payer bank Sort Code
     */
    public function getSortCode(): ?string
    {
        if (count($this->sortCode) == 0) {
            return null;
        }
        return $this->sortCode['value'];
    }

    /**
     * Sets Sort Code.
     * Payer bank Sort Code
     *
     * @maps SortCode
     */
    public function setSortCode(?string $sortCode): void
    {
        $this->sortCode['value'] = $sortCode;
    }

    /**
     * Unsets Sort Code.
     * Payer bank Sort Code
     */
    public function unsetSortCode(): void
    {
        $this->sortCode = [];
    }

    /**
     * Returns Swift Code.
     * Payer Bank Swift Code
     */
    public function getSwiftCode(): ?string
    {
        if (count($this->swiftCode) == 0) {
            return null;
        }
        return $this->swiftCode['value'];
    }

    /**
     * Sets Swift Code.
     * Payer Bank Swift Code
     *
     * @maps SwiftCode
     */
    public function setSwiftCode(?string $swiftCode): void
    {
        $this->swiftCode['value'] = $swiftCode;
    }

    /**
     * Unsets Swift Code.
     * Payer Bank Swift Code
     */
    public function unsetSwiftCode(): void
    {
        $this->swiftCode = [];
    }

    /**
     * Returns Bank Type.
     * Bank Type Id and Description
     */
    public function getBankType(): ?string
    {
        if (count($this->bankType) == 0) {
            return null;
        }
        return $this->bankType['value'];
    }

    /**
     * Sets Bank Type.
     * Bank Type Id and Description
     *
     * @maps BankType
     */
    public function setBankType(?string $bankType): void
    {
        $this->bankType['value'] = $bankType;
    }

    /**
     * Unsets Bank Type.
     * Bank Type Id and Description
     */
    public function unsetBankType(): void
    {
        $this->bankType = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']  = $this->accountNumber['value'];
        }
        if (!empty($this->bankName)) {
            $json['BankName']       = $this->bankName['value'];
        }
        if (!empty($this->accountName)) {
            $json['AccountName']    = $this->accountName['value'];
        }
        if (!empty($this->dateEffective)) {
            $json['DateEffective']  = $this->dateEffective['value'];
        }
        if (!empty($this->dateTerminated)) {
            $json['DateTerminated'] = $this->dateTerminated['value'];
        }
        if (!empty($this->iBAN)) {
            $json['IBAN']           = $this->iBAN['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']   = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol'] = $this->currencySymbol['value'];
        }
        if (!empty($this->countryISOCode)) {
            $json['CountryISOCode'] = $this->countryISOCode['value'];
        }
        if (!empty($this->country)) {
            $json['Country']        = $this->country['value'];
        }
        if (!empty($this->sortCode)) {
            $json['SortCode']       = $this->sortCode['value'];
        }
        if (!empty($this->swiftCode)) {
            $json['SwiftCode']      = $this->swiftCode['value'];
        }
        if (!empty($this->bankType)) {
            $json['BankType']       = $this->bankType['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

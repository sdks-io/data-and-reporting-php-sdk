<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class AuditRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $status;

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var Accounts|null
     */
    private $accounts;

    /**
     * @var int|null
     */
    private $pageSize;

    /**
     * @var string[]|null
     */
    private $requestedOperation;

    /**
     * @var array
     */
    private $sortOrder = [];

    /**
     * @var array
     */
    private $searchText = [];

    /**
     * @var array
     */
    private $currentPage = [];

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * Returns Status.
     * Status of requests to be fetched.
     * •    Success
     * •    Failed
     * •    InProgress
     * •    Submitted
     * •    Rejected
     * •    PendingApproval
     * •    All
     * •    MailedToCSC
     * Optional
     * If not passed “All” will be considered as the default value.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Status of requests to be fetched.
     * •    Success
     * •    Failed
     * •    InProgress
     * •    Submitted
     * •    Rejected
     * •    PendingApproval
     * •    All
     * •    MailedToCSC
     * Optional
     * If not passed “All” will be considered as the default value.
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id  of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * Example: 123456
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id  of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * Example: 123456
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id  of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * Example: 123456
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Account Number.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Accounts.
     */
    public function getAccounts(): ?Accounts
    {
        return $this->accounts;
    }

    /**
     * Sets Accounts.
     *
     * @maps Accounts
     */
    public function setAccounts(?Accounts $accounts): void
    {
        $this->accounts = $accounts;
    }

    /**
     * Returns Page Size.
     * Page Size – Number of records to show on a page
     * Optional
     * Default value 50
     */
    public function getPageSize(): ?int
    {
        return $this->pageSize;
    }

    /**
     * Sets Page Size.
     * Page Size – Number of records to show on a page
     * Optional
     * Default value 50
     *
     * @maps PageSize
     */
    public function setPageSize(?int $pageSize): void
    {
        $this->pageSize = $pageSize;
    }

    /**
     * Returns Requested Operation.
     * To search for requests submitted until this date.
     *
     * Optional
     *
     * Format: yyyyMMdd
     *
     * Example: 20200130
     *
     * If ToDate is not provided and FromDate is provided, then ToDate will be considered as current date
     * or 30 days from FromDate, whichever is earlier. However, when both FromDate and ToDate is not
     * provided then last 30 days will be considered for filtering.
     *
     * @return string[]|null
     */
    public function getRequestedOperation(): ?array
    {
        return $this->requestedOperation;
    }

    /**
     * Sets Requested Operation.
     * To search for requests submitted until this date.
     *
     * Optional
     *
     * Format: yyyyMMdd
     *
     * Example: 20200130
     *
     * If ToDate is not provided and FromDate is provided, then ToDate will be considered as current date
     * or 30 days from FromDate, whichever is earlier. However, when both FromDate and ToDate is not
     * provided then last 30 days will be considered for filtering.
     *
     * @maps RequestedOperation
     *
     * @param string[]|null $requestedOperation
     */
    public function setRequestedOperation(?array $requestedOperation): void
    {
        $this->requestedOperation = $requestedOperation;
    }

    /**
     * Returns Sort Order.
     * Allowed Sorting Options:
     *
     * 1.    SubmittedDateDescending
     *
     * 2.    SubmittedDateAscending
     *
     * 3.    AccountNumberAscending
     *
     * 4.    AccountNumberDescending
     *
     * Optional: Default value is 1
     *
     * Example value to be passed: 1,3
     */
    public function getSortOrder(): ?string
    {
        if (count($this->sortOrder) == 0) {
            return null;
        }
        return $this->sortOrder['value'];
    }

    /**
     * Sets Sort Order.
     * Allowed Sorting Options:
     *
     * 1.    SubmittedDateDescending
     *
     * 2.    SubmittedDateAscending
     *
     * 3.    AccountNumberAscending
     *
     * 4.    AccountNumberDescending
     *
     * Optional: Default value is 1
     *
     * Example value to be passed: 1,3
     *
     * @maps SortOrder
     */
    public function setSortOrder(?string $sortOrder): void
    {
        $this->sortOrder['value'] = $sortOrder;
    }

    /**
     * Unsets Sort Order.
     * Allowed Sorting Options:
     *
     * 1.    SubmittedDateDescending
     *
     * 2.    SubmittedDateAscending
     *
     * 3.    AccountNumberAscending
     *
     * 4.    AccountNumberDescending
     *
     * Optional: Default value is 1
     *
     * Example value to be passed: 1,3
     */
    public function unsetSortOrder(): void
    {
        $this->sortOrder = [];
    }

    /**
     * Returns Search Text.
     * Search text used as criteria to filter the requests.
     * Optional
     * Minimum length is 4 characters (configurable). Else, an error (0007) will be returned. When valid
     * text is provided, MS will return all the records that contains the Search Text within any of the
     * look up fields
     */
    public function getSearchText(): ?string
    {
        if (count($this->searchText) == 0) {
            return null;
        }
        return $this->searchText['value'];
    }

    /**
     * Sets Search Text.
     * Search text used as criteria to filter the requests.
     * Optional
     * Minimum length is 4 characters (configurable). Else, an error (0007) will be returned. When valid
     * text is provided, MS will return all the records that contains the Search Text within any of the
     * look up fields
     *
     * @maps SearchText
     */
    public function setSearchText(?string $searchText): void
    {
        $this->searchText['value'] = $searchText;
    }

    /**
     * Unsets Search Text.
     * Search text used as criteria to filter the requests.
     * Optional
     * Minimum length is 4 characters (configurable). Else, an error (0007) will be returned. When valid
     * text is provided, MS will return all the records that contains the Search Text within any of the
     * look up fields
     */
    public function unsetSearchText(): void
    {
        $this->searchText = [];
    }

    /**
     * Returns Current Page.
     * Page Number (as shown to the users)
     * Optional
     * Default value 1
     */
    public function getCurrentPage(): ?int
    {
        if (count($this->currentPage) == 0) {
            return null;
        }
        return $this->currentPage['value'];
    }

    /**
     * Sets Current Page.
     * Page Number (as shown to the users)
     * Optional
     * Default value 1
     *
     * @maps CurrentPage
     */
    public function setCurrentPage(?int $currentPage): void
    {
        $this->currentPage['value'] = $currentPage;
    }

    /**
     * Unsets Current Page.
     * Page Number (as shown to the users)
     * Optional
     * Default value 1
     */
    public function unsetCurrentPage(): void
    {
        $this->currentPage = [];
    }

    /**
     * Returns From Date.
     * To search for requests submitted from this date.
     * Optional
     * Maximum of X days duration allowed per search. The X value is configurable and initially set to 180
     * days.
     * Format: yyyyMMdd
     * Example: 20200101
     * If FromDate is not provided and ToDate is provided, then FromDate will be considered as 30 days less
     * than ToDate. However, when both FromDate and ToDate is not provided then last 30 days will be
     * considered for filtering.
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * To search for requests submitted from this date.
     * Optional
     * Maximum of X days duration allowed per search. The X value is configurable and initially set to 180
     * days.
     * Format: yyyyMMdd
     * Example: 20200101
     * If FromDate is not provided and ToDate is provided, then FromDate will be considered as 30 days less
     * than ToDate. However, when both FromDate and ToDate is not provided then last 30 days will be
     * considered for filtering.
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * To search for requests submitted from this date.
     * Optional
     * Maximum of X days duration allowed per search. The X value is configurable and initially set to 180
     * days.
     * Format: yyyyMMdd
     * Example: 20200101
     * If FromDate is not provided and ToDate is provided, then FromDate will be considered as 30 days less
     * than ToDate. However, when both FromDate and ToDate is not provided then last 30 days will be
     * considered for filtering.
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * To search for requests submitted until this date.
     *
     * Optional
     *
     * Format: yyyyMMdd
     *
     * Example: 20200130
     *
     * If ToDate is not provided and FromDate is provided, then ToDate will be considered as current date
     * or 30 days from FromDate, whichever is earlier. However, when both FromDate and ToDate is not
     * provided then last 30 days will be considered for filtering.
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * To search for requests submitted until this date.
     *
     * Optional
     *
     * Format: yyyyMMdd
     *
     * Example: 20200130
     *
     * If ToDate is not provided and FromDate is provided, then ToDate will be considered as current date
     * or 30 days from FromDate, whichever is earlier. However, when both FromDate and ToDate is not
     * provided then last 30 days will be considered for filtering.
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * To search for requests submitted until this date.
     *
     * Optional
     *
     * Format: yyyyMMdd
     *
     * Example: 20200130
     *
     * If ToDate is not provided and FromDate is provided, then ToDate will be considered as current date
     * or 30 days from FromDate, whichever is earlier. However, when both FromDate and ToDate is not
     * provided then last 30 days will be considered for filtering.
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->status)) {
            $json['Status']             = $this->status;
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']        = $this->payerNumber['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']            = $this->payerId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']      = $this->accountNumber['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']          = $this->colCoCode['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']            = $this->colCoId['value'];
        }
        if (isset($this->accounts)) {
            $json['Accounts']           = $this->accounts;
        }
        if (isset($this->pageSize)) {
            $json['PageSize']           = $this->pageSize;
        }
        if (isset($this->requestedOperation)) {
            $json['RequestedOperation'] = $this->requestedOperation;
        }
        if (!empty($this->sortOrder)) {
            $json['SortOrder']          = $this->sortOrder['value'];
        }
        if (!empty($this->searchText)) {
            $json['SearchText']         = $this->searchText['value'];
        }
        if (!empty($this->currentPage)) {
            $json['CurrentPage']        = $this->currentPage['value'];
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']           = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']             = $this->toDate['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class SearchDocReq implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $payerNumber;

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var string[]|null
     */
    private $accountNumberList;

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var string[]|null
     */
    private $invoiceNumberList;

    /**
     * @var array
     */
    private $invoiceStatus = [];

    /**
     * @var array
     */
    private $issuingDateFrom = [];

    /**
     * @var array
     */
    private $issuingDateTo = [];

    /**
     * @var array
     */
    private $dueDateFrom = [];

    /**
     * @var array
     */
    private $dueDateTo = [];

    /**
     * @var array
     */
    private $grossAmount = [];

    /**
     * @var array
     */
    private $grossAmountOperator = [];

    /**
     * @var array
     */
    private $documentType = [];

    /**
     * @var array
     */
    private $vATIssuerCountry = [];

    /**
     * @var string[]|null
     */
    private $sortyBy;

    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     *
     * Mandatory
     *
     * Example: GB000000123
     */
    public function getPayerNumber(): ?string
    {
        return $this->payerNumber;
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     *
     * Mandatory
     *
     * Example: GB000000123
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber = $payerNumber;
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     *
     * Mandatory for customer users else optional.
     *
     * This input is a search criterion, if given.
     *
     * Example: GB000000123
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     *
     * Mandatory for customer users else optional.
     *
     * This input is a search criterion, if given.
     *
     * Example: GB000000123
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.
     *
     * Mandatory for customer users else optional.
     *
     * This input is a search criterion, if given.
     *
     * Example: GB000000123
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Number List.
     * Account Number of the customers.
     * optional.
     * This input is a search criterion, if given.
     * Example: [“GB00000123”, “GB00000225”]
     *
     * @return string[]|null
     */
    public function getAccountNumberList(): ?array
    {
        return $this->accountNumberList;
    }

    /**
     * Sets Account Number List.
     * Account Number of the customers.
     * optional.
     * This input is a search criterion, if given.
     * Example: [“GB00000123”, “GB00000225”]
     *
     * @maps AccountNumberList
     *
     * @param string[]|null $accountNumberList
     */
    public function setAccountNumberList(?array $accountNumberList): void
    {
        $this->accountNumberList = $accountNumberList;
    }

    /**
     * Returns Invoice Number.
     * Invoice number.
     *
     * Optional if InvoiceNumberList is passed else Mandatory
     *
     * This input is a search criterion, if given.
     *
     * Example: 0123456789
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice number.
     *
     * Optional if InvoiceNumberList is passed else Mandatory
     *
     * This input is a search criterion, if given.
     *
     * Example: 0123456789
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice number.
     *
     * Optional if InvoiceNumberList is passed else Mandatory
     *
     * This input is a search criterion, if given.
     *
     * Example: 0123456789
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Invoice Number List.
     * List of Invoice number.
     * Optional if InvoiceNumber is passed else Mandatory
     * Example: [“0123456789”, “0123459799”]
     *
     * @return string[]|null
     */
    public function getInvoiceNumberList(): ?array
    {
        return $this->invoiceNumberList;
    }

    /**
     * Sets Invoice Number List.
     * List of Invoice number.
     * Optional if InvoiceNumber is passed else Mandatory
     * Example: [“0123456789”, “0123459799”]
     *
     * @maps InvoiceNumberList
     *
     * @param string[]|null $invoiceNumberList
     */
    public function setInvoiceNumberList(?array $invoiceNumberList): void
    {
        $this->invoiceNumberList = $invoiceNumberList;
    }

    /**
     * Returns Invoice Status.
     * The status of the invoices
     *
     * Optional
     *
     * One of the following values:
     *
     * • NEW
     *
     * • VIEWED
     *
     * • DOWNLOADED
     *
     * • RESTORED
     */
    public function getInvoiceStatus(): ?string
    {
        if (count($this->invoiceStatus) == 0) {
            return null;
        }
        return $this->invoiceStatus['value'];
    }

    /**
     * Sets Invoice Status.
     * The status of the invoices
     *
     * Optional
     *
     * One of the following values:
     *
     * • NEW
     *
     * • VIEWED
     *
     * • DOWNLOADED
     *
     * • RESTORED
     *
     * @maps InvoiceStatus
     */
    public function setInvoiceStatus(?string $invoiceStatus): void
    {
        $this->invoiceStatus['value'] = $invoiceStatus;
    }

    /**
     * Unsets Invoice Status.
     * The status of the invoices
     *
     * Optional
     *
     * One of the following values:
     *
     * • NEW
     *
     * • VIEWED
     *
     * • DOWNLOADED
     *
     * • RESTORED
     */
    public function unsetInvoiceStatus(): void
    {
        $this->invoiceStatus = [];
    }

    /**
     * Returns Issuing Date From.
     * Invoice Issuing Date Range/From
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function getIssuingDateFrom(): ?string
    {
        if (count($this->issuingDateFrom) == 0) {
            return null;
        }
        return $this->issuingDateFrom['value'];
    }

    /**
     * Sets Issuing Date From.
     * Invoice Issuing Date Range/From
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     *
     * @maps IssuingDateFrom
     */
    public function setIssuingDateFrom(?string $issuingDateFrom): void
    {
        $this->issuingDateFrom['value'] = $issuingDateFrom;
    }

    /**
     * Unsets Issuing Date From.
     * Invoice Issuing Date Range/From
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function unsetIssuingDateFrom(): void
    {
        $this->issuingDateFrom = [];
    }

    /**
     * Returns Issuing Date To.
     * Invoice Issuing Date Range/To
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function getIssuingDateTo(): ?string
    {
        if (count($this->issuingDateTo) == 0) {
            return null;
        }
        return $this->issuingDateTo['value'];
    }

    /**
     * Sets Issuing Date To.
     * Invoice Issuing Date Range/To
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     *
     * @maps IssuingDateTo
     */
    public function setIssuingDateTo(?string $issuingDateTo): void
    {
        $this->issuingDateTo['value'] = $issuingDateTo;
    }

    /**
     * Unsets Issuing Date To.
     * Invoice Issuing Date Range/To
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function unsetIssuingDateTo(): void
    {
        $this->issuingDateTo = [];
    }

    /**
     * Returns Due Date From.
     * Invoice Due Date Range/From
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function getDueDateFrom(): ?string
    {
        if (count($this->dueDateFrom) == 0) {
            return null;
        }
        return $this->dueDateFrom['value'];
    }

    /**
     * Sets Due Date From.
     * Invoice Due Date Range/From
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     *
     * @maps DueDateFrom
     */
    public function setDueDateFrom(?string $dueDateFrom): void
    {
        $this->dueDateFrom['value'] = $dueDateFrom;
    }

    /**
     * Unsets Due Date From.
     * Invoice Due Date Range/From
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function unsetDueDateFrom(): void
    {
        $this->dueDateFrom = [];
    }

    /**
     * Returns Due Date To.
     * Invoice Due Date Range/To
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function getDueDateTo(): ?string
    {
        if (count($this->dueDateTo) == 0) {
            return null;
        }
        return $this->dueDateTo['value'];
    }

    /**
     * Sets Due Date To.
     * Invoice Due Date Range/To
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     *
     * @maps DueDateTo
     */
    public function setDueDateTo(?string $dueDateTo): void
    {
        $this->dueDateTo['value'] = $dueDateTo;
    }

    /**
     * Unsets Due Date To.
     * Invoice Due Date Range/To
     *
     * Optional
     *
     * Format: yyyy/MM/dd
     */
    public function unsetDueDateTo(): void
    {
        $this->dueDateTo = [];
    }

    /**
     * Returns Gross Amount.
     * Gross amount of the bill.
     *
     * Optional
     */
    public function getGrossAmount(): ?string
    {
        if (count($this->grossAmount) == 0) {
            return null;
        }
        return $this->grossAmount['value'];
    }

    /**
     * Sets Gross Amount.
     * Gross amount of the bill.
     *
     * Optional
     *
     * @maps GrossAmount
     */
    public function setGrossAmount(?string $grossAmount): void
    {
        $this->grossAmount['value'] = $grossAmount;
    }

    /**
     * Unsets Gross Amount.
     * Gross amount of the bill.
     *
     * Optional
     */
    public function unsetGrossAmount(): void
    {
        $this->grossAmount = [];
    }

    /**
     * Returns Gross Amount Operator.
     * Criteria on the gross amount, for instance use GT when to retrieve the invoices for that gross
     * amount is greater than the given amount on GrossAmount parameter above.
     *
     * Optional
     *
     *
     *
     * This parameter will be ignored if GrossAmount parameter is not set.
     *
     *
     *
     * One of the following values:
     *
     * • LT (Less Than)
     *
     * • LE (Lesser or Equal)
     *
     * • EQ (equal)
     *
     * • GE (Greater or equal)
     *
     * • GT (Greater than)
     */
    public function getGrossAmountOperator(): ?string
    {
        if (count($this->grossAmountOperator) == 0) {
            return null;
        }
        return $this->grossAmountOperator['value'];
    }

    /**
     * Sets Gross Amount Operator.
     * Criteria on the gross amount, for instance use GT when to retrieve the invoices for that gross
     * amount is greater than the given amount on GrossAmount parameter above.
     *
     * Optional
     *
     *
     *
     * This parameter will be ignored if GrossAmount parameter is not set.
     *
     *
     *
     * One of the following values:
     *
     * • LT (Less Than)
     *
     * • LE (Lesser or Equal)
     *
     * • EQ (equal)
     *
     * • GE (Greater or equal)
     *
     * • GT (Greater than)
     *
     * @maps GrossAmountOperator
     */
    public function setGrossAmountOperator(?string $grossAmountOperator): void
    {
        $this->grossAmountOperator['value'] = $grossAmountOperator;
    }

    /**
     * Unsets Gross Amount Operator.
     * Criteria on the gross amount, for instance use GT when to retrieve the invoices for that gross
     * amount is greater than the given amount on GrossAmount parameter above.
     *
     * Optional
     *
     *
     *
     * This parameter will be ignored if GrossAmount parameter is not set.
     *
     *
     *
     * One of the following values:
     *
     * • LT (Less Than)
     *
     * • LE (Lesser or Equal)
     *
     * • EQ (equal)
     *
     * • GE (Greater or equal)
     *
     * • GT (Greater than)
     */
    public function unsetGrossAmountOperator(): void
    {
        $this->grossAmountOperator = [];
    }

    /**
     * Returns Document Type.
     * Document Type
     *
     * Optional
     *
     * One of the following values:
     *
     * • NAT (National)
     *
     * • INT (International)
     *
     * • SOA (Statement of Account)
     */
    public function getDocumentType(): ?string
    {
        if (count($this->documentType) == 0) {
            return null;
        }
        return $this->documentType['value'];
    }

    /**
     * Sets Document Type.
     * Document Type
     *
     * Optional
     *
     * One of the following values:
     *
     * • NAT (National)
     *
     * • INT (International)
     *
     * • SOA (Statement of Account)
     *
     * @maps DocumentType
     */
    public function setDocumentType(?string $documentType): void
    {
        $this->documentType['value'] = $documentType;
    }

    /**
     * Unsets Document Type.
     * Document Type
     *
     * Optional
     *
     * One of the following values:
     *
     * • NAT (National)
     *
     * • INT (International)
     *
     * • SOA (Statement of Account)
     */
    public function unsetDocumentType(): void
    {
        $this->documentType = [];
    }

    /**
     * Returns V at Issuer Country.
     * Two letter ISO country code.
     */
    public function getVATIssuerCountry(): ?string
    {
        if (count($this->vATIssuerCountry) == 0) {
            return null;
        }
        return $this->vATIssuerCountry['value'];
    }

    /**
     * Sets V at Issuer Country.
     * Two letter ISO country code.
     *
     * @maps VATIssuerCountry
     */
    public function setVATIssuerCountry(?string $vATIssuerCountry): void
    {
        $this->vATIssuerCountry['value'] = $vATIssuerCountry;
    }

    /**
     * Unsets V at Issuer Country.
     * Two letter ISO country code.
     */
    public function unsetVATIssuerCountry(): void
    {
        $this->vATIssuerCountry = [];
    }

    /**
     * Returns Sorty By.
     * Collecting Company Code of the selected payer.
     * Mandatory
     * Example:
     * 86-Philippines
     * 5-UK
     *
     * @return string[]|null
     */
    public function getSortyBy(): ?array
    {
        return $this->sortyBy;
    }

    /**
     * Sets Sorty By.
     * Collecting Company Code of the selected payer.
     * Mandatory
     * Example:
     * 86-Philippines
     * 5-UK
     *
     * @maps SortyBy
     *
     * @param string[]|null $sortyBy
     */
    public function setSortyBy(?array $sortyBy): void
    {
        $this->sortyBy = $sortyBy;
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code of the selected payer.
     *
     * Mandatory
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code of the selected payer.
     *
     * Mandatory
     *
     * Example:
     *
     * 86-Philippines
     *
     * 5-UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['PayerNumber']             = $this->payerNumber;
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']       = $this->accountNumber['value'];
        }
        if (isset($this->accountNumberList)) {
            $json['AccountNumberList']   = $this->accountNumberList;
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber']       = $this->invoiceNumber['value'];
        }
        if (isset($this->invoiceNumberList)) {
            $json['InvoiceNumberList']   = $this->invoiceNumberList;
        }
        if (!empty($this->invoiceStatus)) {
            $json['InvoiceStatus']       = $this->invoiceStatus['value'];
        }
        if (!empty($this->issuingDateFrom)) {
            $json['IssuingDateFrom']     = $this->issuingDateFrom['value'];
        }
        if (!empty($this->issuingDateTo)) {
            $json['IssuingDateTo']       = $this->issuingDateTo['value'];
        }
        if (!empty($this->dueDateFrom)) {
            $json['DueDateFrom']         = $this->dueDateFrom['value'];
        }
        if (!empty($this->dueDateTo)) {
            $json['DueDateTo']           = $this->dueDateTo['value'];
        }
        if (!empty($this->grossAmount)) {
            $json['GrossAmount']         = $this->grossAmount['value'];
        }
        if (!empty($this->grossAmountOperator)) {
            $json['GrossAmountOperator'] = $this->grossAmountOperator['value'];
        }
        if (!empty($this->documentType)) {
            $json['DocumentType']        = $this->documentType['value'];
        }
        if (!empty($this->vATIssuerCountry)) {
            $json['VATIssuerCountry']    = $this->vATIssuerCountry['value'];
        }
        if (isset($this->sortyBy)) {
            $json['SortyBy']             = $this->sortyBy;
        }
        $json['ColCoCode']               = $this->colCoCode;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

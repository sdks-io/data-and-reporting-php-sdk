<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class UsageSummary implements \JsonSerializable
{
    /**
     * @var array
     */
    private $date = [];

    /**
     * @var array
     */
    private $productId = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $isFuelProduct = [];

    /**
     * @var array
     */
    private $siteGroupId = [];

    /**
     * @var array
     */
    private $siteGroupName = [];

    /**
     * @var array
     */
    private $totalVolume = [];

    /**
     * @var array
     */
    private $totalGross = [];

    /**
     * @var array
     */
    private $totalNet = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $productGroupID = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * Returns Date.
     * Transaction date.
     *
     * The records will be sorted by this field in ascending order.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function getDate(): ?string
    {
        if (count($this->date) == 0) {
            return null;
        }
        return $this->date['value'];
    }

    /**
     * Sets Date.
     * Transaction date.
     *
     * The records will be sorted by this field in ascending order.
     *
     *
     *
     * Format: yyyyMMdd
     *
     * @maps Date
     */
    public function setDate(?string $date): void
    {
        $this->date['value'] = $date;
    }

    /**
     * Unsets Date.
     * Transaction date.
     *
     * The records will be sorted by this field in ascending order.
     *
     *
     *
     * Format: yyyyMMdd
     */
    public function unsetDate(): void
    {
        $this->date = [];
    }

    /**
     * Returns Product Id.
     * Product Id
     */
    public function getProductId(): ?int
    {
        if (count($this->productId) == 0) {
            return null;
        }
        return $this->productId['value'];
    }

    /**
     * Sets Product Id.
     * Product Id
     *
     * @maps ProductId
     */
    public function setProductId(?int $productId): void
    {
        $this->productId['value'] = $productId;
    }

    /**
     * Unsets Product Id.
     * Product Id
     */
    public function unsetProductId(): void
    {
        $this->productId = [];
    }

    /**
     * Returns Product Code.
     * Client Product code
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Client Product code
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Client Product code
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * Product name in English
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * Product name in English
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * Product name in English
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Is Fuel Product.
     * Whether the product is fuel or non-fuel
     */
    public function getIsFuelProduct(): ?bool
    {
        if (count($this->isFuelProduct) == 0) {
            return null;
        }
        return $this->isFuelProduct['value'];
    }

    /**
     * Sets Is Fuel Product.
     * Whether the product is fuel or non-fuel
     *
     * @maps IsFuelProduct
     */
    public function setIsFuelProduct(?bool $isFuelProduct): void
    {
        $this->isFuelProduct['value'] = $isFuelProduct;
    }

    /**
     * Unsets Is Fuel Product.
     * Whether the product is fuel or non-fuel
     */
    public function unsetIsFuelProduct(): void
    {
        $this->isFuelProduct = [];
    }

    /**
     * Returns Site Group Id.
     * Site Group Id
     */
    public function getSiteGroupId(): ?int
    {
        if (count($this->siteGroupId) == 0) {
            return null;
        }
        return $this->siteGroupId['value'];
    }

    /**
     * Sets Site Group Id.
     * Site Group Id
     *
     * @maps SiteGroupId
     */
    public function setSiteGroupId(?int $siteGroupId): void
    {
        $this->siteGroupId['value'] = $siteGroupId;
    }

    /**
     * Unsets Site Group Id.
     * Site Group Id
     */
    public function unsetSiteGroupId(): void
    {
        $this->siteGroupId = [];
    }

    /**
     * Returns Site Group Name.
     * Site Group Name
     */
    public function getSiteGroupName(): ?string
    {
        if (count($this->siteGroupName) == 0) {
            return null;
        }
        return $this->siteGroupName['value'];
    }

    /**
     * Sets Site Group Name.
     * Site Group Name
     *
     * @maps SiteGroupName
     */
    public function setSiteGroupName(?string $siteGroupName): void
    {
        $this->siteGroupName['value'] = $siteGroupName;
    }

    /**
     * Unsets Site Group Name.
     * Site Group Name
     */
    public function unsetSiteGroupName(): void
    {
        $this->siteGroupName = [];
    }

    /**
     * Returns Total Volume.
     * Total Volume
     */
    public function getTotalVolume(): ?float
    {
        if (count($this->totalVolume) == 0) {
            return null;
        }
        return $this->totalVolume['value'];
    }

    /**
     * Sets Total Volume.
     * Total Volume
     *
     * @maps TotalVolume
     */
    public function setTotalVolume(?float $totalVolume): void
    {
        $this->totalVolume['value'] = $totalVolume;
    }

    /**
     * Unsets Total Volume.
     * Total Volume
     */
    public function unsetTotalVolume(): void
    {
        $this->totalVolume = [];
    }

    /**
     * Returns Total Gross.
     * Total Gross in Customer Currency
     */
    public function getTotalGross(): ?float
    {
        if (count($this->totalGross) == 0) {
            return null;
        }
        return $this->totalGross['value'];
    }

    /**
     * Sets Total Gross.
     * Total Gross in Customer Currency
     *
     * @maps TotalGross
     */
    public function setTotalGross(?float $totalGross): void
    {
        $this->totalGross['value'] = $totalGross;
    }

    /**
     * Unsets Total Gross.
     * Total Gross in Customer Currency
     */
    public function unsetTotalGross(): void
    {
        $this->totalGross = [];
    }

    /**
     * Returns Total Net.
     * Total Net in Customer Currency
     */
    public function getTotalNet(): ?float
    {
        if (count($this->totalNet) == 0) {
            return null;
        }
        return $this->totalNet['value'];
    }

    /**
     * Sets Total Net.
     * Total Net in Customer Currency
     *
     * @maps TotalNet
     */
    public function setTotalNet(?float $totalNet): void
    {
        $this->totalNet['value'] = $totalNet;
    }

    /**
     * Unsets Total Net.
     * Total Net in Customer Currency
     */
    public function unsetTotalNet(): void
    {
        $this->totalNet = [];
    }

    /**
     * Returns Currency Code.
     * Customer Currency Code
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * Customer Currency Code
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * Customer Currency Code
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Customer Currency Symbol
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Customer Currency Symbol
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Customer Currency Symbol
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Product Group ID.
     * Product group ID
     */
    public function getProductGroupID(): ?int
    {
        if (count($this->productGroupID) == 0) {
            return null;
        }
        return $this->productGroupID['value'];
    }

    /**
     * Sets Product Group ID.
     * Product group ID
     *
     * @maps ProductGroupID
     */
    public function setProductGroupID(?int $productGroupID): void
    {
        $this->productGroupID['value'] = $productGroupID;
    }

    /**
     * Unsets Product Group ID.
     * Product group ID
     */
    public function unsetProductGroupID(): void
    {
        $this->productGroupID = [];
    }

    /**
     * Returns Product Group Name.
     * Product group Name
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Product group Name
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Product group Name
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->date)) {
            $json['Date']             = $this->date['value'];
        }
        if (!empty($this->productId)) {
            $json['ProductId']        = $this->productId['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']      = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']      = $this->productName['value'];
        }
        if (!empty($this->isFuelProduct)) {
            $json['IsFuelProduct']    = $this->isFuelProduct['value'];
        }
        if (!empty($this->siteGroupId)) {
            $json['SiteGroupId']      = $this->siteGroupId['value'];
        }
        if (!empty($this->siteGroupName)) {
            $json['SiteGroupName']    = $this->siteGroupName['value'];
        }
        if (!empty($this->totalVolume)) {
            $json['TotalVolume']      = $this->totalVolume['value'];
        }
        if (!empty($this->totalGross)) {
            $json['TotalGross']       = $this->totalGross['value'];
        }
        if (!empty($this->totalNet)) {
            $json['TotalNet']         = $this->totalNet['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']     = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']   = $this->currencySymbol['value'];
        }
        if (!empty($this->productGroupID)) {
            $json['ProductGroupID']   = $this->productGroupID['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName'] = $this->productGroupName['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

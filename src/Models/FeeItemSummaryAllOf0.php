<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class FeeItemSummaryAllOf0 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $feeTypeGroup = [];

    /**
     * @var array
     */
    private $feeTypeId = [];

    /**
     * @var array
     */
    private $productId = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $productGroupId = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $totalQuantity = [];

    /**
     * @var array
     */
    private $totalInvoiceNetAmount = [];

    /**
     * @var array
     */
    private $totalInvoiceGrossAmount = [];

    /**
     * @var array
     */
    private $totalInvoiceVATAmount = [];

    /**
     * @var array
     */
    private $invoiceCurrencyCode = [];

    /**
     * @var array
     */
    private $invoiceCurrencySymbol = [];

    /**
     * Returns Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     */
    public function getFeeTypeGroup(): ?string
    {
        if (count($this->feeTypeGroup) == 0) {
            return null;
        }
        return $this->feeTypeGroup['value'];
    }

    /**
     * Sets Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     *
     * @maps FeeTypeGroup
     */
    public function setFeeTypeGroup(?string $feeTypeGroup): void
    {
        $this->feeTypeGroup['value'] = $feeTypeGroup;
    }

    /**
     * Unsets Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     */
    public function unsetFeeTypeGroup(): void
    {
        $this->feeTypeGroup = [];
    }

    /**
     * Returns Fee Type Id.
     * Fee Type Id ID  Description
     */
    public function getFeeTypeId(): ?string
    {
        if (count($this->feeTypeId) == 0) {
            return null;
        }
        return $this->feeTypeId['value'];
    }

    /**
     * Sets Fee Type Id.
     * Fee Type Id ID  Description
     *
     * @maps FeeTypeId
     */
    public function setFeeTypeId(?string $feeTypeId): void
    {
        $this->feeTypeId['value'] = $feeTypeId;
    }

    /**
     * Unsets Fee Type Id.
     * Fee Type Id ID  Description
     */
    public function unsetFeeTypeId(): void
    {
        $this->feeTypeId = [];
    }

    /**
     * Returns Product Id.
     * Product Id
     */
    public function getProductId(): ?int
    {
        if (count($this->productId) == 0) {
            return null;
        }
        return $this->productId['value'];
    }

    /**
     * Sets Product Id.
     * Product Id
     *
     * @maps ProductId
     */
    public function setProductId(?int $productId): void
    {
        $this->productId['value'] = $productId;
    }

    /**
     * Unsets Product Id.
     * Product Id
     */
    public function unsetProductId(): void
    {
        $this->productId = [];
    }

    /**
     * Returns Product Code.
     * Product Code
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * Product Name
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * Product Name
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * Product Name
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Product Group Id.
     * Product Group Id
     */
    public function getProductGroupId(): ?int
    {
        if (count($this->productGroupId) == 0) {
            return null;
        }
        return $this->productGroupId['value'];
    }

    /**
     * Sets Product Group Id.
     * Product Group Id
     *
     * @maps ProductGroupId
     */
    public function setProductGroupId(?int $productGroupId): void
    {
        $this->productGroupId['value'] = $productGroupId;
    }

    /**
     * Unsets Product Group Id.
     * Product Group Id
     */
    public function unsetProductGroupId(): void
    {
        $this->productGroupId = [];
    }

    /**
     * Returns Product Group Name.
     * Product Group Name
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Product Group Name
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Product Group Name
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Total Quantity.
     * Total Quantity
     */
    public function getTotalQuantity(): ?float
    {
        if (count($this->totalQuantity) == 0) {
            return null;
        }
        return $this->totalQuantity['value'];
    }

    /**
     * Sets Total Quantity.
     * Total Quantity
     *
     * @maps TotalQuantity
     */
    public function setTotalQuantity(?float $totalQuantity): void
    {
        $this->totalQuantity['value'] = $totalQuantity;
    }

    /**
     * Unsets Total Quantity.
     * Total Quantity
     */
    public function unsetTotalQuantity(): void
    {
        $this->totalQuantity = [];
    }

    /**
     * Returns Total Invoice Net Amount.
     * Total Net amount in invoice currency
     */
    public function getTotalInvoiceNetAmount(): ?float
    {
        if (count($this->totalInvoiceNetAmount) == 0) {
            return null;
        }
        return $this->totalInvoiceNetAmount['value'];
    }

    /**
     * Sets Total Invoice Net Amount.
     * Total Net amount in invoice currency
     *
     * @maps TotalInvoiceNetAmount
     */
    public function setTotalInvoiceNetAmount(?float $totalInvoiceNetAmount): void
    {
        $this->totalInvoiceNetAmount['value'] = $totalInvoiceNetAmount;
    }

    /**
     * Unsets Total Invoice Net Amount.
     * Total Net amount in invoice currency
     */
    public function unsetTotalInvoiceNetAmount(): void
    {
        $this->totalInvoiceNetAmount = [];
    }

    /**
     * Returns Total Invoice Gross Amount.
     * Total Gross amount in invoice currency
     */
    public function getTotalInvoiceGrossAmount(): ?float
    {
        if (count($this->totalInvoiceGrossAmount) == 0) {
            return null;
        }
        return $this->totalInvoiceGrossAmount['value'];
    }

    /**
     * Sets Total Invoice Gross Amount.
     * Total Gross amount in invoice currency
     *
     * @maps TotalInvoiceGrossAmount
     */
    public function setTotalInvoiceGrossAmount(?float $totalInvoiceGrossAmount): void
    {
        $this->totalInvoiceGrossAmount['value'] = $totalInvoiceGrossAmount;
    }

    /**
     * Unsets Total Invoice Gross Amount.
     * Total Gross amount in invoice currency
     */
    public function unsetTotalInvoiceGrossAmount(): void
    {
        $this->totalInvoiceGrossAmount = [];
    }

    /**
     * Returns Total Invoice VAT Amount.
     * Total VAT amount in invoice currency
     */
    public function getTotalInvoiceVATAmount(): ?float
    {
        if (count($this->totalInvoiceVATAmount) == 0) {
            return null;
        }
        return $this->totalInvoiceVATAmount['value'];
    }

    /**
     * Sets Total Invoice VAT Amount.
     * Total VAT amount in invoice currency
     *
     * @maps TotalInvoiceVATAmount
     */
    public function setTotalInvoiceVATAmount(?float $totalInvoiceVATAmount): void
    {
        $this->totalInvoiceVATAmount['value'] = $totalInvoiceVATAmount;
    }

    /**
     * Unsets Total Invoice VAT Amount.
     * Total VAT amount in invoice currency
     */
    public function unsetTotalInvoiceVATAmount(): void
    {
        $this->totalInvoiceVATAmount = [];
    }

    /**
     * Returns Invoice Currency Code.
     * ISO 4217 currency code of the country
     */
    public function getInvoiceCurrencyCode(): ?string
    {
        if (count($this->invoiceCurrencyCode) == 0) {
            return null;
        }
        return $this->invoiceCurrencyCode['value'];
    }

    /**
     * Sets Invoice Currency Code.
     * ISO 4217 currency code of the country
     *
     * @maps InvoiceCurrencyCode
     */
    public function setInvoiceCurrencyCode(?string $invoiceCurrencyCode): void
    {
        $this->invoiceCurrencyCode['value'] = $invoiceCurrencyCode;
    }

    /**
     * Unsets Invoice Currency Code.
     * ISO 4217 currency code of the country
     */
    public function unsetInvoiceCurrencyCode(): void
    {
        $this->invoiceCurrencyCode = [];
    }

    /**
     * Returns Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     */
    public function getInvoiceCurrencySymbol(): ?string
    {
        if (count($this->invoiceCurrencySymbol) == 0) {
            return null;
        }
        return $this->invoiceCurrencySymbol['value'];
    }

    /**
     * Sets Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * @maps InvoiceCurrencySymbol
     */
    public function setInvoiceCurrencySymbol(?string $invoiceCurrencySymbol): void
    {
        $this->invoiceCurrencySymbol['value'] = $invoiceCurrencySymbol;
    }

    /**
     * Unsets Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     */
    public function unsetInvoiceCurrencySymbol(): void
    {
        $this->invoiceCurrencySymbol = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->feeTypeGroup)) {
            $json['FeeTypeGroup']            = $this->feeTypeGroup['value'];
        }
        if (!empty($this->feeTypeId)) {
            $json['FeeTypeId']               = $this->feeTypeId['value'];
        }
        if (!empty($this->productId)) {
            $json['ProductId']               = $this->productId['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']             = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']             = $this->productName['value'];
        }
        if (!empty($this->productGroupId)) {
            $json['ProductGroupId']          = $this->productGroupId['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']        = $this->productGroupName['value'];
        }
        if (!empty($this->totalQuantity)) {
            $json['TotalQuantity']           = $this->totalQuantity['value'];
        }
        if (!empty($this->totalInvoiceNetAmount)) {
            $json['TotalInvoiceNetAmount']   = $this->totalInvoiceNetAmount['value'];
        }
        if (!empty($this->totalInvoiceGrossAmount)) {
            $json['TotalInvoiceGrossAmount'] = $this->totalInvoiceGrossAmount['value'];
        }
        if (!empty($this->totalInvoiceVATAmount)) {
            $json['TotalInvoiceVATAmount']   = $this->totalInvoiceVATAmount['value'];
        }
        if (!empty($this->invoiceCurrencyCode)) {
            $json['InvoiceCurrencyCode']     = $this->invoiceCurrencyCode['value'];
        }
        if (!empty($this->invoiceCurrencySymbol)) {
            $json['InvoiceCurrencySymbol']   = $this->invoiceCurrencySymbol['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

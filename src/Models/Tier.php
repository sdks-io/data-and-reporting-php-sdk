<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class Tier implements \JsonSerializable
{
    /**
     * @var array
     */
    private $tierPriceListId = [];

    /**
     * @var array
     */
    private $priceListDescription = [];

    /**
     * @var array
     */
    private $tierMin = [];

    /**
     * @var array
     */
    private $tierMax = [];

    /**
     * @var array
     */
    private $tieredPricingGroupName = [];

    /**
     * @var array
     */
    private $tieredPricingGroupPeriod = [];

    /**
     * @var array
     */
    private $discountValue = [];

    /**
     * @var array
     */
    private $pricePerUnit = [];

    /**
     * @var array
     */
    private $pricePerUnitAfterDiscount = [];

    /**
     * Returns Tier Price List Id.
     * The price list if reference price is list price.
     * Only used when the Price Rule category is set to.
     * ‘Tiered Pricing’.
     */
    public function getTierPriceListId(): ?int
    {
        if (count($this->tierPriceListId) == 0) {
            return null;
        }
        return $this->tierPriceListId['value'];
    }

    /**
     * Sets Tier Price List Id.
     * The price list if reference price is list price.
     * Only used when the Price Rule category is set to.
     * ‘Tiered Pricing’.
     *
     * @maps TierPriceListId
     */
    public function setTierPriceListId(?int $tierPriceListId): void
    {
        $this->tierPriceListId['value'] = $tierPriceListId;
    }

    /**
     * Unsets Tier Price List Id.
     * The price list if reference price is list price.
     * Only used when the Price Rule category is set to.
     * ‘Tiered Pricing’.
     */
    public function unsetTierPriceListId(): void
    {
        $this->tierPriceListId = [];
    }

    /**
     * Returns Price List Description.
     * Price list description of the tier.
     */
    public function getPriceListDescription(): ?string
    {
        if (count($this->priceListDescription) == 0) {
            return null;
        }
        return $this->priceListDescription['value'];
    }

    /**
     * Sets Price List Description.
     * Price list description of the tier.
     *
     * @maps PriceListDescription
     */
    public function setPriceListDescription(?string $priceListDescription): void
    {
        $this->priceListDescription['value'] = $priceListDescription;
    }

    /**
     * Unsets Price List Description.
     * Price list description of the tier.
     */
    public function unsetPriceListDescription(): void
    {
        $this->priceListDescription = [];
    }

    /**
     * Returns Tier Min.
     * Minimum tier volume
     * E.g., 500
     */
    public function getTierMin(): ?int
    {
        if (count($this->tierMin) == 0) {
            return null;
        }
        return $this->tierMin['value'];
    }

    /**
     * Sets Tier Min.
     * Minimum tier volume
     * E.g., 500
     *
     * @maps TierMin
     */
    public function setTierMin(?int $tierMin): void
    {
        $this->tierMin['value'] = $tierMin;
    }

    /**
     * Unsets Tier Min.
     * Minimum tier volume
     * E.g., 500
     */
    public function unsetTierMin(): void
    {
        $this->tierMin = [];
    }

    /**
     * Returns Tier Max.
     * Maximum tier volume
     * E.g., 1000
     */
    public function getTierMax(): ?int
    {
        if (count($this->tierMax) == 0) {
            return null;
        }
        return $this->tierMax['value'];
    }

    /**
     * Sets Tier Max.
     * Maximum tier volume
     * E.g., 1000
     *
     * @maps TierMax
     */
    public function setTierMax(?int $tierMax): void
    {
        $this->tierMax['value'] = $tierMax;
    }

    /**
     * Unsets Tier Max.
     * Maximum tier volume
     * E.g., 1000
     */
    public function unsetTierMax(): void
    {
        $this->tierMax = [];
    }

    /**
     * Returns Tiered Pricing Group Name.
     * Pricing group name of tier
     */
    public function getTieredPricingGroupName(): ?string
    {
        if (count($this->tieredPricingGroupName) == 0) {
            return null;
        }
        return $this->tieredPricingGroupName['value'];
    }

    /**
     * Sets Tiered Pricing Group Name.
     * Pricing group name of tier
     *
     * @maps TieredPricingGroupName
     */
    public function setTieredPricingGroupName(?string $tieredPricingGroupName): void
    {
        $this->tieredPricingGroupName['value'] = $tieredPricingGroupName;
    }

    /**
     * Unsets Tiered Pricing Group Name.
     * Pricing group name of tier
     */
    public function unsetTieredPricingGroupName(): void
    {
        $this->tieredPricingGroupName = [];
    }

    /**
     * Returns Tiered Pricing Group Period.
     * Tiered pricing group period.
     * Possible Values
     * 1.    Monthly
     * 2.    Quarterly
     * 3.    Semi Annually
     * 4.    Annual
     */
    public function getTieredPricingGroupPeriod(): ?string
    {
        if (count($this->tieredPricingGroupPeriod) == 0) {
            return null;
        }
        return $this->tieredPricingGroupPeriod['value'];
    }

    /**
     * Sets Tiered Pricing Group Period.
     * Tiered pricing group period.
     * Possible Values
     * 1.    Monthly
     * 2.    Quarterly
     * 3.    Semi Annually
     * 4.    Annual
     *
     * @maps TieredPricingGroupPeriod
     */
    public function setTieredPricingGroupPeriod(?string $tieredPricingGroupPeriod): void
    {
        $this->tieredPricingGroupPeriod['value'] = $tieredPricingGroupPeriod;
    }

    /**
     * Unsets Tiered Pricing Group Period.
     * Tiered pricing group period.
     * Possible Values
     * 1.    Monthly
     * 2.    Quarterly
     * 3.    Semi Annually
     * 4.    Annual
     */
    public function unsetTieredPricingGroupPeriod(): void
    {
        $this->tieredPricingGroupPeriod = [];
    }

    /**
     * Returns Discount Value.
     * Discount value to be applied to the List price or pump price.
     */
    public function getDiscountValue(): ?float
    {
        if (count($this->discountValue) == 0) {
            return null;
        }
        return $this->discountValue['value'];
    }

    /**
     * Sets Discount Value.
     * Discount value to be applied to the List price or pump price.
     *
     * @maps DiscountValue
     */
    public function setDiscountValue(?float $discountValue): void
    {
        $this->discountValue['value'] = $discountValue;
    }

    /**
     * Unsets Discount Value.
     * Discount value to be applied to the List price or pump price.
     */
    public function unsetDiscountValue(): void
    {
        $this->discountValue = [];
    }

    /**
     * Returns Price Per Unit.
     * Price per unit after discount
     *
     * Note: This field will not contain any value for discounts on retail prices.
     */
    public function getPricePerUnit(): ?float
    {
        if (count($this->pricePerUnit) == 0) {
            return null;
        }
        return $this->pricePerUnit['value'];
    }

    /**
     * Sets Price Per Unit.
     * Price per unit after discount
     *
     * Note: This field will not contain any value for discounts on retail prices.
     *
     * @maps PricePerUnit
     */
    public function setPricePerUnit(?float $pricePerUnit): void
    {
        $this->pricePerUnit['value'] = $pricePerUnit;
    }

    /**
     * Unsets Price Per Unit.
     * Price per unit after discount
     *
     * Note: This field will not contain any value for discounts on retail prices.
     */
    public function unsetPricePerUnit(): void
    {
        $this->pricePerUnit = [];
    }

    /**
     * Returns Price Per Unit After Discount.
     * Price per unit (List Price)
     *
     * Note: This field will not contain any value for discounts on retail prices.
     */
    public function getPricePerUnitAfterDiscount(): ?float
    {
        if (count($this->pricePerUnitAfterDiscount) == 0) {
            return null;
        }
        return $this->pricePerUnitAfterDiscount['value'];
    }

    /**
     * Sets Price Per Unit After Discount.
     * Price per unit (List Price)
     *
     * Note: This field will not contain any value for discounts on retail prices.
     *
     * @maps PricePerUnitAfterDiscount
     */
    public function setPricePerUnitAfterDiscount(?float $pricePerUnitAfterDiscount): void
    {
        $this->pricePerUnitAfterDiscount['value'] = $pricePerUnitAfterDiscount;
    }

    /**
     * Unsets Price Per Unit After Discount.
     * Price per unit (List Price)
     *
     * Note: This field will not contain any value for discounts on retail prices.
     */
    public function unsetPricePerUnitAfterDiscount(): void
    {
        $this->pricePerUnitAfterDiscount = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->tierPriceListId)) {
            $json['TierPriceListId']           = $this->tierPriceListId['value'];
        }
        if (!empty($this->priceListDescription)) {
            $json['PriceListDescription']      = $this->priceListDescription['value'];
        }
        if (!empty($this->tierMin)) {
            $json['TierMin']                   = $this->tierMin['value'];
        }
        if (!empty($this->tierMax)) {
            $json['TierMax']                   = $this->tierMax['value'];
        }
        if (!empty($this->tieredPricingGroupName)) {
            $json['TieredPricingGroupName']    = $this->tieredPricingGroupName['value'];
        }
        if (!empty($this->tieredPricingGroupPeriod)) {
            $json['TieredPricingGroupPeriod']  = $this->tieredPricingGroupPeriod['value'];
        }
        if (!empty($this->discountValue)) {
            $json['DiscountValue']             = $this->discountValue['value'];
        }
        if (!empty($this->pricePerUnit)) {
            $json['PricePerUnit']              = $this->pricePerUnit['value'];
        }
        if (!empty($this->pricePerUnitAfterDiscount)) {
            $json['PricePerUnitAfterDiscount'] = $this->pricePerUnitAfterDiscount['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

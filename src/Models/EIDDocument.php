<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class EIDDocument implements \JsonSerializable
{
    /**
     * @var array
     */
    private $documentId = [];

    /**
     * @var array
     */
    private $accountGroupId = [];

    /**
     * @var array
     */
    private $accountGroupName = [];

    /**
     * @var array
     */
    private $documentType = [];

    /**
     * @var array
     */
    private $documentFormat = [];

    /**
     * @var array
     */
    private $documentDate = [];

    /**
     * @var array
     */
    private $numberOfInvoices = [];

    /**
     * @var array
     */
    private $fileSize = [];

    /**
     * @var array
     */
    private $documentStatus = [];

    /**
     * @var array
     */
    private $documentName = [];

    /**
     * Returns Document Id.
     * Technical identifier for the EID file. Should not be stored in database as it is not guaranteed to
     * stay unchanged over time.
     */
    public function getDocumentId(): ?int
    {
        if (count($this->documentId) == 0) {
            return null;
        }
        return $this->documentId['value'];
    }

    /**
     * Sets Document Id.
     * Technical identifier for the EID file. Should not be stored in database as it is not guaranteed to
     * stay unchanged over time.
     *
     * @maps DocumentId
     */
    public function setDocumentId(?int $documentId): void
    {
        $this->documentId['value'] = $documentId;
    }

    /**
     * Unsets Document Id.
     * Technical identifier for the EID file. Should not be stored in database as it is not guaranteed to
     * stay unchanged over time.
     */
    public function unsetDocumentId(): void
    {
        $this->documentId = [];
    }

    /**
     * Returns Account Group Id.
     * Account Group Id
     */
    public function getAccountGroupId(): ?string
    {
        if (count($this->accountGroupId) == 0) {
            return null;
        }
        return $this->accountGroupId['value'];
    }

    /**
     * Sets Account Group Id.
     * Account Group Id
     *
     * @maps AccountGroupId
     */
    public function setAccountGroupId(?string $accountGroupId): void
    {
        $this->accountGroupId['value'] = $accountGroupId;
    }

    /**
     * Unsets Account Group Id.
     * Account Group Id
     */
    public function unsetAccountGroupId(): void
    {
        $this->accountGroupId = [];
    }

    /**
     * Returns Account Group Name.
     * Account group name
     */
    public function getAccountGroupName(): ?string
    {
        if (count($this->accountGroupName) == 0) {
            return null;
        }
        return $this->accountGroupName['value'];
    }

    /**
     * Sets Account Group Name.
     * Account group name
     *
     * @maps AccountGroupName
     */
    public function setAccountGroupName(?string $accountGroupName): void
    {
        $this->accountGroupName['value'] = $accountGroupName;
    }

    /**
     * Unsets Account Group Name.
     * Account group name
     */
    public function unsetAccountGroupName(): void
    {
        $this->accountGroupName = [];
    }

    /**
     * Returns Document Type.
     * Document type.
     * Possible values:
     * •    NAT (National)
     * •    INT (International)
     */
    public function getDocumentType(): ?string
    {
        if (count($this->documentType) == 0) {
            return null;
        }
        return $this->documentType['value'];
    }

    /**
     * Sets Document Type.
     * Document type.
     * Possible values:
     * •    NAT (National)
     * •    INT (International)
     *
     * @maps DocumentType
     */
    public function setDocumentType(?string $documentType): void
    {
        $this->documentType['value'] = $documentType;
    }

    /**
     * Unsets Document Type.
     * Document type.
     * Possible values:
     * •    NAT (National)
     * •    INT (International)
     */
    public function unsetDocumentType(): void
    {
        $this->documentType = [];
    }

    /**
     * Returns Document Format.
     * Document format (CHORUS, DIFI etc.)
     */
    public function getDocumentFormat(): ?string
    {
        if (count($this->documentFormat) == 0) {
            return null;
        }
        return $this->documentFormat['value'];
    }

    /**
     * Sets Document Format.
     * Document format (CHORUS, DIFI etc.)
     *
     * @maps DocumentFormat
     */
    public function setDocumentFormat(?string $documentFormat): void
    {
        $this->documentFormat['value'] = $documentFormat;
    }

    /**
     * Unsets Document Format.
     * Document format (CHORUS, DIFI etc.)
     */
    public function unsetDocumentFormat(): void
    {
        $this->documentFormat = [];
    }

    /**
     * Returns Document Date.
     * Document date.
     * Example: 20170101
     */
    public function getDocumentDate(): ?string
    {
        if (count($this->documentDate) == 0) {
            return null;
        }
        return $this->documentDate['value'];
    }

    /**
     * Sets Document Date.
     * Document date.
     * Example: 20170101
     *
     * @maps DocumentDate
     */
    public function setDocumentDate(?string $documentDate): void
    {
        $this->documentDate['value'] = $documentDate;
    }

    /**
     * Unsets Document Date.
     * Document date.
     * Example: 20170101
     */
    public function unsetDocumentDate(): void
    {
        $this->documentDate = [];
    }

    /**
     * Returns Number of Invoices.
     * Number of invoices
     */
    public function getNumberOfInvoices(): ?int
    {
        if (count($this->numberOfInvoices) == 0) {
            return null;
        }
        return $this->numberOfInvoices['value'];
    }

    /**
     * Sets Number of Invoices.
     * Number of invoices
     *
     * @maps NumberOfInvoices
     */
    public function setNumberOfInvoices(?int $numberOfInvoices): void
    {
        $this->numberOfInvoices['value'] = $numberOfInvoices;
    }

    /**
     * Unsets Number of Invoices.
     * Number of invoices
     */
    public function unsetNumberOfInvoices(): void
    {
        $this->numberOfInvoices = [];
    }

    /**
     * Returns File Size.
     * Document size
     */
    public function getFileSize(): ?int
    {
        if (count($this->fileSize) == 0) {
            return null;
        }
        return $this->fileSize['value'];
    }

    /**
     * Sets File Size.
     * Document size
     *
     * @maps FileSize
     */
    public function setFileSize(?int $fileSize): void
    {
        $this->fileSize['value'] = $fileSize;
    }

    /**
     * Unsets File Size.
     * Document size
     */
    public function unsetFileSize(): void
    {
        $this->fileSize = [];
    }

    /**
     * Returns Document Status.
     * Document status.
     * Possible values:
     * •    NEW
     * •    VIEWED
     * •    DOWNLOADED
     * •    RESTORED
     */
    public function getDocumentStatus(): ?string
    {
        if (count($this->documentStatus) == 0) {
            return null;
        }
        return $this->documentStatus['value'];
    }

    /**
     * Sets Document Status.
     * Document status.
     * Possible values:
     * •    NEW
     * •    VIEWED
     * •    DOWNLOADED
     * •    RESTORED
     *
     * @maps DocumentStatus
     */
    public function setDocumentStatus(?string $documentStatus): void
    {
        $this->documentStatus['value'] = $documentStatus;
    }

    /**
     * Unsets Document Status.
     * Document status.
     * Possible values:
     * •    NEW
     * •    VIEWED
     * •    DOWNLOADED
     * •    RESTORED
     */
    public function unsetDocumentStatus(): void
    {
        $this->documentStatus = [];
    }

    /**
     * Returns Document Name.
     * Document file name.
     */
    public function getDocumentName(): ?string
    {
        if (count($this->documentName) == 0) {
            return null;
        }
        return $this->documentName['value'];
    }

    /**
     * Sets Document Name.
     * Document file name.
     *
     * @maps DocumentName
     */
    public function setDocumentName(?string $documentName): void
    {
        $this->documentName['value'] = $documentName;
    }

    /**
     * Unsets Document Name.
     * Document file name.
     */
    public function unsetDocumentName(): void
    {
        $this->documentName = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->documentId)) {
            $json['DocumentId']       = $this->documentId['value'];
        }
        if (!empty($this->accountGroupId)) {
            $json['AccountGroupId']   = $this->accountGroupId['value'];
        }
        if (!empty($this->accountGroupName)) {
            $json['AccountGroupName'] = $this->accountGroupName['value'];
        }
        if (!empty($this->documentType)) {
            $json['DocumentType']     = $this->documentType['value'];
        }
        if (!empty($this->documentFormat)) {
            $json['DocumentFormat']   = $this->documentFormat['value'];
        }
        if (!empty($this->documentDate)) {
            $json['DocumentDate']     = $this->documentDate['value'];
        }
        if (!empty($this->numberOfInvoices)) {
            $json['NumberOfInvoices'] = $this->numberOfInvoices['value'];
        }
        if (!empty($this->fileSize)) {
            $json['FileSize']         = $this->fileSize['value'];
        }
        if (!empty($this->documentStatus)) {
            $json['DocumentStatus']   = $this->documentStatus['value'];
        }
        if (!empty($this->documentName)) {
            $json['DocumentName']     = $this->documentName['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

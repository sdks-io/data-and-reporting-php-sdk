<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class FeeItem implements \JsonSerializable
{
    /**
     * @var array
     */
    private $feeItemId = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $invoiceAccountId = [];

    /**
     * @var array
     */
    private $invoiceAccountNumber = [];

    /**
     * @var array
     */
    private $invoiceAccountShortName = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerShortName = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $feeTypeId = [];

    /**
     * @var array
     */
    private $feeType = [];

    /**
     * @var array
     */
    private $feeTypeGroup = [];

    /**
     * @var array
     */
    private $feeRuleId = [];

    /**
     * @var array
     */
    private $feeRuleDescription = [];

    /**
     * @var FeesFeeRuleTiers[]|null
     */
    private $feeRuleTiers;

    /**
     * @var array
     */
    private $feeItemDate = [];

    /**
     * @var array
     */
    private $feeItemTime = [];

    /**
     * @var array
     */
    private $isManual = [];

    /**
     * @var array
     */
    private $isCancelled = [];

    /**
     * @var array
     */
    private $customerCurrencyCode = [];

    /**
     * @var array
     */
    private $customerCurrencySymbol = [];

    /**
     * @var array
     */
    private $productId = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $productGroupId = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $lineItemDescription = [];

    /**
     * @var array
     */
    private $quantity = [];

    /**
     * @var array
     */
    private $isInvoiced = [];

    /**
     * @var array
     */
    private $vATCountryCode = [];

    /**
     * @var array
     */
    private $vATCountryName = [];

    /**
     * @var array
     */
    private $vATPercentage = [];

    /**
     * @var array
     */
    private $vATCategoryID = [];

    /**
     * @var array
     */
    private $vATCategoryDescription = [];

    /**
     * @var array
     */
    private $legislativeRegionId = [];

    /**
     * @var array
     */
    private $legislativeRegionName = [];

    /**
     * @var array
     */
    private $systemEntryDate = [];

    /**
     * @var array
     */
    private $systemEntryTime = [];

    /**
     * @var array
     */
    private $colCoNetAmount = [];

    /**
     * @var array
     */
    private $colCoVATAmount = [];

    /**
     * @var array
     */
    private $colCoGrossAmount = [];

    /**
     * @var array
     */
    private $interimInvoiceId = [];

    /**
     * @var array
     */
    private $interimInvoiceNumber = [];

    /**
     * @var array
     */
    private $invoiceId = [];

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $invoiceDate = [];

    /**
     * @var array
     */
    private $customerExchangeRate = [];

    /**
     * @var array
     */
    private $invoiceNetAmount = [];

    /**
     * @var array
     */
    private $invoiceGrossAmount = [];

    /**
     * @var array
     */
    private $invoiceVATAmount = [];

    /**
     * @var array
     */
    private $reverseCharge = [];

    /**
     * @var array
     */
    private $originalFeeItemId = [];

    /**
     * @var array
     */
    private $originalCurrencyCode = [];

    /**
     * @var array
     */
    private $originalCurrencySymbol = [];

    /**
     * @var array
     */
    private $originalUnitPrice = [];

    /**
     * @var array
     */
    private $originalNetAmount = [];

    /**
     * @var array
     */
    private $originalVATAmount = [];

    /**
     * @var array
     */
    private $originalGrossAmount = [];

    /**
     * @var array
     */
    private $originalExchangeRate = [];

    /**
     * @var array
     */
    private $originalLegislativeRegionId = [];

    /**
     * @var array
     */
    private $originalLegislativeRegionName = [];

    /**
     * @var array
     */
    private $frequency = [];

    /**
     * @var array
     */
    private $feeItemCardLevelBreakup = [];

    /**
     * @var array
     */
    private $originalFeeItemInvoiceId = [];

    /**
     * @var array
     */
    private $originalFeeItemInvoiceNumber = [];

    /**
     * @var array
     */
    private $originalFeeItemInvoiceDate = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $embossText = [];

    /**
     * @var array
     */
    private $vRN = [];

    /**
     * Returns Fee Item Id.
     * Fee Item unique identifier in the H3 Cards Platform
     */
    public function getFeeItemId(): ?int
    {
        if (count($this->feeItemId) == 0) {
            return null;
        }
        return $this->feeItemId['value'];
    }

    /**
     * Sets Fee Item Id.
     * Fee Item unique identifier in the H3 Cards Platform
     *
     * @maps FeeItemId
     */
    public function setFeeItemId(?int $feeItemId): void
    {
        $this->feeItemId['value'] = $feeItemId;
    }

    /**
     * Unsets Fee Item Id.
     * Fee Item unique identifier in the H3 Cards Platform
     */
    public function unsetFeeItemId(): void
    {
        $this->feeItemId = [];
    }

    /**
     * Returns Account Id.
     * Account Id
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account short Number
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account short Number
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account short Number
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Invoice Account Id.
     * Invoice Account Id
     */
    public function getInvoiceAccountId(): ?int
    {
        if (count($this->invoiceAccountId) == 0) {
            return null;
        }
        return $this->invoiceAccountId['value'];
    }

    /**
     * Sets Invoice Account Id.
     * Invoice Account Id
     *
     * @maps InvoiceAccountId
     */
    public function setInvoiceAccountId(?int $invoiceAccountId): void
    {
        $this->invoiceAccountId['value'] = $invoiceAccountId;
    }

    /**
     * Unsets Invoice Account Id.
     * Invoice Account Id
     */
    public function unsetInvoiceAccountId(): void
    {
        $this->invoiceAccountId = [];
    }

    /**
     * Returns Invoice Account Number.
     * Invoice Account Number
     */
    public function getInvoiceAccountNumber(): ?string
    {
        if (count($this->invoiceAccountNumber) == 0) {
            return null;
        }
        return $this->invoiceAccountNumber['value'];
    }

    /**
     * Sets Invoice Account Number.
     * Invoice Account Number
     *
     * @maps InvoiceAccountNumber
     */
    public function setInvoiceAccountNumber(?string $invoiceAccountNumber): void
    {
        $this->invoiceAccountNumber['value'] = $invoiceAccountNumber;
    }

    /**
     * Unsets Invoice Account Number.
     * Invoice Account Number
     */
    public function unsetInvoiceAccountNumber(): void
    {
        $this->invoiceAccountNumber = [];
    }

    /**
     * Returns Invoice Account Short Name.
     * Invoice Account short Name
     */
    public function getInvoiceAccountShortName(): ?string
    {
        if (count($this->invoiceAccountShortName) == 0) {
            return null;
        }
        return $this->invoiceAccountShortName['value'];
    }

    /**
     * Sets Invoice Account Short Name.
     * Invoice Account short Name
     *
     * @maps InvoiceAccountShortName
     */
    public function setInvoiceAccountShortName(?string $invoiceAccountShortName): void
    {
        $this->invoiceAccountShortName['value'] = $invoiceAccountShortName;
    }

    /**
     * Unsets Invoice Account Short Name.
     * Invoice Account short Name
     */
    public function unsetInvoiceAccountShortName(): void
    {
        $this->invoiceAccountShortName = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Short Name.
     * Payer short Name
     */
    public function getPayerShortName(): ?string
    {
        if (count($this->payerShortName) == 0) {
            return null;
        }
        return $this->payerShortName['value'];
    }

    /**
     * Sets Payer Short Name.
     * Payer short Name
     *
     * @maps PayerShortName
     */
    public function setPayerShortName(?string $payerShortName): void
    {
        $this->payerShortName['value'] = $payerShortName;
    }

    /**
     * Unsets Payer Short Name.
     * Payer short Name
     */
    public function unsetPayerShortName(): void
    {
        $this->payerShortName = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card Id
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card Id
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns P AN.
     * Card PAN
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * Card PAN
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * Card PAN
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Card Group Id.
     * Card Group Id
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card Group Id
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card Group Id
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Card Group Name
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card Group Name
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card Group Name
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Fee Type Id.
     * Fee type identifier.
     */
    public function getFeeTypeId(): ?int
    {
        if (count($this->feeTypeId) == 0) {
            return null;
        }
        return $this->feeTypeId['value'];
    }

    /**
     * Sets Fee Type Id.
     * Fee type identifier.
     *
     * @maps FeeTypeId
     */
    public function setFeeTypeId(?int $feeTypeId): void
    {
        $this->feeTypeId['value'] = $feeTypeId;
    }

    /**
     * Unsets Fee Type Id.
     * Fee type identifier.
     */
    public function unsetFeeTypeId(): void
    {
        $this->feeTypeId = [];
    }

    /**
     * Returns Fee Type.
     * Fee type description
     */
    public function getFeeType(): ?string
    {
        if (count($this->feeType) == 0) {
            return null;
        }
        return $this->feeType['value'];
    }

    /**
     * Sets Fee Type.
     * Fee type description
     *
     * @maps FeeType
     */
    public function setFeeType(?string $feeType): void
    {
        $this->feeType['value'] = $feeType;
    }

    /**
     * Unsets Fee Type.
     * Fee type description
     */
    public function unsetFeeType(): void
    {
        $this->feeType = [];
    }

    /**
     * Returns Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     *
     * Example:
     *
     * Account
     *
     * Card
     *
     * Others
     */
    public function getFeeTypeGroup(): ?string
    {
        if (count($this->feeTypeGroup) == 0) {
            return null;
        }
        return $this->feeTypeGroup['value'];
    }

    /**
     * Sets Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     *
     * Example:
     *
     * Account
     *
     * Card
     *
     * Others
     *
     * @maps FeeTypeGroup
     */
    public function setFeeTypeGroup(?string $feeTypeGroup): void
    {
        $this->feeTypeGroup['value'] = $feeTypeGroup;
    }

    /**
     * Unsets Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     *
     * Example:
     *
     * Account
     *
     * Card
     *
     * Others
     */
    public function unsetFeeTypeGroup(): void
    {
        $this->feeTypeGroup = [];
    }

    /**
     * Returns Fee Rule Id.
     * Fee rule identifier
     */
    public function getFeeRuleId(): ?int
    {
        if (count($this->feeRuleId) == 0) {
            return null;
        }
        return $this->feeRuleId['value'];
    }

    /**
     * Sets Fee Rule Id.
     * Fee rule identifier
     *
     * @maps FeeRuleId
     */
    public function setFeeRuleId(?int $feeRuleId): void
    {
        $this->feeRuleId['value'] = $feeRuleId;
    }

    /**
     * Unsets Fee Rule Id.
     * Fee rule identifier
     */
    public function unsetFeeRuleId(): void
    {
        $this->feeRuleId = [];
    }

    /**
     * Returns Fee Rule Description.
     * Fee rule description
     */
    public function getFeeRuleDescription(): ?string
    {
        if (count($this->feeRuleDescription) == 0) {
            return null;
        }
        return $this->feeRuleDescription['value'];
    }

    /**
     * Sets Fee Rule Description.
     * Fee rule description
     *
     * @maps FeeRuleDescription
     */
    public function setFeeRuleDescription(?string $feeRuleDescription): void
    {
        $this->feeRuleDescription['value'] = $feeRuleDescription;
    }

    /**
     * Unsets Fee Rule Description.
     * Fee rule description
     */
    public function unsetFeeRuleDescription(): void
    {
        $this->feeRuleDescription = [];
    }

    /**
     * Returns Fee Rule Tiers.
     *
     * @return FeesFeeRuleTiers[]|null
     */
    public function getFeeRuleTiers(): ?array
    {
        return $this->feeRuleTiers;
    }

    /**
     * Sets Fee Rule Tiers.
     *
     * @maps FeeRuleTiers
     *
     * @param FeesFeeRuleTiers[]|null $feeRuleTiers
     */
    public function setFeeRuleTiers(?array $feeRuleTiers): void
    {
        $this->feeRuleTiers = $feeRuleTiers;
    }

    /**
     * Returns Fee Item Date.
     * Local Fee Item Date of when the transaction took place
     * Format: yyyyMMdd
     */
    public function getFeeItemDate(): ?string
    {
        if (count($this->feeItemDate) == 0) {
            return null;
        }
        return $this->feeItemDate['value'];
    }

    /**
     * Sets Fee Item Date.
     * Local Fee Item Date of when the transaction took place
     * Format: yyyyMMdd
     *
     * @maps FeeItemDate
     */
    public function setFeeItemDate(?string $feeItemDate): void
    {
        $this->feeItemDate['value'] = $feeItemDate;
    }

    /**
     * Unsets Fee Item Date.
     * Local Fee Item Date of when the transaction took place
     * Format: yyyyMMdd
     */
    public function unsetFeeItemDate(): void
    {
        $this->feeItemDate = [];
    }

    /**
     * Returns Fee Item Time.
     * Local Fee Item Time of where the transaction took place
     * Format: HH:mm:ss (24 hours format)
     */
    public function getFeeItemTime(): ?string
    {
        if (count($this->feeItemTime) == 0) {
            return null;
        }
        return $this->feeItemTime['value'];
    }

    /**
     * Sets Fee Item Time.
     * Local Fee Item Time of where the transaction took place
     * Format: HH:mm:ss (24 hours format)
     *
     * @maps FeeItemTime
     */
    public function setFeeItemTime(?string $feeItemTime): void
    {
        $this->feeItemTime['value'] = $feeItemTime;
    }

    /**
     * Unsets Fee Item Time.
     * Local Fee Item Time of where the transaction took place
     * Format: HH:mm:ss (24 hours format)
     */
    public function unsetFeeItemTime(): void
    {
        $this->feeItemTime = [];
    }

    /**
     * Returns Is Manual.
     * True/False.
     * Is manual
     */
    public function getIsManual(): ?bool
    {
        if (count($this->isManual) == 0) {
            return null;
        }
        return $this->isManual['value'];
    }

    /**
     * Sets Is Manual.
     * True/False.
     * Is manual
     *
     * @maps IsManual
     */
    public function setIsManual(?bool $isManual): void
    {
        $this->isManual['value'] = $isManual;
    }

    /**
     * Unsets Is Manual.
     * True/False.
     * Is manual
     */
    public function unsetIsManual(): void
    {
        $this->isManual = [];
    }

    /**
     * Returns Is Cancelled.
     * True/False.
     * Is cancelled
     */
    public function getIsCancelled(): ?bool
    {
        if (count($this->isCancelled) == 0) {
            return null;
        }
        return $this->isCancelled['value'];
    }

    /**
     * Sets Is Cancelled.
     * True/False.
     * Is cancelled
     *
     * @maps IsCancelled
     */
    public function setIsCancelled(?bool $isCancelled): void
    {
        $this->isCancelled['value'] = $isCancelled;
    }

    /**
     * Unsets Is Cancelled.
     * True/False.
     * Is cancelled
     */
    public function unsetIsCancelled(): void
    {
        $this->isCancelled = [];
    }

    /**
     * Returns Customer Currency Code.
     * ISO currency code
     *
     * Example: GBP
     */
    public function getCustomerCurrencyCode(): ?string
    {
        if (count($this->customerCurrencyCode) == 0) {
            return null;
        }
        return $this->customerCurrencyCode['value'];
    }

    /**
     * Sets Customer Currency Code.
     * ISO currency code
     *
     * Example: GBP
     *
     * @maps CustomerCurrencyCode
     */
    public function setCustomerCurrencyCode(?string $customerCurrencyCode): void
    {
        $this->customerCurrencyCode['value'] = $customerCurrencyCode;
    }

    /**
     * Unsets Customer Currency Code.
     * ISO currency code
     *
     * Example: GBP
     */
    public function unsetCustomerCurrencyCode(): void
    {
        $this->customerCurrencyCode = [];
    }

    /**
     * Returns Customer Currency Symbol.
     * Currency symbol of the Currency Code
     *
     * Example: £, $
     */
    public function getCustomerCurrencySymbol(): ?string
    {
        if (count($this->customerCurrencySymbol) == 0) {
            return null;
        }
        return $this->customerCurrencySymbol['value'];
    }

    /**
     * Sets Customer Currency Symbol.
     * Currency symbol of the Currency Code
     *
     * Example: £, $
     *
     * @maps CustomerCurrencySymbol
     */
    public function setCustomerCurrencySymbol(?string $customerCurrencySymbol): void
    {
        $this->customerCurrencySymbol['value'] = $customerCurrencySymbol;
    }

    /**
     * Unsets Customer Currency Symbol.
     * Currency symbol of the Currency Code
     *
     * Example: £, $
     */
    public function unsetCustomerCurrencySymbol(): void
    {
        $this->customerCurrencySymbol = [];
    }

    /**
     * Returns Product Id.
     * Product Id
     * Example: Sample list of product ids and description.
     * 100 Service fee
     * 102 Invoice production fee
     * 103 Account fee
     * 104 Transaction fee
     * 105 Card membership fee
     */
    public function getProductId(): ?int
    {
        if (count($this->productId) == 0) {
            return null;
        }
        return $this->productId['value'];
    }

    /**
     * Sets Product Id.
     * Product Id
     * Example: Sample list of product ids and description.
     * 100 Service fee
     * 102 Invoice production fee
     * 103 Account fee
     * 104 Transaction fee
     * 105 Card membership fee
     *
     * @maps ProductId
     */
    public function setProductId(?int $productId): void
    {
        $this->productId['value'] = $productId;
    }

    /**
     * Unsets Product Id.
     * Product Id
     * Example: Sample list of product ids and description.
     * 100 Service fee
     * 102 Invoice production fee
     * 103 Account fee
     * 104 Transaction fee
     * 105 Card membership fee
     */
    public function unsetProductId(): void
    {
        $this->productId = [];
    }

    /**
     * Returns Product Code.
     * Product Code – Global as per GFN configuration
     *
     * Example:
     *
     * 2 Service fee
     *
     * 4 Invoice production fee
     *
     * 5 Account fee
     *
     * 6 Transaction fee
     *
     * 7 Card membership fee
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code – Global as per GFN configuration
     *
     * Example:
     *
     * 2 Service fee
     *
     * 4 Invoice production fee
     *
     * 5 Account fee
     *
     * 6 Transaction fee
     *
     * 7 Card membership fee
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code – Global as per GFN configuration
     *
     * Example:
     *
     * 2 Service fee
     *
     * 4 Invoice production fee
     *
     * 5 Account fee
     *
     * 6 Transaction fee
     *
     * 7 Card membership fee
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * Product Name
     * Example: Sample list of product ids and description.
     * Service fee
     * Invoice production fee
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * Product Name
     * Example: Sample list of product ids and description.
     * Service fee
     * Invoice production fee
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * Product Name
     * Example: Sample list of product ids and description.
     * Service fee
     * Invoice production fee
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Product Group Id.
     * Product Group Id
     * Example: Sample list
     * 22    Card related fees
     * 23    Monetary Adjustment
     */
    public function getProductGroupId(): ?int
    {
        if (count($this->productGroupId) == 0) {
            return null;
        }
        return $this->productGroupId['value'];
    }

    /**
     * Sets Product Group Id.
     * Product Group Id
     * Example: Sample list
     * 22    Card related fees
     * 23    Monetary Adjustment
     *
     * @maps ProductGroupId
     */
    public function setProductGroupId(?int $productGroupId): void
    {
        $this->productGroupId['value'] = $productGroupId;
    }

    /**
     * Unsets Product Group Id.
     * Product Group Id
     * Example: Sample list
     * 22    Card related fees
     * 23    Monetary Adjustment
     */
    public function unsetProductGroupId(): void
    {
        $this->productGroupId = [];
    }

    /**
     * Returns Product Group Name.
     * Product Group Name
     * Example: Sample list
     * 22    Card related fees
     * 23    Monetary Adjustment
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Product Group Name
     * Example: Sample list
     * 22    Card related fees
     * 23    Monetary Adjustment
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Product Group Name
     * Example: Sample list
     * 22    Card related fees
     * 23    Monetary Adjustment
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Line Item Description.
     * Line Item Description generally the quantity as printed on Invoice or the manually keyed in
     * description for manual fees
     */
    public function getLineItemDescription(): ?string
    {
        if (count($this->lineItemDescription) == 0) {
            return null;
        }
        return $this->lineItemDescription['value'];
    }

    /**
     * Sets Line Item Description.
     * Line Item Description generally the quantity as printed on Invoice or the manually keyed in
     * description for manual fees
     *
     * @maps LineItemDescription
     */
    public function setLineItemDescription(?string $lineItemDescription): void
    {
        $this->lineItemDescription['value'] = $lineItemDescription;
    }

    /**
     * Unsets Line Item Description.
     * Line Item Description generally the quantity as printed on Invoice or the manually keyed in
     * description for manual fees
     */
    public function unsetLineItemDescription(): void
    {
        $this->lineItemDescription = [];
    }

    /**
     * Returns Quantity.
     * Quantity
     */
    public function getQuantity(): ?int
    {
        if (count($this->quantity) == 0) {
            return null;
        }
        return $this->quantity['value'];
    }

    /**
     * Sets Quantity.
     * Quantity
     *
     * @maps Quantity
     */
    public function setQuantity(?int $quantity): void
    {
        $this->quantity['value'] = $quantity;
    }

    /**
     * Unsets Quantity.
     * Quantity
     */
    public function unsetQuantity(): void
    {
        $this->quantity = [];
    }

    /**
     * Returns Is Invoiced.
     * True/False.
     * Is fee item invoiced
     */
    public function getIsInvoiced(): ?bool
    {
        if (count($this->isInvoiced) == 0) {
            return null;
        }
        return $this->isInvoiced['value'];
    }

    /**
     * Sets Is Invoiced.
     * True/False.
     * Is fee item invoiced
     *
     * @maps IsInvoiced
     */
    public function setIsInvoiced(?bool $isInvoiced): void
    {
        $this->isInvoiced['value'] = $isInvoiced;
    }

    /**
     * Unsets Is Invoiced.
     * True/False.
     * Is fee item invoiced
     */
    public function unsetIsInvoiced(): void
    {
        $this->isInvoiced = [];
    }

    /**
     * Returns V at Country Code.
     * VAT country ISO code
     */
    public function getVATCountryCode(): ?string
    {
        if (count($this->vATCountryCode) == 0) {
            return null;
        }
        return $this->vATCountryCode['value'];
    }

    /**
     * Sets V at Country Code.
     * VAT country ISO code
     *
     * @maps VATCountryCode
     */
    public function setVATCountryCode(?string $vATCountryCode): void
    {
        $this->vATCountryCode['value'] = $vATCountryCode;
    }

    /**
     * Unsets V at Country Code.
     * VAT country ISO code
     */
    public function unsetVATCountryCode(): void
    {
        $this->vATCountryCode = [];
    }

    /**
     * Returns V at Country Name.
     * VAT country name
     */
    public function getVATCountryName(): ?string
    {
        if (count($this->vATCountryName) == 0) {
            return null;
        }
        return $this->vATCountryName['value'];
    }

    /**
     * Sets V at Country Name.
     * VAT country name
     *
     * @maps VATCountryName
     */
    public function setVATCountryName(?string $vATCountryName): void
    {
        $this->vATCountryName['value'] = $vATCountryName;
    }

    /**
     * Unsets V at Country Name.
     * VAT country name
     */
    public function unsetVATCountryName(): void
    {
        $this->vATCountryName = [];
    }

    /**
     * Returns V at Percentage.
     * VAT percentage
     */
    public function getVATPercentage(): ?float
    {
        if (count($this->vATPercentage) == 0) {
            return null;
        }
        return $this->vATPercentage['value'];
    }

    /**
     * Sets V at Percentage.
     * VAT percentage
     *
     * @maps VATPercentage
     */
    public function setVATPercentage(?float $vATPercentage): void
    {
        $this->vATPercentage['value'] = $vATPercentage;
    }

    /**
     * Unsets V at Percentage.
     * VAT percentage
     */
    public function unsetVATPercentage(): void
    {
        $this->vATPercentage = [];
    }

    /**
     * Returns V at Category ID.
     * VAT Category identifier
     */
    public function getVATCategoryID(): ?int
    {
        if (count($this->vATCategoryID) == 0) {
            return null;
        }
        return $this->vATCategoryID['value'];
    }

    /**
     * Sets V at Category ID.
     * VAT Category identifier
     *
     * @maps VATCategoryID
     */
    public function setVATCategoryID(?int $vATCategoryID): void
    {
        $this->vATCategoryID['value'] = $vATCategoryID;
    }

    /**
     * Unsets V at Category ID.
     * VAT Category identifier
     */
    public function unsetVATCategoryID(): void
    {
        $this->vATCategoryID = [];
    }

    /**
     * Returns V at Category Description.
     * VAT Category description
     */
    public function getVATCategoryDescription(): ?string
    {
        if (count($this->vATCategoryDescription) == 0) {
            return null;
        }
        return $this->vATCategoryDescription['value'];
    }

    /**
     * Sets V at Category Description.
     * VAT Category description
     *
     * @maps VATCategoryDescription
     */
    public function setVATCategoryDescription(?string $vATCategoryDescription): void
    {
        $this->vATCategoryDescription['value'] = $vATCategoryDescription;
    }

    /**
     * Unsets V at Category Description.
     * VAT Category description
     */
    public function unsetVATCategoryDescription(): void
    {
        $this->vATCategoryDescription = [];
    }

    /**
     * Returns Legislative Region Id.
     * Legislative region id
     */
    public function getLegislativeRegionId(): ?int
    {
        if (count($this->legislativeRegionId) == 0) {
            return null;
        }
        return $this->legislativeRegionId['value'];
    }

    /**
     * Sets Legislative Region Id.
     * Legislative region id
     *
     * @maps LegislativeRegionId
     */
    public function setLegislativeRegionId(?int $legislativeRegionId): void
    {
        $this->legislativeRegionId['value'] = $legislativeRegionId;
    }

    /**
     * Unsets Legislative Region Id.
     * Legislative region id
     */
    public function unsetLegislativeRegionId(): void
    {
        $this->legislativeRegionId = [];
    }

    /**
     * Returns Legislative Region Name.
     * Legislative region name
     */
    public function getLegislativeRegionName(): ?string
    {
        if (count($this->legislativeRegionName) == 0) {
            return null;
        }
        return $this->legislativeRegionName['value'];
    }

    /**
     * Sets Legislative Region Name.
     * Legislative region name
     *
     * @maps LegislativeRegionName
     */
    public function setLegislativeRegionName(?string $legislativeRegionName): void
    {
        $this->legislativeRegionName['value'] = $legislativeRegionName;
    }

    /**
     * Unsets Legislative Region Name.
     * Legislative region name
     */
    public function unsetLegislativeRegionName(): void
    {
        $this->legislativeRegionName = [];
    }

    /**
     * Returns System Entry Date.
     * System entry date
     */
    public function getSystemEntryDate(): ?string
    {
        if (count($this->systemEntryDate) == 0) {
            return null;
        }
        return $this->systemEntryDate['value'];
    }

    /**
     * Sets System Entry Date.
     * System entry date
     *
     * @maps SystemEntryDate
     */
    public function setSystemEntryDate(?string $systemEntryDate): void
    {
        $this->systemEntryDate['value'] = $systemEntryDate;
    }

    /**
     * Unsets System Entry Date.
     * System entry date
     */
    public function unsetSystemEntryDate(): void
    {
        $this->systemEntryDate = [];
    }

    /**
     * Returns System Entry Time.
     * System entry time
     */
    public function getSystemEntryTime(): ?string
    {
        if (count($this->systemEntryTime) == 0) {
            return null;
        }
        return $this->systemEntryTime['value'];
    }

    /**
     * Sets System Entry Time.
     * System entry time
     *
     * @maps SystemEntryTime
     */
    public function setSystemEntryTime(?string $systemEntryTime): void
    {
        $this->systemEntryTime['value'] = $systemEntryTime;
    }

    /**
     * Unsets System Entry Time.
     * System entry time
     */
    public function unsetSystemEntryTime(): void
    {
        $this->systemEntryTime = [];
    }

    /**
     * Returns Col Co Net Amount.
     * ColCo net amount
     */
    public function getColCoNetAmount(): ?float
    {
        if (count($this->colCoNetAmount) == 0) {
            return null;
        }
        return $this->colCoNetAmount['value'];
    }

    /**
     * Sets Col Co Net Amount.
     * ColCo net amount
     *
     * @maps ColCoNetAmount
     */
    public function setColCoNetAmount(?float $colCoNetAmount): void
    {
        $this->colCoNetAmount['value'] = $colCoNetAmount;
    }

    /**
     * Unsets Col Co Net Amount.
     * ColCo net amount
     */
    public function unsetColCoNetAmount(): void
    {
        $this->colCoNetAmount = [];
    }

    /**
     * Returns Col Co VAT Amount.
     * ColCoVAT amount
     */
    public function getColCoVATAmount(): ?float
    {
        if (count($this->colCoVATAmount) == 0) {
            return null;
        }
        return $this->colCoVATAmount['value'];
    }

    /**
     * Sets Col Co VAT Amount.
     * ColCoVAT amount
     *
     * @maps ColCoVATAmount
     */
    public function setColCoVATAmount(?float $colCoVATAmount): void
    {
        $this->colCoVATAmount['value'] = $colCoVATAmount;
    }

    /**
     * Unsets Col Co VAT Amount.
     * ColCoVAT amount
     */
    public function unsetColCoVATAmount(): void
    {
        $this->colCoVATAmount = [];
    }

    /**
     * Returns Col Co Gross Amount.
     * ColCo gross amount
     */
    public function getColCoGrossAmount(): ?float
    {
        if (count($this->colCoGrossAmount) == 0) {
            return null;
        }
        return $this->colCoGrossAmount['value'];
    }

    /**
     * Sets Col Co Gross Amount.
     * ColCo gross amount
     *
     * @maps ColCoGrossAmount
     */
    public function setColCoGrossAmount(?float $colCoGrossAmount): void
    {
        $this->colCoGrossAmount['value'] = $colCoGrossAmount;
    }

    /**
     * Unsets Col Co Gross Amount.
     * ColCo gross amount
     */
    public function unsetColCoGrossAmount(): void
    {
        $this->colCoGrossAmount = [];
    }

    /**
     * Returns Interim Invoice Id.
     * Interim invoice id
     */
    public function getInterimInvoiceId(): ?int
    {
        if (count($this->interimInvoiceId) == 0) {
            return null;
        }
        return $this->interimInvoiceId['value'];
    }

    /**
     * Sets Interim Invoice Id.
     * Interim invoice id
     *
     * @maps InterimInvoiceId
     */
    public function setInterimInvoiceId(?int $interimInvoiceId): void
    {
        $this->interimInvoiceId['value'] = $interimInvoiceId;
    }

    /**
     * Unsets Interim Invoice Id.
     * Interim invoice id
     */
    public function unsetInterimInvoiceId(): void
    {
        $this->interimInvoiceId = [];
    }

    /**
     * Returns Interim Invoice Number.
     * Interim invoice number
     */
    public function getInterimInvoiceNumber(): ?string
    {
        if (count($this->interimInvoiceNumber) == 0) {
            return null;
        }
        return $this->interimInvoiceNumber['value'];
    }

    /**
     * Sets Interim Invoice Number.
     * Interim invoice number
     *
     * @maps InterimInvoiceNumber
     */
    public function setInterimInvoiceNumber(?string $interimInvoiceNumber): void
    {
        $this->interimInvoiceNumber['value'] = $interimInvoiceNumber;
    }

    /**
     * Unsets Interim Invoice Number.
     * Interim invoice number
     */
    public function unsetInterimInvoiceNumber(): void
    {
        $this->interimInvoiceNumber = [];
    }

    /**
     * Returns Invoice Id.
     * Invoice id
     */
    public function getInvoiceId(): ?int
    {
        if (count($this->invoiceId) == 0) {
            return null;
        }
        return $this->invoiceId['value'];
    }

    /**
     * Sets Invoice Id.
     * Invoice id
     *
     * @maps InvoiceId
     */
    public function setInvoiceId(?int $invoiceId): void
    {
        $this->invoiceId['value'] = $invoiceId;
    }

    /**
     * Unsets Invoice Id.
     * Invoice id
     */
    public function unsetInvoiceId(): void
    {
        $this->invoiceId = [];
    }

    /**
     * Returns Invoice Number.
     * Invoice number
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice number
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice number
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Invoice Date.
     * Invoice date
     *
     * Format: yyyyMMdd
     */
    public function getInvoiceDate(): ?string
    {
        if (count($this->invoiceDate) == 0) {
            return null;
        }
        return $this->invoiceDate['value'];
    }

    /**
     * Sets Invoice Date.
     * Invoice date
     *
     * Format: yyyyMMdd
     *
     * @maps InvoiceDate
     */
    public function setInvoiceDate(?string $invoiceDate): void
    {
        $this->invoiceDate['value'] = $invoiceDate;
    }

    /**
     * Unsets Invoice Date.
     * Invoice date
     *
     * Format: yyyyMMdd
     */
    public function unsetInvoiceDate(): void
    {
        $this->invoiceDate = [];
    }

    /**
     * Returns Customer Exchange Rate.
     * Customer exchange rate
     */
    public function getCustomerExchangeRate(): ?float
    {
        if (count($this->customerExchangeRate) == 0) {
            return null;
        }
        return $this->customerExchangeRate['value'];
    }

    /**
     * Sets Customer Exchange Rate.
     * Customer exchange rate
     *
     * @maps CustomerExchangeRate
     */
    public function setCustomerExchangeRate(?float $customerExchangeRate): void
    {
        $this->customerExchangeRate['value'] = $customerExchangeRate;
    }

    /**
     * Unsets Customer Exchange Rate.
     * Customer exchange rate
     */
    public function unsetCustomerExchangeRate(): void
    {
        $this->customerExchangeRate = [];
    }

    /**
     * Returns Invoice Net Amount.
     * Invoice net amount
     */
    public function getInvoiceNetAmount(): ?float
    {
        if (count($this->invoiceNetAmount) == 0) {
            return null;
        }
        return $this->invoiceNetAmount['value'];
    }

    /**
     * Sets Invoice Net Amount.
     * Invoice net amount
     *
     * @maps InvoiceNetAmount
     */
    public function setInvoiceNetAmount(?float $invoiceNetAmount): void
    {
        $this->invoiceNetAmount['value'] = $invoiceNetAmount;
    }

    /**
     * Unsets Invoice Net Amount.
     * Invoice net amount
     */
    public function unsetInvoiceNetAmount(): void
    {
        $this->invoiceNetAmount = [];
    }

    /**
     * Returns Invoice Gross Amount.
     * Invoice gross amount
     */
    public function getInvoiceGrossAmount(): ?float
    {
        if (count($this->invoiceGrossAmount) == 0) {
            return null;
        }
        return $this->invoiceGrossAmount['value'];
    }

    /**
     * Sets Invoice Gross Amount.
     * Invoice gross amount
     *
     * @maps InvoiceGrossAmount
     */
    public function setInvoiceGrossAmount(?float $invoiceGrossAmount): void
    {
        $this->invoiceGrossAmount['value'] = $invoiceGrossAmount;
    }

    /**
     * Unsets Invoice Gross Amount.
     * Invoice gross amount
     */
    public function unsetInvoiceGrossAmount(): void
    {
        $this->invoiceGrossAmount = [];
    }

    /**
     * Returns Invoice VAT Amount.
     * Invoice VAT amount
     */
    public function getInvoiceVATAmount(): ?float
    {
        if (count($this->invoiceVATAmount) == 0) {
            return null;
        }
        return $this->invoiceVATAmount['value'];
    }

    /**
     * Sets Invoice VAT Amount.
     * Invoice VAT amount
     *
     * @maps InvoiceVATAmount
     */
    public function setInvoiceVATAmount(?float $invoiceVATAmount): void
    {
        $this->invoiceVATAmount['value'] = $invoiceVATAmount;
    }

    /**
     * Unsets Invoice VAT Amount.
     * Invoice VAT amount
     */
    public function unsetInvoiceVATAmount(): void
    {
        $this->invoiceVATAmount = [];
    }

    /**
     * Returns Reverse Charge.
     * True/False.
     * Reverse charge.
     */
    public function getReverseCharge(): ?bool
    {
        if (count($this->reverseCharge) == 0) {
            return null;
        }
        return $this->reverseCharge['value'];
    }

    /**
     * Sets Reverse Charge.
     * True/False.
     * Reverse charge.
     *
     * @maps ReverseCharge
     */
    public function setReverseCharge(?bool $reverseCharge): void
    {
        $this->reverseCharge['value'] = $reverseCharge;
    }

    /**
     * Unsets Reverse Charge.
     * True/False.
     * Reverse charge.
     */
    public function unsetReverseCharge(): void
    {
        $this->reverseCharge = [];
    }

    /**
     * Returns Original Fee Item Id.
     * Original Fee Item id.
     */
    public function getOriginalFeeItemId(): ?int
    {
        if (count($this->originalFeeItemId) == 0) {
            return null;
        }
        return $this->originalFeeItemId['value'];
    }

    /**
     * Sets Original Fee Item Id.
     * Original Fee Item id.
     *
     * @maps OriginalFeeItemId
     */
    public function setOriginalFeeItemId(?int $originalFeeItemId): void
    {
        $this->originalFeeItemId['value'] = $originalFeeItemId;
    }

    /**
     * Unsets Original Fee Item Id.
     * Original Fee Item id.
     */
    public function unsetOriginalFeeItemId(): void
    {
        $this->originalFeeItemId = [];
    }

    /**
     * Returns Original Currency Code.
     * Original FeeItem Currency ISO code.
     */
    public function getOriginalCurrencyCode(): ?string
    {
        if (count($this->originalCurrencyCode) == 0) {
            return null;
        }
        return $this->originalCurrencyCode['value'];
    }

    /**
     * Sets Original Currency Code.
     * Original FeeItem Currency ISO code.
     *
     * @maps OriginalCurrencyCode
     */
    public function setOriginalCurrencyCode(?string $originalCurrencyCode): void
    {
        $this->originalCurrencyCode['value'] = $originalCurrencyCode;
    }

    /**
     * Unsets Original Currency Code.
     * Original FeeItem Currency ISO code.
     */
    public function unsetOriginalCurrencyCode(): void
    {
        $this->originalCurrencyCode = [];
    }

    /**
     * Returns Original Currency Symbol.
     * Original FeeItem currency symbol
     */
    public function getOriginalCurrencySymbol(): ?string
    {
        if (count($this->originalCurrencySymbol) == 0) {
            return null;
        }
        return $this->originalCurrencySymbol['value'];
    }

    /**
     * Sets Original Currency Symbol.
     * Original FeeItem currency symbol
     *
     * @maps OriginalCurrencySymbol
     */
    public function setOriginalCurrencySymbol(?string $originalCurrencySymbol): void
    {
        $this->originalCurrencySymbol['value'] = $originalCurrencySymbol;
    }

    /**
     * Unsets Original Currency Symbol.
     * Original FeeItem currency symbol
     */
    public function unsetOriginalCurrencySymbol(): void
    {
        $this->originalCurrencySymbol = [];
    }

    /**
     * Returns Original Unit Price.
     * Original FeeItem unit price
     */
    public function getOriginalUnitPrice(): ?float
    {
        if (count($this->originalUnitPrice) == 0) {
            return null;
        }
        return $this->originalUnitPrice['value'];
    }

    /**
     * Sets Original Unit Price.
     * Original FeeItem unit price
     *
     * @maps OriginalUnitPrice
     */
    public function setOriginalUnitPrice(?float $originalUnitPrice): void
    {
        $this->originalUnitPrice['value'] = $originalUnitPrice;
    }

    /**
     * Unsets Original Unit Price.
     * Original FeeItem unit price
     */
    public function unsetOriginalUnitPrice(): void
    {
        $this->originalUnitPrice = [];
    }

    /**
     * Returns Original Net Amount.
     * Original FeeItem net amount
     */
    public function getOriginalNetAmount(): ?float
    {
        if (count($this->originalNetAmount) == 0) {
            return null;
        }
        return $this->originalNetAmount['value'];
    }

    /**
     * Sets Original Net Amount.
     * Original FeeItem net amount
     *
     * @maps OriginalNetAmount
     */
    public function setOriginalNetAmount(?float $originalNetAmount): void
    {
        $this->originalNetAmount['value'] = $originalNetAmount;
    }

    /**
     * Unsets Original Net Amount.
     * Original FeeItem net amount
     */
    public function unsetOriginalNetAmount(): void
    {
        $this->originalNetAmount = [];
    }

    /**
     * Returns Original VAT Amount.
     * Original FeeItem VAT amount
     */
    public function getOriginalVATAmount(): ?float
    {
        if (count($this->originalVATAmount) == 0) {
            return null;
        }
        return $this->originalVATAmount['value'];
    }

    /**
     * Sets Original VAT Amount.
     * Original FeeItem VAT amount
     *
     * @maps OriginalVATAmount
     */
    public function setOriginalVATAmount(?float $originalVATAmount): void
    {
        $this->originalVATAmount['value'] = $originalVATAmount;
    }

    /**
     * Unsets Original VAT Amount.
     * Original FeeItem VAT amount
     */
    public function unsetOriginalVATAmount(): void
    {
        $this->originalVATAmount = [];
    }

    /**
     * Returns Original Gross Amount.
     * Original FeeItem gross amount
     */
    public function getOriginalGrossAmount(): ?float
    {
        if (count($this->originalGrossAmount) == 0) {
            return null;
        }
        return $this->originalGrossAmount['value'];
    }

    /**
     * Sets Original Gross Amount.
     * Original FeeItem gross amount
     *
     * @maps OriginalGrossAmount
     */
    public function setOriginalGrossAmount(?float $originalGrossAmount): void
    {
        $this->originalGrossAmount['value'] = $originalGrossAmount;
    }

    /**
     * Unsets Original Gross Amount.
     * Original FeeItem gross amount
     */
    public function unsetOriginalGrossAmount(): void
    {
        $this->originalGrossAmount = [];
    }

    /**
     * Returns Original Exchange Rate.
     * Original FeeItem exchange rate
     */
    public function getOriginalExchangeRate(): ?float
    {
        if (count($this->originalExchangeRate) == 0) {
            return null;
        }
        return $this->originalExchangeRate['value'];
    }

    /**
     * Sets Original Exchange Rate.
     * Original FeeItem exchange rate
     *
     * @maps OriginalExchangeRate
     */
    public function setOriginalExchangeRate(?float $originalExchangeRate): void
    {
        $this->originalExchangeRate['value'] = $originalExchangeRate;
    }

    /**
     * Unsets Original Exchange Rate.
     * Original FeeItem exchange rate
     */
    public function unsetOriginalExchangeRate(): void
    {
        $this->originalExchangeRate = [];
    }

    /**
     * Returns Original Legislative Region Id.
     * Original legislative region id
     */
    public function getOriginalLegislativeRegionId(): ?int
    {
        if (count($this->originalLegislativeRegionId) == 0) {
            return null;
        }
        return $this->originalLegislativeRegionId['value'];
    }

    /**
     * Sets Original Legislative Region Id.
     * Original legislative region id
     *
     * @maps OriginalLegislativeRegionId
     */
    public function setOriginalLegislativeRegionId(?int $originalLegislativeRegionId): void
    {
        $this->originalLegislativeRegionId['value'] = $originalLegislativeRegionId;
    }

    /**
     * Unsets Original Legislative Region Id.
     * Original legislative region id
     */
    public function unsetOriginalLegislativeRegionId(): void
    {
        $this->originalLegislativeRegionId = [];
    }

    /**
     * Returns Original Legislative Region Name.
     * Original legislative region name
     */
    public function getOriginalLegislativeRegionName(): ?string
    {
        if (count($this->originalLegislativeRegionName) == 0) {
            return null;
        }
        return $this->originalLegislativeRegionName['value'];
    }

    /**
     * Sets Original Legislative Region Name.
     * Original legislative region name
     *
     * @maps OriginalLegislativeRegionName
     */
    public function setOriginalLegislativeRegionName(?string $originalLegislativeRegionName): void
    {
        $this->originalLegislativeRegionName['value'] = $originalLegislativeRegionName;
    }

    /**
     * Unsets Original Legislative Region Name.
     * Original legislative region name
     */
    public function unsetOriginalLegislativeRegionName(): void
    {
        $this->originalLegislativeRegionName = [];
    }

    /**
     * Returns Frequency.
     * Fee frequency derived from Fee rules if applicable
     *
     * Returns ID-Description in one field
     *
     * Example:
     *
     * 1- Daily (all days)
     *
     * 2-Daily (only working days)
     *
     * 3-Weekly – Monday
     *
     * 4-Weekly - Tuesday
     */
    public function getFrequency(): ?string
    {
        if (count($this->frequency) == 0) {
            return null;
        }
        return $this->frequency['value'];
    }

    /**
     * Sets Frequency.
     * Fee frequency derived from Fee rules if applicable
     *
     * Returns ID-Description in one field
     *
     * Example:
     *
     * 1- Daily (all days)
     *
     * 2-Daily (only working days)
     *
     * 3-Weekly – Monday
     *
     * 4-Weekly - Tuesday
     *
     * @maps Frequency
     */
    public function setFrequency(?string $frequency): void
    {
        $this->frequency['value'] = $frequency;
    }

    /**
     * Unsets Frequency.
     * Fee frequency derived from Fee rules if applicable
     *
     * Returns ID-Description in one field
     *
     * Example:
     *
     * 1- Daily (all days)
     *
     * 2-Daily (only working days)
     *
     * 3-Weekly – Monday
     *
     * 4-Weekly - Tuesday
     */
    public function unsetFrequency(): void
    {
        $this->frequency = [];
    }

    /**
     * Returns Fee Item Card Level Breakup.
     * Fee breakup at card level for Fee Items where applicable.
     */
    public function getFeeItemCardLevelBreakup(): ?string
    {
        if (count($this->feeItemCardLevelBreakup) == 0) {
            return null;
        }
        return $this->feeItemCardLevelBreakup['value'];
    }

    /**
     * Sets Fee Item Card Level Breakup.
     * Fee breakup at card level for Fee Items where applicable.
     *
     * @maps FeeItemCardLevelBreakup
     */
    public function setFeeItemCardLevelBreakup(?string $feeItemCardLevelBreakup): void
    {
        $this->feeItemCardLevelBreakup['value'] = $feeItemCardLevelBreakup;
    }

    /**
     * Unsets Fee Item Card Level Breakup.
     * Fee breakup at card level for Fee Items where applicable.
     */
    public function unsetFeeItemCardLevelBreakup(): void
    {
        $this->feeItemCardLevelBreakup = [];
    }

    /**
     * Returns Original Fee Item Invoice Id.
     * Invoice Id/ Billing Document Id of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     */
    public function getOriginalFeeItemInvoiceId(): ?int
    {
        if (count($this->originalFeeItemInvoiceId) == 0) {
            return null;
        }
        return $this->originalFeeItemInvoiceId['value'];
    }

    /**
     * Sets Original Fee Item Invoice Id.
     * Invoice Id/ Billing Document Id of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     *
     * @maps OriginalFeeItemInvoiceId
     */
    public function setOriginalFeeItemInvoiceId(?int $originalFeeItemInvoiceId): void
    {
        $this->originalFeeItemInvoiceId['value'] = $originalFeeItemInvoiceId;
    }

    /**
     * Unsets Original Fee Item Invoice Id.
     * Invoice Id/ Billing Document Id of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     */
    public function unsetOriginalFeeItemInvoiceId(): void
    {
        $this->originalFeeItemInvoiceId = [];
    }

    /**
     * Returns Original Fee Item Invoice Number.
     * Invoice Number of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     */
    public function getOriginalFeeItemInvoiceNumber(): ?string
    {
        if (count($this->originalFeeItemInvoiceNumber) == 0) {
            return null;
        }
        return $this->originalFeeItemInvoiceNumber['value'];
    }

    /**
     * Sets Original Fee Item Invoice Number.
     * Invoice Number of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     *
     * @maps OriginalFeeItemInvoiceNumber
     */
    public function setOriginalFeeItemInvoiceNumber(?string $originalFeeItemInvoiceNumber): void
    {
        $this->originalFeeItemInvoiceNumber['value'] = $originalFeeItemInvoiceNumber;
    }

    /**
     * Unsets Original Fee Item Invoice Number.
     * Invoice Number of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     */
    public function unsetOriginalFeeItemInvoiceNumber(): void
    {
        $this->originalFeeItemInvoiceNumber = [];
    }

    /**
     * Returns Original Fee Item Invoice Date.
     * Invoice Date of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     * Format: yyyyMMdd
     */
    public function getOriginalFeeItemInvoiceDate(): ?string
    {
        if (count($this->originalFeeItemInvoiceDate) == 0) {
            return null;
        }
        return $this->originalFeeItemInvoiceDate['value'];
    }

    /**
     * Sets Original Fee Item Invoice Date.
     * Invoice Date of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     * Format: yyyyMMdd
     *
     * @maps OriginalFeeItemInvoiceDate
     */
    public function setOriginalFeeItemInvoiceDate(?string $originalFeeItemInvoiceDate): void
    {
        $this->originalFeeItemInvoiceDate['value'] = $originalFeeItemInvoiceDate;
    }

    /**
     * Unsets Original Fee Item Invoice Date.
     * Invoice Date of the original fee item (when not null).
     * Applicable only for fee items that are refund to an original fee item that is already invoiced.
     * Format: yyyyMMdd
     */
    public function unsetOriginalFeeItemInvoiceDate(): void
    {
        $this->originalFeeItemInvoiceDate = [];
    }

    /**
     * Returns Driver Name.
     * Driver name embossed on the Card
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver name embossed on the Card
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver name embossed on the Card
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Emboss Text.
     * Text embossed on the Card
     */
    public function getEmbossText(): ?string
    {
        if (count($this->embossText) == 0) {
            return null;
        }
        return $this->embossText['value'];
    }

    /**
     * Sets Emboss Text.
     * Text embossed on the Card
     *
     * @maps EmbossText
     */
    public function setEmbossText(?string $embossText): void
    {
        $this->embossText['value'] = $embossText;
    }

    /**
     * Unsets Emboss Text.
     * Text embossed on the Card
     */
    public function unsetEmbossText(): void
    {
        $this->embossText = [];
    }

    /**
     * Returns V RN.
     * Reg. Number embossed on the Card
     */
    public function getVRN(): ?string
    {
        if (count($this->vRN) == 0) {
            return null;
        }
        return $this->vRN['value'];
    }

    /**
     * Sets V RN.
     * Reg. Number embossed on the Card
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN['value'] = $vRN;
    }

    /**
     * Unsets V RN.
     * Reg. Number embossed on the Card
     */
    public function unsetVRN(): void
    {
        $this->vRN = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->feeItemId)) {
            $json['FeeItemId']                     = $this->feeItemId['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                     = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                 = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']              = $this->accountShortName['value'];
        }
        if (!empty($this->invoiceAccountId)) {
            $json['InvoiceAccountId']              = $this->invoiceAccountId['value'];
        }
        if (!empty($this->invoiceAccountNumber)) {
            $json['InvoiceAccountNumber']          = $this->invoiceAccountNumber['value'];
        }
        if (!empty($this->invoiceAccountShortName)) {
            $json['InvoiceAccountShortName']       = $this->invoiceAccountShortName['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                       = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                   = $this->payerNumber['value'];
        }
        if (!empty($this->payerShortName)) {
            $json['PayerShortName']                = $this->payerShortName['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                        = $this->cardId['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']                           = $this->pAN['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']                   = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']                 = $this->cardGroupName['value'];
        }
        if (!empty($this->feeTypeId)) {
            $json['FeeTypeId']                     = $this->feeTypeId['value'];
        }
        if (!empty($this->feeType)) {
            $json['FeeType']                       = $this->feeType['value'];
        }
        if (!empty($this->feeTypeGroup)) {
            $json['FeeTypeGroup']                  = $this->feeTypeGroup['value'];
        }
        if (!empty($this->feeRuleId)) {
            $json['FeeRuleId']                     = $this->feeRuleId['value'];
        }
        if (!empty($this->feeRuleDescription)) {
            $json['FeeRuleDescription']            = $this->feeRuleDescription['value'];
        }
        if (isset($this->feeRuleTiers)) {
            $json['FeeRuleTiers']                  = $this->feeRuleTiers;
        }
        if (!empty($this->feeItemDate)) {
            $json['FeeItemDate']                   = $this->feeItemDate['value'];
        }
        if (!empty($this->feeItemTime)) {
            $json['FeeItemTime']                   = $this->feeItemTime['value'];
        }
        if (!empty($this->isManual)) {
            $json['IsManual']                      = $this->isManual['value'];
        }
        if (!empty($this->isCancelled)) {
            $json['IsCancelled']                   = $this->isCancelled['value'];
        }
        if (!empty($this->customerCurrencyCode)) {
            $json['CustomerCurrencyCode']          = $this->customerCurrencyCode['value'];
        }
        if (!empty($this->customerCurrencySymbol)) {
            $json['CustomerCurrencySymbol']        = $this->customerCurrencySymbol['value'];
        }
        if (!empty($this->productId)) {
            $json['ProductId']                     = $this->productId['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']                   = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']                   = $this->productName['value'];
        }
        if (!empty($this->productGroupId)) {
            $json['ProductGroupId']                = $this->productGroupId['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']              = $this->productGroupName['value'];
        }
        if (!empty($this->lineItemDescription)) {
            $json['LineItemDescription']           = $this->lineItemDescription['value'];
        }
        if (!empty($this->quantity)) {
            $json['Quantity']                      = $this->quantity['value'];
        }
        if (!empty($this->isInvoiced)) {
            $json['IsInvoiced']                    = $this->isInvoiced['value'];
        }
        if (!empty($this->vATCountryCode)) {
            $json['VATCountryCode']                = $this->vATCountryCode['value'];
        }
        if (!empty($this->vATCountryName)) {
            $json['VATCountryName']                = $this->vATCountryName['value'];
        }
        if (!empty($this->vATPercentage)) {
            $json['VATPercentage']                 = $this->vATPercentage['value'];
        }
        if (!empty($this->vATCategoryID)) {
            $json['VATCategoryID']                 = $this->vATCategoryID['value'];
        }
        if (!empty($this->vATCategoryDescription)) {
            $json['VATCategoryDescription']        = $this->vATCategoryDescription['value'];
        }
        if (!empty($this->legislativeRegionId)) {
            $json['LegislativeRegionId']           = $this->legislativeRegionId['value'];
        }
        if (!empty($this->legislativeRegionName)) {
            $json['LegislativeRegionName']         = $this->legislativeRegionName['value'];
        }
        if (!empty($this->systemEntryDate)) {
            $json['SystemEntryDate']               = $this->systemEntryDate['value'];
        }
        if (!empty($this->systemEntryTime)) {
            $json['SystemEntryTime']               = $this->systemEntryTime['value'];
        }
        if (!empty($this->colCoNetAmount)) {
            $json['ColCoNetAmount']                = $this->colCoNetAmount['value'];
        }
        if (!empty($this->colCoVATAmount)) {
            $json['ColCoVATAmount']                = $this->colCoVATAmount['value'];
        }
        if (!empty($this->colCoGrossAmount)) {
            $json['ColCoGrossAmount']              = $this->colCoGrossAmount['value'];
        }
        if (!empty($this->interimInvoiceId)) {
            $json['InterimInvoiceId']              = $this->interimInvoiceId['value'];
        }
        if (!empty($this->interimInvoiceNumber)) {
            $json['InterimInvoiceNumber']          = $this->interimInvoiceNumber['value'];
        }
        if (!empty($this->invoiceId)) {
            $json['InvoiceId']                     = $this->invoiceId['value'];
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber']                 = $this->invoiceNumber['value'];
        }
        if (!empty($this->invoiceDate)) {
            $json['InvoiceDate']                   = $this->invoiceDate['value'];
        }
        if (!empty($this->customerExchangeRate)) {
            $json['CustomerExchangeRate']          = $this->customerExchangeRate['value'];
        }
        if (!empty($this->invoiceNetAmount)) {
            $json['InvoiceNetAmount']              = $this->invoiceNetAmount['value'];
        }
        if (!empty($this->invoiceGrossAmount)) {
            $json['InvoiceGrossAmount']            = $this->invoiceGrossAmount['value'];
        }
        if (!empty($this->invoiceVATAmount)) {
            $json['InvoiceVATAmount']              = $this->invoiceVATAmount['value'];
        }
        if (!empty($this->reverseCharge)) {
            $json['ReverseCharge']                 = $this->reverseCharge['value'];
        }
        if (!empty($this->originalFeeItemId)) {
            $json['OriginalFeeItemId']             = $this->originalFeeItemId['value'];
        }
        if (!empty($this->originalCurrencyCode)) {
            $json['OriginalCurrencyCode']          = $this->originalCurrencyCode['value'];
        }
        if (!empty($this->originalCurrencySymbol)) {
            $json['OriginalCurrencySymbol']        = $this->originalCurrencySymbol['value'];
        }
        if (!empty($this->originalUnitPrice)) {
            $json['OriginalUnitPrice']             = $this->originalUnitPrice['value'];
        }
        if (!empty($this->originalNetAmount)) {
            $json['OriginalNetAmount']             = $this->originalNetAmount['value'];
        }
        if (!empty($this->originalVATAmount)) {
            $json['OriginalVATAmount']             = $this->originalVATAmount['value'];
        }
        if (!empty($this->originalGrossAmount)) {
            $json['OriginalGrossAmount']           = $this->originalGrossAmount['value'];
        }
        if (!empty($this->originalExchangeRate)) {
            $json['OriginalExchangeRate']          = $this->originalExchangeRate['value'];
        }
        if (!empty($this->originalLegislativeRegionId)) {
            $json['OriginalLegislativeRegionId']   = $this->originalLegislativeRegionId['value'];
        }
        if (!empty($this->originalLegislativeRegionName)) {
            $json['OriginalLegislativeRegionName'] = $this->originalLegislativeRegionName['value'];
        }
        if (!empty($this->frequency)) {
            $json['Frequency']                     = $this->frequency['value'];
        }
        if (!empty($this->feeItemCardLevelBreakup)) {
            $json['FeeItemCardLevelBreakup']       = $this->feeItemCardLevelBreakup['value'];
        }
        if (!empty($this->originalFeeItemInvoiceId)) {
            $json['OriginalFeeItemInvoiceId']      = $this->originalFeeItemInvoiceId['value'];
        }
        if (!empty($this->originalFeeItemInvoiceNumber)) {
            $json['OriginalFeeItemInvoiceNumber']  = $this->originalFeeItemInvoiceNumber['value'];
        }
        if (!empty($this->originalFeeItemInvoiceDate)) {
            $json['OriginalFeeItemInvoiceDate']    = $this->originalFeeItemInvoiceDate['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                    = $this->driverName['value'];
        }
        if (!empty($this->embossText)) {
            $json['EmbossText']                    = $this->embossText['value'];
        }
        if (!empty($this->vRN)) {
            $json['VRN']                           = $this->vRN['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

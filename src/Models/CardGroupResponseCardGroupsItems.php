<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CardGroupResponseCardGroupsItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $activeCards = [];

    /**
     * @var array
     */
    private $blockedCards = [];

    /**
     * @var array
     */
    private $cancelledCards = [];

    /**
     * @var array
     */
    private $cardDeliveryPoint = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $cardTypeCode = [];

    /**
     * @var array
     */
    private $cardTypeId = [];

    /**
     * @var array
     */
    private $cardTypeName = [];

    /**
     * @var array
     */
    private $expiredCards = [];

    /**
     * @var array
     */
    private $expiryDate = [];

    /**
     * @var array
     */
    private $printOnCard = [];

    /**
     * @var array
     */
    private $renewalPendingCards = [];

    /**
     * @var array
     */
    private $replacedCards = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $temporaryBlockByCustomer = [];

    /**
     * @var array
     */
    private $temporaryBlockByShell = [];

    /**
     * @var array
     */
    private $terminatedDate = [];

    /**
     * @var array
     */
    private $totalCards = [];

    /**
     * Returns Account Id.
     * Account Id for the associated card group
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id for the associated card group
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id for the associated card group
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account number for the associated card group
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account number for the associated card group
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account number for the associated card group
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account short name for the associated card group
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account short name for the associated card group
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account short name for the associated card group
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Active Cards.
     * Total number of active cards for the given search criteria
     */
    public function getActiveCards(): ?int
    {
        if (count($this->activeCards) == 0) {
            return null;
        }
        return $this->activeCards['value'];
    }

    /**
     * Sets Active Cards.
     * Total number of active cards for the given search criteria
     *
     * @maps ActiveCards
     */
    public function setActiveCards(?int $activeCards): void
    {
        $this->activeCards['value'] = $activeCards;
    }

    /**
     * Unsets Active Cards.
     * Total number of active cards for the given search criteria
     */
    public function unsetActiveCards(): void
    {
        $this->activeCards = [];
    }

    /**
     * Returns Blocked Cards.
     * Total number of cards for the given search criteria that are permanently blocked
     */
    public function getBlockedCards(): ?int
    {
        if (count($this->blockedCards) == 0) {
            return null;
        }
        return $this->blockedCards['value'];
    }

    /**
     * Sets Blocked Cards.
     * Total number of cards for the given search criteria that are permanently blocked
     *
     * @maps BlockedCards
     */
    public function setBlockedCards(?int $blockedCards): void
    {
        $this->blockedCards['value'] = $blockedCards;
    }

    /**
     * Unsets Blocked Cards.
     * Total number of cards for the given search criteria that are permanently blocked
     */
    public function unsetBlockedCards(): void
    {
        $this->blockedCards = [];
    }

    /**
     * Returns Cancelled Cards.
     * Total number of cards for the given search criteria that are cancelled
     */
    public function getCancelledCards(): ?int
    {
        if (count($this->cancelledCards) == 0) {
            return null;
        }
        return $this->cancelledCards['value'];
    }

    /**
     * Sets Cancelled Cards.
     * Total number of cards for the given search criteria that are cancelled
     *
     * @maps CancelledCards
     */
    public function setCancelledCards(?int $cancelledCards): void
    {
        $this->cancelledCards['value'] = $cancelledCards;
    }

    /**
     * Unsets Cancelled Cards.
     * Total number of cards for the given search criteria that are cancelled
     */
    public function unsetCancelledCards(): void
    {
        $this->cancelledCards = [];
    }

    /**
     * Returns Card Delivery Point.
     * card delivery point enabled or not
     */
    public function getCardDeliveryPoint(): ?bool
    {
        if (count($this->cardDeliveryPoint) == 0) {
            return null;
        }
        return $this->cardDeliveryPoint['value'];
    }

    /**
     * Sets Card Delivery Point.
     * card delivery point enabled or not
     *
     * @maps CardDeliveryPoint
     */
    public function setCardDeliveryPoint(?bool $cardDeliveryPoint): void
    {
        $this->cardDeliveryPoint['value'] = $cardDeliveryPoint;
    }

    /**
     * Unsets Card Delivery Point.
     * card delivery point enabled or not
     */
    public function unsetCardDeliveryPoint(): void
    {
        $this->cardDeliveryPoint = [];
    }

    /**
     * Returns Card Group Id.
     * Id of the card group matching the search criteria.
     */
    public function getCardGroupId(): ?int
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Id of the card group matching the search criteria.
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Id of the card group matching the search criteria.
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Group Name.
     * Name of the card group matching the search criteria.
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Name of the card group matching the search criteria.
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Name of the card group matching the search criteria.
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Card Type Code.
     * Card Type Code
     */
    public function getCardTypeCode(): ?string
    {
        if (count($this->cardTypeCode) == 0) {
            return null;
        }
        return $this->cardTypeCode['value'];
    }

    /**
     * Sets Card Type Code.
     * Card Type Code
     *
     * @maps CardTypeCode
     */
    public function setCardTypeCode(?string $cardTypeCode): void
    {
        $this->cardTypeCode['value'] = $cardTypeCode;
    }

    /**
     * Unsets Card Type Code.
     * Card Type Code
     */
    public function unsetCardTypeCode(): void
    {
        $this->cardTypeCode = [];
    }

    /**
     * Returns Card Type Id.
     * Card Type Id
     */
    public function getCardTypeId(): ?int
    {
        if (count($this->cardTypeId) == 0) {
            return null;
        }
        return $this->cardTypeId['value'];
    }

    /**
     * Sets Card Type Id.
     * Card Type Id
     *
     * @maps CardTypeId
     */
    public function setCardTypeId(?int $cardTypeId): void
    {
        $this->cardTypeId['value'] = $cardTypeId;
    }

    /**
     * Unsets Card Type Id.
     * Card Type Id
     */
    public function unsetCardTypeId(): void
    {
        $this->cardTypeId = [];
    }

    /**
     * Returns Card Type Name.
     * Card Type Name
     */
    public function getCardTypeName(): ?string
    {
        if (count($this->cardTypeName) == 0) {
            return null;
        }
        return $this->cardTypeName['value'];
    }

    /**
     * Sets Card Type Name.
     * Card Type Name
     *
     * @maps CardTypeName
     */
    public function setCardTypeName(?string $cardTypeName): void
    {
        $this->cardTypeName['value'] = $cardTypeName;
    }

    /**
     * Unsets Card Type Name.
     * Card Type Name
     */
    public function unsetCardTypeName(): void
    {
        $this->cardTypeName = [];
    }

    /**
     * Returns Expired Cards.
     * Total number of expired cards for the given search criteria
     */
    public function getExpiredCards(): ?int
    {
        if (count($this->expiredCards) == 0) {
            return null;
        }
        return $this->expiredCards['value'];
    }

    /**
     * Sets Expired Cards.
     * Total number of expired cards for the given search criteria
     *
     * @maps ExpiredCards
     */
    public function setExpiredCards(?int $expiredCards): void
    {
        $this->expiredCards['value'] = $expiredCards;
    }

    /**
     * Unsets Expired Cards.
     * Total number of expired cards for the given search criteria
     */
    public function unsetExpiredCards(): void
    {
        $this->expiredCards = [];
    }

    /**
     * Returns Expiry Date.
     * Expiry date of the card.
     * Format: yyyyMMdd
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function getExpiryDate(): ?string
    {
        if (count($this->expiryDate) == 0) {
            return null;
        }
        return $this->expiryDate['value'];
    }

    /**
     * Sets Expiry Date.
     * Expiry date of the card.
     * Format: yyyyMMdd
     * Note: Clients to convert this to appropriate DateTime type.
     *
     * @maps ExpiryDate
     */
    public function setExpiryDate(?string $expiryDate): void
    {
        $this->expiryDate['value'] = $expiryDate;
    }

    /**
     * Unsets Expiry Date.
     * Expiry date of the card.
     * Format: yyyyMMdd
     * Note: Clients to convert this to appropriate DateTime type.
     */
    public function unsetExpiryDate(): void
    {
        $this->expiryDate = [];
    }

    /**
     * Returns Print on Card.
     * PrintOnCard true/false
     */
    public function getPrintOnCard(): ?bool
    {
        if (count($this->printOnCard) == 0) {
            return null;
        }
        return $this->printOnCard['value'];
    }

    /**
     * Sets Print on Card.
     * PrintOnCard true/false
     *
     * @maps PrintOnCard
     */
    public function setPrintOnCard(?bool $printOnCard): void
    {
        $this->printOnCard['value'] = $printOnCard;
    }

    /**
     * Unsets Print on Card.
     * PrintOnCard true/false
     */
    public function unsetPrintOnCard(): void
    {
        $this->printOnCard = [];
    }

    /**
     * Returns Renewal Pending Cards.
     * Total number of Renewal Pending Cards for the given search criteria
     */
    public function getRenewalPendingCards(): ?int
    {
        if (count($this->renewalPendingCards) == 0) {
            return null;
        }
        return $this->renewalPendingCards['value'];
    }

    /**
     * Sets Renewal Pending Cards.
     * Total number of Renewal Pending Cards for the given search criteria
     *
     * @maps RenewalPendingCards
     */
    public function setRenewalPendingCards(?int $renewalPendingCards): void
    {
        $this->renewalPendingCards['value'] = $renewalPendingCards;
    }

    /**
     * Unsets Renewal Pending Cards.
     * Total number of Renewal Pending Cards for the given search criteria
     */
    public function unsetRenewalPendingCards(): void
    {
        $this->renewalPendingCards = [];
    }

    /**
     * Returns Replaced Cards.
     */
    public function getReplacedCards(): ?int
    {
        if (count($this->replacedCards) == 0) {
            return null;
        }
        return $this->replacedCards['value'];
    }

    /**
     * Sets Replaced Cards.
     *
     * @maps ReplacedCards
     */
    public function setReplacedCards(?int $replacedCards): void
    {
        $this->replacedCards['value'] = $replacedCards;
    }

    /**
     * Unsets Replaced Cards.
     */
    public function unsetReplacedCards(): void
    {
        $this->replacedCards = [];
    }

    /**
     * Returns Status.
     * Status of the card group.
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status of the card group.
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status of the card group.
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Temporary Block by Customer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     */
    public function getTemporaryBlockByCustomer(): ?int
    {
        if (count($this->temporaryBlockByCustomer) == 0) {
            return null;
        }
        return $this->temporaryBlockByCustomer['value'];
    }

    /**
     * Sets Temporary Block by Customer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     *
     * @maps TemporaryBlockByCustomer
     */
    public function setTemporaryBlockByCustomer(?int $temporaryBlockByCustomer): void
    {
        $this->temporaryBlockByCustomer['value'] = $temporaryBlockByCustomer;
    }

    /**
     * Unsets Temporary Block by Customer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     */
    public function unsetTemporaryBlockByCustomer(): void
    {
        $this->temporaryBlockByCustomer = [];
    }

    /**
     * Returns Temporary Block by Shell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     */
    public function getTemporaryBlockByShell(): ?int
    {
        if (count($this->temporaryBlockByShell) == 0) {
            return null;
        }
        return $this->temporaryBlockByShell['value'];
    }

    /**
     * Sets Temporary Block by Shell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     *
     * @maps TemporaryBlockByShell
     */
    public function setTemporaryBlockByShell(?int $temporaryBlockByShell): void
    {
        $this->temporaryBlockByShell['value'] = $temporaryBlockByShell;
    }

    /**
     * Unsets Temporary Block by Shell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     */
    public function unsetTemporaryBlockByShell(): void
    {
        $this->temporaryBlockByShell = [];
    }

    /**
     * Returns Terminated Date.
     * Terminated Date.
     *
     * Format: yyyyMMdd
     *
     * Note: Clients to convert this to appropriate Date Time type.
     */
    public function getTerminatedDate(): ?string
    {
        if (count($this->terminatedDate) == 0) {
            return null;
        }
        return $this->terminatedDate['value'];
    }

    /**
     * Sets Terminated Date.
     * Terminated Date.
     *
     * Format: yyyyMMdd
     *
     * Note: Clients to convert this to appropriate Date Time type.
     *
     * @maps TerminatedDate
     */
    public function setTerminatedDate(?string $terminatedDate): void
    {
        $this->terminatedDate['value'] = $terminatedDate;
    }

    /**
     * Unsets Terminated Date.
     * Terminated Date.
     *
     * Format: yyyyMMdd
     *
     * Note: Clients to convert this to appropriate Date Time type.
     */
    public function unsetTerminatedDate(): void
    {
        $this->terminatedDate = [];
    }

    /**
     * Returns Total Cards.
     * Total number of cards for the given search criteria
     */
    public function getTotalCards(): ?int
    {
        if (count($this->totalCards) == 0) {
            return null;
        }
        return $this->totalCards['value'];
    }

    /**
     * Sets Total Cards.
     * Total number of cards for the given search criteria
     *
     * @maps TotalCards
     */
    public function setTotalCards(?int $totalCards): void
    {
        $this->totalCards['value'] = $totalCards;
    }

    /**
     * Unsets Total Cards.
     * Total number of cards for the given search criteria
     */
    public function unsetTotalCards(): void
    {
        $this->totalCards = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']                = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']            = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']         = $this->accountShortName['value'];
        }
        if (!empty($this->activeCards)) {
            $json['ActiveCards']              = $this->activeCards['value'];
        }
        if (!empty($this->blockedCards)) {
            $json['BlockedCards']             = $this->blockedCards['value'];
        }
        if (!empty($this->cancelledCards)) {
            $json['CancelledCards']           = $this->cancelledCards['value'];
        }
        if (!empty($this->cardDeliveryPoint)) {
            $json['CardDeliveryPoint']        = $this->cardDeliveryPoint['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']              = $this->cardGroupId['value'];
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']            = $this->cardGroupName['value'];
        }
        if (!empty($this->cardTypeCode)) {
            $json['CardTypeCode']             = $this->cardTypeCode['value'];
        }
        if (!empty($this->cardTypeId)) {
            $json['CardTypeId']               = $this->cardTypeId['value'];
        }
        if (!empty($this->cardTypeName)) {
            $json['CardTypeName']             = $this->cardTypeName['value'];
        }
        if (!empty($this->expiredCards)) {
            $json['ExpiredCards']             = $this->expiredCards['value'];
        }
        if (!empty($this->expiryDate)) {
            $json['ExpiryDate']               = $this->expiryDate['value'];
        }
        if (!empty($this->printOnCard)) {
            $json['PrintOnCard']              = $this->printOnCard['value'];
        }
        if (!empty($this->renewalPendingCards)) {
            $json['RenewalPendingCards']      = $this->renewalPendingCards['value'];
        }
        if (!empty($this->replacedCards)) {
            $json['ReplacedCards']            = $this->replacedCards['value'];
        }
        if (!empty($this->status)) {
            $json['Status']                   = $this->status['value'];
        }
        if (!empty($this->temporaryBlockByCustomer)) {
            $json['TemporaryBlockByCustomer'] = $this->temporaryBlockByCustomer['value'];
        }
        if (!empty($this->temporaryBlockByShell)) {
            $json['TemporaryBlockByShell']    = $this->temporaryBlockByShell['value'];
        }
        if (!empty($this->terminatedDate)) {
            $json['TerminatedDate']           = $this->terminatedDate['value'];
        }
        if (!empty($this->totalCards)) {
            $json['TotalCards']               = $this->totalCards['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

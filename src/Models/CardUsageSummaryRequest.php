<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CardUsageSummaryRequest implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $cardExpiryDate = [];

    /**
     * Returns Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Account Id.
     * Account ID of the customer.
     * Optional if account number is passed else mandatory.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID of the customer.
     * Optional if account number is passed else mandatory.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID of the customer.
     * Optional if account number is passed else mandatory.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     * Optional if Account ID is passed else mandatory.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     * Optional if Account ID is passed else mandatory.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.
     * Optional if Account ID is passed else mandatory.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Card Id.
     * Card Id of the card.
     * Optional if PAN is passed, else Mandatory.
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card Id of the card.
     * Optional if PAN is passed, else Mandatory.
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card Id of the card.
     * Optional if PAN is passed, else Mandatory.
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns P AN.
     * PAN of the card.
     * Optional if CardId is passed, else Mandatory.
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * PAN of the card.
     * Optional if CardId is passed, else Mandatory.
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * PAN of the card.
     * Optional if CardId is passed, else Mandatory.
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Card Expiry Date.
     * Expiry date of the card.
     * Mandatory if Card ID is not provided, else optional.
     * Format: yyyyMMdd
     * Example: 20170930
     */
    public function getCardExpiryDate(): ?string
    {
        if (count($this->cardExpiryDate) == 0) {
            return null;
        }
        return $this->cardExpiryDate['value'];
    }

    /**
     * Sets Card Expiry Date.
     * Expiry date of the card.
     * Mandatory if Card ID is not provided, else optional.
     * Format: yyyyMMdd
     * Example: 20170930
     *
     * @maps CardExpiryDate
     */
    public function setCardExpiryDate(?string $cardExpiryDate): void
    {
        $this->cardExpiryDate['value'] = $cardExpiryDate;
    }

    /**
     * Unsets Card Expiry Date.
     * Expiry date of the card.
     * Mandatory if Card ID is not provided, else optional.
     * Format: yyyyMMdd
     * Example: 20170930
     */
    public function unsetCardExpiryDate(): void
    {
        $this->cardExpiryDate = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoId)) {
            $json['ColCoId']        = $this->colCoId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']      = $this->colCoCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']        = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']    = $this->payerNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']      = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']  = $this->accountNumber['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']         = $this->cardId['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']            = $this->pAN['value'];
        }
        if (!empty($this->cardExpiryDate)) {
            $json['CardExpiryDate'] = $this->cardExpiryDate['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

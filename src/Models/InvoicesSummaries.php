<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class InvoicesSummaries implements \JsonSerializable
{
    /**
     * @var array
     */
    private $amountDue = [];

    /**
     * @var array
     */
    private $amountNotOverdue = [];

    /**
     * @var array
     */
    private $amountOverdue = [];

    /**
     * @var array
     */
    private $amountPaid = [];

    /**
     * @var array
     */
    private $billingCurrencyCode = [];

    /**
     * @var array
     */
    private $billingCurrencySymbol = [];

    /**
     * @var array
     */
    private $outstandingBalance = [];

    /**
     * @var array
     */
    private $paymentDueDate = [];

    /**
     * @var array
     */
    private $summaryDocumentDate = [];

    /**
     * @var array
     */
    private $totalBillingDocuments = [];

    /**
     * @var array
     */
    private $totalGrossAmountBillingCurrency = [];

    /**
     * @var array
     */
    private $totalNetAmountBillingCurrency = [];

    /**
     * @var array
     */
    private $totalSummaryDocuments = [];

    /**
     * @var array
     */
    private $totalVATAmountBillingCurrency = [];

    /**
     * Returns Amount Due.
     * Amount due from last summary document date.
     */
    public function getAmountDue(): ?float
    {
        if (count($this->amountDue) == 0) {
            return null;
        }
        return $this->amountDue['value'];
    }

    /**
     * Sets Amount Due.
     * Amount due from last summary document date.
     *
     * @maps AmountDue
     */
    public function setAmountDue(?float $amountDue): void
    {
        $this->amountDue['value'] = $amountDue;
    }

    /**
     * Unsets Amount Due.
     * Amount due from last summary document date.
     */
    public function unsetAmountDue(): void
    {
        $this->amountDue = [];
    }

    /**
     * Returns Amount Not Overdue.
     * Amount that are due from past summary documents.
     */
    public function getAmountNotOverdue(): ?float
    {
        if (count($this->amountNotOverdue) == 0) {
            return null;
        }
        return $this->amountNotOverdue['value'];
    }

    /**
     * Sets Amount Not Overdue.
     * Amount that are due from past summary documents.
     *
     * @maps AmountNotOverdue
     */
    public function setAmountNotOverdue(?float $amountNotOverdue): void
    {
        $this->amountNotOverdue['value'] = $amountNotOverdue;
    }

    /**
     * Unsets Amount Not Overdue.
     * Amount that are due from past summary documents.
     */
    public function unsetAmountNotOverdue(): void
    {
        $this->amountNotOverdue = [];
    }

    /**
     * Returns Amount Overdue.
     * Amount that are overdue from past summary documents.
     */
    public function getAmountOverdue(): ?float
    {
        if (count($this->amountOverdue) == 0) {
            return null;
        }
        return $this->amountOverdue['value'];
    }

    /**
     * Sets Amount Overdue.
     * Amount that are overdue from past summary documents.
     *
     * @maps AmountOverdue
     */
    public function setAmountOverdue(?float $amountOverdue): void
    {
        $this->amountOverdue['value'] = $amountOverdue;
    }

    /**
     * Unsets Amount Overdue.
     * Amount that are overdue from past summary documents.
     */
    public function unsetAmountOverdue(): void
    {
        $this->amountOverdue = [];
    }

    /**
     * Returns Amount Paid.
     * Total amount paid in billing currency.
     */
    public function getAmountPaid(): ?float
    {
        if (count($this->amountPaid) == 0) {
            return null;
        }
        return $this->amountPaid['value'];
    }

    /**
     * Sets Amount Paid.
     * Total amount paid in billing currency.
     *
     * @maps AmountPaid
     */
    public function setAmountPaid(?float $amountPaid): void
    {
        $this->amountPaid['value'] = $amountPaid;
    }

    /**
     * Unsets Amount Paid.
     * Total amount paid in billing currency.
     */
    public function unsetAmountPaid(): void
    {
        $this->amountPaid = [];
    }

    /**
     * Returns Billing Currency Code.
     * Billing currency ISO code.
     */
    public function getBillingCurrencyCode(): ?string
    {
        if (count($this->billingCurrencyCode) == 0) {
            return null;
        }
        return $this->billingCurrencyCode['value'];
    }

    /**
     * Sets Billing Currency Code.
     * Billing currency ISO code.
     *
     * @maps BillingCurrencyCode
     */
    public function setBillingCurrencyCode(?string $billingCurrencyCode): void
    {
        $this->billingCurrencyCode['value'] = $billingCurrencyCode;
    }

    /**
     * Unsets Billing Currency Code.
     * Billing currency ISO code.
     */
    public function unsetBillingCurrencyCode(): void
    {
        $this->billingCurrencyCode = [];
    }

    /**
     * Returns Billing Currency Symbol.
     * Billing currency symbol.
     * Example: €
     */
    public function getBillingCurrencySymbol(): ?string
    {
        if (count($this->billingCurrencySymbol) == 0) {
            return null;
        }
        return $this->billingCurrencySymbol['value'];
    }

    /**
     * Sets Billing Currency Symbol.
     * Billing currency symbol.
     * Example: €
     *
     * @maps BillingCurrencySymbol
     */
    public function setBillingCurrencySymbol(?string $billingCurrencySymbol): void
    {
        $this->billingCurrencySymbol['value'] = $billingCurrencySymbol;
    }

    /**
     * Unsets Billing Currency Symbol.
     * Billing currency symbol.
     * Example: €
     */
    public function unsetBillingCurrencySymbol(): void
    {
        $this->billingCurrencySymbol = [];
    }

    /**
     * Returns Outstanding Balance.
     * Current outstanding balance amount
     */
    public function getOutstandingBalance(): ?float
    {
        if (count($this->outstandingBalance) == 0) {
            return null;
        }
        return $this->outstandingBalance['value'];
    }

    /**
     * Sets Outstanding Balance.
     * Current outstanding balance amount
     *
     * @maps OutstandingBalance
     */
    public function setOutstandingBalance(?float $outstandingBalance): void
    {
        $this->outstandingBalance['value'] = $outstandingBalance;
    }

    /**
     * Unsets Outstanding Balance.
     * Current outstanding balance amount
     */
    public function unsetOutstandingBalance(): void
    {
        $this->outstandingBalance = [];
    }

    /**
     * Returns Payment Due Date.
     * Payment due date.
     * Format: YYYYMMDD
     */
    public function getPaymentDueDate(): ?string
    {
        if (count($this->paymentDueDate) == 0) {
            return null;
        }
        return $this->paymentDueDate['value'];
    }

    /**
     * Sets Payment Due Date.
     * Payment due date.
     * Format: YYYYMMDD
     *
     * @maps PaymentDueDate
     */
    public function setPaymentDueDate(?string $paymentDueDate): void
    {
        $this->paymentDueDate['value'] = $paymentDueDate;
    }

    /**
     * Unsets Payment Due Date.
     * Payment due date.
     * Format: YYYYMMDD
     */
    public function unsetPaymentDueDate(): void
    {
        $this->paymentDueDate = [];
    }

    /**
     * Returns Summary Document Date.
     * Summary document date.
     * Format: YYYYMMDD
     */
    public function getSummaryDocumentDate(): ?string
    {
        if (count($this->summaryDocumentDate) == 0) {
            return null;
        }
        return $this->summaryDocumentDate['value'];
    }

    /**
     * Sets Summary Document Date.
     * Summary document date.
     * Format: YYYYMMDD
     *
     * @maps SummaryDocumentDate
     */
    public function setSummaryDocumentDate(?string $summaryDocumentDate): void
    {
        $this->summaryDocumentDate['value'] = $summaryDocumentDate;
    }

    /**
     * Unsets Summary Document Date.
     * Summary document date.
     * Format: YYYYMMDD
     */
    public function unsetSummaryDocumentDate(): void
    {
        $this->summaryDocumentDate = [];
    }

    /**
     * Returns Total Billing Documents.
     * Total number of invoices generated on this date.
     */
    public function getTotalBillingDocuments(): ?int
    {
        if (count($this->totalBillingDocuments) == 0) {
            return null;
        }
        return $this->totalBillingDocuments['value'];
    }

    /**
     * Sets Total Billing Documents.
     * Total number of invoices generated on this date.
     *
     * @maps TotalBillingDocuments
     */
    public function setTotalBillingDocuments(?int $totalBillingDocuments): void
    {
        $this->totalBillingDocuments['value'] = $totalBillingDocuments;
    }

    /**
     * Unsets Total Billing Documents.
     * Total number of invoices generated on this date.
     */
    public function unsetTotalBillingDocuments(): void
    {
        $this->totalBillingDocuments = [];
    }

    /**
     * Returns Total Gross Amount Billing Currency.
     * Total gross amount in billing currency.
     */
    public function getTotalGrossAmountBillingCurrency(): ?float
    {
        if (count($this->totalGrossAmountBillingCurrency) == 0) {
            return null;
        }
        return $this->totalGrossAmountBillingCurrency['value'];
    }

    /**
     * Sets Total Gross Amount Billing Currency.
     * Total gross amount in billing currency.
     *
     * @maps TotalGrossAmountBillingCurrency
     */
    public function setTotalGrossAmountBillingCurrency(?float $totalGrossAmountBillingCurrency): void
    {
        $this->totalGrossAmountBillingCurrency['value'] = $totalGrossAmountBillingCurrency;
    }

    /**
     * Unsets Total Gross Amount Billing Currency.
     * Total gross amount in billing currency.
     */
    public function unsetTotalGrossAmountBillingCurrency(): void
    {
        $this->totalGrossAmountBillingCurrency = [];
    }

    /**
     * Returns Total Net Amount Billing Currency.
     * Total net amount in billing currency.
     */
    public function getTotalNetAmountBillingCurrency(): ?float
    {
        if (count($this->totalNetAmountBillingCurrency) == 0) {
            return null;
        }
        return $this->totalNetAmountBillingCurrency['value'];
    }

    /**
     * Sets Total Net Amount Billing Currency.
     * Total net amount in billing currency.
     *
     * @maps TotalNetAmountBillingCurrency
     */
    public function setTotalNetAmountBillingCurrency(?float $totalNetAmountBillingCurrency): void
    {
        $this->totalNetAmountBillingCurrency['value'] = $totalNetAmountBillingCurrency;
    }

    /**
     * Unsets Total Net Amount Billing Currency.
     * Total net amount in billing currency.
     */
    public function unsetTotalNetAmountBillingCurrency(): void
    {
        $this->totalNetAmountBillingCurrency = [];
    }

    /**
     * Returns Total Summary Documents.
     * Total number of summary documents generated on this date.
     */
    public function getTotalSummaryDocuments(): ?int
    {
        if (count($this->totalSummaryDocuments) == 0) {
            return null;
        }
        return $this->totalSummaryDocuments['value'];
    }

    /**
     * Sets Total Summary Documents.
     * Total number of summary documents generated on this date.
     *
     * @maps TotalSummaryDocuments
     */
    public function setTotalSummaryDocuments(?int $totalSummaryDocuments): void
    {
        $this->totalSummaryDocuments['value'] = $totalSummaryDocuments;
    }

    /**
     * Unsets Total Summary Documents.
     * Total number of summary documents generated on this date.
     */
    public function unsetTotalSummaryDocuments(): void
    {
        $this->totalSummaryDocuments = [];
    }

    /**
     * Returns Total VAT Amount Billing Currency.
     * Total VAT amount in billing currency.
     */
    public function getTotalVATAmountBillingCurrency(): ?float
    {
        if (count($this->totalVATAmountBillingCurrency) == 0) {
            return null;
        }
        return $this->totalVATAmountBillingCurrency['value'];
    }

    /**
     * Sets Total VAT Amount Billing Currency.
     * Total VAT amount in billing currency.
     *
     * @maps TotalVATAmountBillingCurrency
     */
    public function setTotalVATAmountBillingCurrency(?float $totalVATAmountBillingCurrency): void
    {
        $this->totalVATAmountBillingCurrency['value'] = $totalVATAmountBillingCurrency;
    }

    /**
     * Unsets Total VAT Amount Billing Currency.
     * Total VAT amount in billing currency.
     */
    public function unsetTotalVATAmountBillingCurrency(): void
    {
        $this->totalVATAmountBillingCurrency = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->amountDue)) {
            $json['AmountDue']                       = $this->amountDue['value'];
        }
        if (!empty($this->amountNotOverdue)) {
            $json['AmountNotOverdue']                = $this->amountNotOverdue['value'];
        }
        if (!empty($this->amountOverdue)) {
            $json['AmountOverdue']                   = $this->amountOverdue['value'];
        }
        if (!empty($this->amountPaid)) {
            $json['AmountPaid']                      = $this->amountPaid['value'];
        }
        if (!empty($this->billingCurrencyCode)) {
            $json['BillingCurrencyCode']             = $this->billingCurrencyCode['value'];
        }
        if (!empty($this->billingCurrencySymbol)) {
            $json['BillingCurrencySymbol']           = $this->billingCurrencySymbol['value'];
        }
        if (!empty($this->outstandingBalance)) {
            $json['OutstandingBalance']              = $this->outstandingBalance['value'];
        }
        if (!empty($this->paymentDueDate)) {
            $json['PaymentDueDate']                  = $this->paymentDueDate['value'];
        }
        if (!empty($this->summaryDocumentDate)) {
            $json['SummaryDocumentDate']             = $this->summaryDocumentDate['value'];
        }
        if (!empty($this->totalBillingDocuments)) {
            $json['TotalBillingDocuments']           = $this->totalBillingDocuments['value'];
        }
        if (!empty($this->totalGrossAmountBillingCurrency)) {
            $json['TotalGrossAmountBillingCurrency'] = $this->totalGrossAmountBillingCurrency['value'];
        }
        if (!empty($this->totalNetAmountBillingCurrency)) {
            $json['TotalNetAmountBillingCurrency']   = $this->totalNetAmountBillingCurrency['value'];
        }
        if (!empty($this->totalSummaryDocuments)) {
            $json['TotalSummaryDocuments']           = $this->totalSummaryDocuments['value'];
        }
        if (!empty($this->totalVATAmountBillingCurrency)) {
            $json['TotalVATAmountBillingCurrency']   = $this->totalVATAmountBillingCurrency['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

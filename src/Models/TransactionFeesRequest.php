<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class TransactionFeesRequest implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var Accounts[]|null
     */
    private $accounts;

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $invoiceStatus = [];

    /**
     * @var array
     */
    private $feeTypeGroup = [];

    /**
     * @var array
     */
    private $feeTypeId = [];

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $period = [];

    /**
     * @var array
     */
    private $includeCancelledItems = [];

    /**
     * @var array
     */
    private $productId = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $lineItemDescription = [];

    /**
     * @var array
     */
    private $sortOrder = [];

    /**
     * @var array
     */
    private $currentPage = [];

    /**
     * @var array
     */
    private $pageSize = [];

    /**
     * Returns Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * Example: 123456
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * Example: 123456
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * Example: 123456
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number (Ex: GB000000123) of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number (Ex: GB000000123) of the selected payer.
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number (Ex: GB000000123) of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Accounts.
     *
     * @return Accounts[]|null
     */
    public function getAccounts(): ?array
    {
        return $this->accounts;
    }

    /**
     * Sets Accounts.
     *
     * @maps Accounts
     *
     * @param Accounts[]|null $accounts
     */
    public function setAccounts(?array $accounts): void
    {
        $this->accounts = $accounts;
    }

    /**
     * Returns Card Id.
     * Card Id
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have all the fee items
     * under the selected payer or account.
     *
     * Example: 275549
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card Id
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have all the fee items
     * under the selected payer or account.
     *
     * Example: 275549
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card Id
     *
     * Optional
     *
     * When both Card Id and Card PAN are not present on request, the response will have all the fee items
     * under the selected payer or account.
     *
     * Example: 275549
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Card PAN.
     * Full Card PAN
     * Optional
     * When both Card Id and Card PAN are not present on request, the response will have all the fee items
     * under the selected payer or account or card group.
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Full Card PAN
     * Optional
     * When both Card Id and Card PAN are not present on request, the response will have all the fee items
     * under the selected payer or account or card group.
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Full Card PAN
     * Optional
     * When both Card Id and Card PAN are not present on request, the response will have all the fee items
     * under the selected payer or account or card group.
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns Invoice Status.
     * Invoice status of the fee items
     * Mandatory
     * Possible options:
     * I - Invoiced
     * U – Un-Invoiced
     * A – All
     */
    public function getInvoiceStatus(): ?string
    {
        if (count($this->invoiceStatus) == 0) {
            return null;
        }
        return $this->invoiceStatus['value'];
    }

    /**
     * Sets Invoice Status.
     * Invoice status of the fee items
     * Mandatory
     * Possible options:
     * I - Invoiced
     * U – Un-Invoiced
     * A – All
     *
     * @maps InvoiceStatus
     */
    public function setInvoiceStatus(?string $invoiceStatus): void
    {
        $this->invoiceStatus['value'] = $invoiceStatus;
    }

    /**
     * Unsets Invoice Status.
     * Invoice status of the fee items
     * Mandatory
     * Possible options:
     * I - Invoiced
     * U – Un-Invoiced
     * A – All
     */
    public function unsetInvoiceStatus(): void
    {
        $this->invoiceStatus = [];
    }

    /**
     * Returns Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     * Optional.
     * Allowed values:
     * - Account Charges
     * - Card Charges
     * - Others Charges
     */
    public function getFeeTypeGroup(): ?string
    {
        if (count($this->feeTypeGroup) == 0) {
            return null;
        }
        return $this->feeTypeGroup['value'];
    }

    /**
     * Sets Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     * Optional.
     * Allowed values:
     * - Account Charges
     * - Card Charges
     * - Others Charges
     *
     * @maps FeeTypeGroup
     */
    public function setFeeTypeGroup(?string $feeTypeGroup): void
    {
        $this->feeTypeGroup['value'] = $feeTypeGroup;
    }

    /**
     * Unsets Fee Type Group.
     * Fee type group in under which the Fee item is generated.
     * Optional.
     * Allowed values:
     * - Account Charges
     * - Card Charges
     * - Others Charges
     */
    public function unsetFeeTypeGroup(): void
    {
        $this->feeTypeGroup = [];
    }

    /**
     * Returns Fee Type Id.
     * Fee Type Id.
     *
     * Optional.
     *
     * Example:
     *
     * 1. Simple Fee
     *
     * 2. Card Event Fee
     *
     * 3. Customer Event Fee
     */
    public function getFeeTypeId(): ?int
    {
        if (count($this->feeTypeId) == 0) {
            return null;
        }
        return $this->feeTypeId['value'];
    }

    /**
     * Sets Fee Type Id.
     * Fee Type Id.
     *
     * Optional.
     *
     * Example:
     *
     * 1. Simple Fee
     *
     * 2. Card Event Fee
     *
     * 3. Customer Event Fee
     *
     * @maps FeeTypeId
     */
    public function setFeeTypeId(?int $feeTypeId): void
    {
        $this->feeTypeId['value'] = $feeTypeId;
    }

    /**
     * Unsets Fee Type Id.
     * Fee Type Id.
     *
     * Optional.
     *
     * Example:
     *
     * 1. Simple Fee
     *
     * 2. Card Event Fee
     *
     * 3. Customer Event Fee
     */
    public function unsetFeeTypeId(): void
    {
        $this->feeTypeId = [];
    }

    /**
     * Returns From Date.
     * Fee Item FromDate/Time
     *
     * Should be with in last 24 months
     *
     * Optional
     *
     * Maximum of 210 days duration allowed per search, its configurable.
     *
     * Format: yyyyMMdd
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * Fee Item FromDate/Time
     *
     * Should be with in last 24 months
     *
     * Optional
     *
     * Maximum of 210 days duration allowed per search, its configurable.
     *
     * Format: yyyyMMdd
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * Fee Item FromDate/Time
     *
     * Should be with in last 24 months
     *
     * Optional
     *
     * Maximum of 210 days duration allowed per search, its configurable.
     *
     * Format: yyyyMMdd
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Fee Item To Date/Time
     *
     * Optional
     *
     * When blank and FromDate is provided on the input, all fee items took place after the given from
     * date/time should be returned. Note that the search is allowed for the maximum of 60 days. Hence if
     * the FromDate is older than 60 days from current date then the fee items for 60 days from FromDate
     * will be returned.
     *
     * Format: yyyyMMdd
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Fee Item To Date/Time
     *
     * Optional
     *
     * When blank and FromDate is provided on the input, all fee items took place after the given from
     * date/time should be returned. Note that the search is allowed for the maximum of 60 days. Hence if
     * the FromDate is older than 60 days from current date then the fee items for 60 days from FromDate
     * will be returned.
     *
     * Format: yyyyMMdd
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Fee Item To Date/Time
     *
     * Optional
     *
     * When blank and FromDate is provided on the input, all fee items took place after the given from
     * date/time should be returned. Note that the search is allowed for the maximum of 60 days. Hence if
     * the FromDate is older than 60 days from current date then the fee items for 60 days from FromDate
     * will be returned.
     *
     * Format: yyyyMMdd
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request.
     *
     * 1.    Last 7 Days
     *
     * 2.    Last 30 Days
     *
     * 3.    Last 90 Days
     *
     * 4.    Last 180 Days
     *
     * Example : Pass 1 for Last 7 days fee items
     */
    public function getPeriod(): ?int
    {
        if (count($this->period) == 0) {
            return null;
        }
        return $this->period['value'];
    }

    /**
     * Sets Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request.
     *
     * 1.    Last 7 Days
     *
     * 2.    Last 30 Days
     *
     * 3.    Last 90 Days
     *
     * 4.    Last 180 Days
     *
     * Example : Pass 1 for Last 7 days fee items
     *
     * @maps Period
     */
    public function setPeriod(?int $period): void
    {
        $this->period['value'] = $period;
    }

    /**
     * Unsets Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request.
     *
     * 1.    Last 7 Days
     *
     * 2.    Last 30 Days
     *
     * 3.    Last 90 Days
     *
     * 4.    Last 180 Days
     *
     * Example : Pass 1 for Last 7 days fee items
     */
    public function unsetPeriod(): void
    {
        $this->period = [];
    }

    /**
     * Returns Include Cancelled Items.
     * True or False. When True, cancelled fee items are included on API response
     */
    public function getIncludeCancelledItems(): ?bool
    {
        if (count($this->includeCancelledItems) == 0) {
            return null;
        }
        return $this->includeCancelledItems['value'];
    }

    /**
     * Sets Include Cancelled Items.
     * True or False. When True, cancelled fee items are included on API response
     *
     * @maps IncludeCancelledItems
     */
    public function setIncludeCancelledItems(?bool $includeCancelledItems): void
    {
        $this->includeCancelledItems['value'] = $includeCancelledItems;
    }

    /**
     * Unsets Include Cancelled Items.
     * True or False. When True, cancelled fee items are included on API response
     */
    public function unsetIncludeCancelledItems(): void
    {
        $this->includeCancelledItems = [];
    }

    /**
     * Returns Product Id.
     * Product Id
     * Optional
     * Example: Sample list of product ids and description.
     * 100    Service fee
     * 102    Invoice production fee
     * 103    Account fee
     * 104    Transaction fee
     * 105    Card membership fee
     */
    public function getProductId(): ?int
    {
        if (count($this->productId) == 0) {
            return null;
        }
        return $this->productId['value'];
    }

    /**
     * Sets Product Id.
     * Product Id
     * Optional
     * Example: Sample list of product ids and description.
     * 100    Service fee
     * 102    Invoice production fee
     * 103    Account fee
     * 104    Transaction fee
     * 105    Card membership fee
     *
     * @maps ProductId
     */
    public function setProductId(?int $productId): void
    {
        $this->productId['value'] = $productId;
    }

    /**
     * Unsets Product Id.
     * Product Id
     * Optional
     * Example: Sample list of product ids and description.
     * 100    Service fee
     * 102    Invoice production fee
     * 103    Account fee
     * 104    Transaction fee
     * 105    Card membership fee
     */
    public function unsetProductId(): void
    {
        $this->productId = [];
    }

    /**
     * Returns Product Code.
     * Product Code
     *
     * Optional
     *
     * Example:
     *
     * 1. Service fee
     *
     * 2. Invoice production fee
     *
     * 3. Account fee
     *
     * 4. Transaction fee
     *
     * 5. Card membership fee
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code
     *
     * Optional
     *
     * Example:
     *
     * 1. Service fee
     *
     * 2. Invoice production fee
     *
     * 3. Account fee
     *
     * 4. Transaction fee
     *
     * 5. Card membership fee
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code
     *
     * Optional
     *
     * Example:
     *
     * 1. Service fee
     *
     * 2. Invoice production fee
     *
     * 3. Account fee
     *
     * 4. Transaction fee
     *
     * 5. Card membership fee
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Line Item Description.
     * Line item description.
     * Optional
     * Minimum of 4 characters should be provided else not considered
     * Those fee items that have the entered value at any part of the line item description will be
     * returned.
     */
    public function getLineItemDescription(): ?string
    {
        if (count($this->lineItemDescription) == 0) {
            return null;
        }
        return $this->lineItemDescription['value'];
    }

    /**
     * Sets Line Item Description.
     * Line item description.
     * Optional
     * Minimum of 4 characters should be provided else not considered
     * Those fee items that have the entered value at any part of the line item description will be
     * returned.
     *
     * @maps LineItemDescription
     */
    public function setLineItemDescription(?string $lineItemDescription): void
    {
        $this->lineItemDescription['value'] = $lineItemDescription;
    }

    /**
     * Unsets Line Item Description.
     * Line item description.
     * Optional
     * Minimum of 4 characters should be provided else not considered
     * Those fee items that have the entered value at any part of the line item description will be
     * returned.
     */
    public function unsetLineItemDescription(): void
    {
        $this->lineItemDescription = [];
    }

    /**
     * Returns Sort Order.
     * Allowed Sorting Options:
     * •    FeeDateAscending
     * •    FeeDateDescending
     * •    NetAmountAscending
     * •    NetAmountDescending
     * Optional.
     * Default: 1
     */
    public function getSortOrder(): ?string
    {
        if (count($this->sortOrder) == 0) {
            return null;
        }
        return $this->sortOrder['value'];
    }

    /**
     * Sets Sort Order.
     * Allowed Sorting Options:
     * •    FeeDateAscending
     * •    FeeDateDescending
     * •    NetAmountAscending
     * •    NetAmountDescending
     * Optional.
     * Default: 1
     *
     * @maps SortOrder
     */
    public function setSortOrder(?string $sortOrder): void
    {
        $this->sortOrder['value'] = $sortOrder;
    }

    /**
     * Unsets Sort Order.
     * Allowed Sorting Options:
     * •    FeeDateAscending
     * •    FeeDateDescending
     * •    NetAmountAscending
     * •    NetAmountDescending
     * Optional.
     * Default: 1
     */
    public function unsetSortOrder(): void
    {
        $this->sortOrder = [];
    }

    /**
     * Returns Current Page.
     * Page Number
     */
    public function getCurrentPage(): ?int
    {
        if (count($this->currentPage) == 0) {
            return null;
        }
        return $this->currentPage['value'];
    }

    /**
     * Sets Current Page.
     * Page Number
     *
     * @maps CurrentPage
     */
    public function setCurrentPage(?int $currentPage): void
    {
        $this->currentPage['value'] = $currentPage;
    }

    /**
     * Unsets Current Page.
     * Page Number
     */
    public function unsetCurrentPage(): void
    {
        $this->currentPage = [];
    }

    /**
     * Returns Page Size.
     * Page Size – Number of records to show on a page
     */
    public function getPageSize(): ?int
    {
        if (count($this->pageSize) == 0) {
            return null;
        }
        return $this->pageSize['value'];
    }

    /**
     * Sets Page Size.
     * Page Size – Number of records to show on a page
     *
     * @maps PageSize
     */
    public function setPageSize(?int $pageSize): void
    {
        $this->pageSize['value'] = $pageSize;
    }

    /**
     * Unsets Page Size.
     * Page Size – Number of records to show on a page
     */
    public function unsetPageSize(): void
    {
        $this->pageSize = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoId)) {
            $json['ColCoId']               = $this->colCoId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']             = $this->colCoCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']               = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']           = $this->payerNumber['value'];
        }
        if (isset($this->accounts)) {
            $json['Accounts']              = $this->accounts;
        }
        if (!empty($this->cardId)) {
            $json['CardId']                = $this->cardId['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']               = $this->cardPAN['value'];
        }
        if (!empty($this->invoiceStatus)) {
            $json['InvoiceStatus']         = $this->invoiceStatus['value'];
        }
        if (!empty($this->feeTypeGroup)) {
            $json['FeeTypeGroup']          = $this->feeTypeGroup['value'];
        }
        if (!empty($this->feeTypeId)) {
            $json['FeeTypeId']             = $this->feeTypeId['value'];
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']              = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']                = $this->toDate['value'];
        }
        if (!empty($this->period)) {
            $json['Period']                = $this->period['value'];
        }
        if (!empty($this->includeCancelledItems)) {
            $json['IncludeCancelledItems'] = $this->includeCancelledItems['value'];
        }
        if (!empty($this->productId)) {
            $json['ProductId']             = $this->productId['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']           = $this->productCode['value'];
        }
        if (!empty($this->lineItemDescription)) {
            $json['LineItemDescription']   = $this->lineItemDescription['value'];
        }
        if (!empty($this->sortOrder)) {
            $json['SortOrder']             = $this->sortOrder['value'];
        }
        if (!empty($this->currentPage)) {
            $json['CurrentPage']           = $this->currentPage['value'];
        }
        if (!empty($this->pageSize)) {
            $json['PageSize']              = $this->pageSize['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

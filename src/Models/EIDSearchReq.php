<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class EIDSearchReq implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var int|null
     */
    private $accountGroupCountry;

    /**
     * @var string[]
     */
    private $accountGroupId;

    /**
     * @var array
     */
    private $accountGroupName = [];

    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $invoiceType = [];

    /**
     * @var array
     */
    private $invoiceStatus = [];

    /**
     * @var string[]|null
     */
    private $sortBy;

    /**
     * @param string[] $accountGroupId
     */
    public function __construct(array $accountGroupId)
    {
        $this->accountGroupId = $accountGroupId;
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code of the selected payer.
     *
     * Mandatory
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code of the selected payer.
     *
     * Mandatory
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Account Group Country.
     * Country code (colco code) of the account group.
     *
     * Mandatory
     */
    public function getAccountGroupCountry(): ?int
    {
        return $this->accountGroupCountry;
    }

    /**
     * Sets Account Group Country.
     * Country code (colco code) of the account group.
     *
     * Mandatory
     *
     * @maps AccountGroupCountry
     */
    public function setAccountGroupCountry(?int $accountGroupCountry): void
    {
        $this->accountGroupCountry = $accountGroupCountry;
    }

    /**
     * Returns Account Group Id.
     * List of IDs of the account groups that user has access to.
     * Mandatory
     *
     * @return string[]
     */
    public function getAccountGroupId(): array
    {
        return $this->accountGroupId;
    }

    /**
     * Sets Account Group Id.
     * List of IDs of the account groups that user has access to.
     * Mandatory
     *
     * @required
     * @maps AccountGroupId
     *
     * @param string[] $accountGroupId
     */
    public function setAccountGroupId(array $accountGroupId): void
    {
        $this->accountGroupId = $accountGroupId;
    }

    /**
     * Returns Account Group Name.
     * Account group name
     *
     * Optional.
     *
     * This input is a search criterion, if given.
     */
    public function getAccountGroupName(): ?string
    {
        if (count($this->accountGroupName) == 0) {
            return null;
        }
        return $this->accountGroupName['value'];
    }

    /**
     * Sets Account Group Name.
     * Account group name
     *
     * Optional.
     *
     * This input is a search criterion, if given.
     *
     * @maps AccountGroupName
     */
    public function setAccountGroupName(?string $accountGroupName): void
    {
        $this->accountGroupName['value'] = $accountGroupName;
    }

    /**
     * Unsets Account Group Name.
     * Account group name
     *
     * Optional.
     *
     * This input is a search criterion, if given.
     */
    public function unsetAccountGroupName(): void
    {
        $this->accountGroupName = [];
    }

    /**
     * Returns From Date.
     * EID date searched from this date.
     *
     * Optional.
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * EID date searched from this date.
     *
     * Optional.
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * EID date searched from this date.
     *
     * Optional.
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Invoice date searched until this date.
     *
     * Optional.
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Invoice date searched until this date.
     *
     * Optional.
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Invoice date searched until this date.
     *
     * Optional.
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Invoice Type.
     * Invoice type.
     *
     * Optional.
     *
     * Possible values:
     *
     * • NAT (National)
     *
     * • INT (International)
     */
    public function getInvoiceType(): ?string
    {
        if (count($this->invoiceType) == 0) {
            return null;
        }
        return $this->invoiceType['value'];
    }

    /**
     * Sets Invoice Type.
     * Invoice type.
     *
     * Optional.
     *
     * Possible values:
     *
     * • NAT (National)
     *
     * • INT (International)
     *
     * @maps InvoiceType
     */
    public function setInvoiceType(?string $invoiceType): void
    {
        $this->invoiceType['value'] = $invoiceType;
    }

    /**
     * Unsets Invoice Type.
     * Invoice type.
     *
     * Optional.
     *
     * Possible values:
     *
     * • NAT (National)
     *
     * • INT (International)
     */
    public function unsetInvoiceType(): void
    {
        $this->invoiceType = [];
    }

    /**
     * Returns Invoice Status.
     * Status of the document.
     *
     * Optional.
     *
     * Possible values:
     *
     * • NEW
     *
     * • VIEWED
     *
     * • DOWNLOADED
     *
     * • RESTORED
     */
    public function getInvoiceStatus(): ?string
    {
        if (count($this->invoiceStatus) == 0) {
            return null;
        }
        return $this->invoiceStatus['value'];
    }

    /**
     * Sets Invoice Status.
     * Status of the document.
     *
     * Optional.
     *
     * Possible values:
     *
     * • NEW
     *
     * • VIEWED
     *
     * • DOWNLOADED
     *
     * • RESTORED
     *
     * @maps InvoiceStatus
     */
    public function setInvoiceStatus(?string $invoiceStatus): void
    {
        $this->invoiceStatus['value'] = $invoiceStatus;
    }

    /**
     * Unsets Invoice Status.
     * Status of the document.
     *
     * Optional.
     *
     * Possible values:
     *
     * • NEW
     *
     * • VIEWED
     *
     * • DOWNLOADED
     *
     * • RESTORED
     */
    public function unsetInvoiceStatus(): void
    {
        $this->invoiceStatus = [];
    }

    /**
     * Returns Sort By.
     * Sort option –
     * •    InvoiceNumber ASC
     * •    InvoiceDate ASC
     * •    InvoiceNumber DESC
     * •    InvoiceDate DESC
     * Optional
     *
     * @return string[]|null
     */
    public function getSortBy(): ?array
    {
        return $this->sortBy;
    }

    /**
     * Sets Sort By.
     * Sort option –
     * •    InvoiceNumber ASC
     * •    InvoiceDate ASC
     * •    InvoiceNumber DESC
     * •    InvoiceDate DESC
     * Optional
     *
     * @maps SortBy
     *
     * @param string[]|null $sortBy
     */
    public function setSortBy(?array $sortBy): void
    {
        $this->sortBy = $sortBy;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['ColCoCode']            = $this->colCoCode;
        $json['AccountGroupCountry']  = $this->accountGroupCountry;
        $json['AccountGroupId']       = $this->accountGroupId;
        if (!empty($this->accountGroupName)) {
            $json['AccountGroupName'] = $this->accountGroupName['value'];
        }
        if (!empty($this->fromDate)) {
            $json['FromDate']         = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']           = $this->toDate['value'];
        }
        if (!empty($this->invoiceType)) {
            $json['InvoiceType']      = $this->invoiceType['value'];
        }
        if (!empty($this->invoiceStatus)) {
            $json['InvoiceStatus']    = $this->invoiceStatus['value'];
        }
        if (isset($this->sortBy)) {
            $json['SortBy']           = $this->sortBy;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class FeeRuleLocation implements \JsonSerializable
{
    /**
     * @var array
     */
    private $delcoId = [];

    /**
     * @var array
     */
    private $country = [];

    /**
     * @var array
     */
    private $countryCode = [];

    /**
     * @var array
     */
    private $fuelNetworkId = [];

    /**
     * @var array
     */
    private $networkName = [];

    /**
     * @var array
     */
    private $siteGroupId = [];

    /**
     * @var array
     */
    private $siteGroupName = [];

    /**
     * @var array
     */
    private $siteCode = [];

    /**
     * @var array
     */
    private $siteId = [];

    /**
     * @var array
     */
    private $siteName = [];

    /**
     * Returns Delco Id.
     * Delco Identifier.
     */
    public function getDelcoId(): ?string
    {
        if (count($this->delcoId) == 0) {
            return null;
        }
        return $this->delcoId['value'];
    }

    /**
     * Sets Delco Id.
     * Delco Identifier.
     *
     * @maps DelcoId
     */
    public function setDelcoId(?string $delcoId): void
    {
        $this->delcoId['value'] = $delcoId;
    }

    /**
     * Unsets Delco Id.
     * Delco Identifier.
     */
    public function unsetDelcoId(): void
    {
        $this->delcoId = [];
    }

    /**
     * Returns Country.
     * Country name.
     */
    public function getCountry(): ?string
    {
        if (count($this->country) == 0) {
            return null;
        }
        return $this->country['value'];
    }

    /**
     * Sets Country.
     * Country name.
     *
     * @maps Country
     */
    public function setCountry(?string $country): void
    {
        $this->country['value'] = $country;
    }

    /**
     * Unsets Country.
     * Country name.
     */
    public function unsetCountry(): void
    {
        $this->country = [];
    }

    /**
     * Returns Country Code.
     * ISO Code of country.
     */
    public function getCountryCode(): ?string
    {
        if (count($this->countryCode) == 0) {
            return null;
        }
        return $this->countryCode['value'];
    }

    /**
     * Sets Country Code.
     * ISO Code of country.
     *
     * @maps CountryCode
     */
    public function setCountryCode(?string $countryCode): void
    {
        $this->countryCode['value'] = $countryCode;
    }

    /**
     * Unsets Country Code.
     * ISO Code of country.
     */
    public function unsetCountryCode(): void
    {
        $this->countryCode = [];
    }

    /**
     * Returns Fuel Network Id.
     * Fuel Network Identifier.
     */
    public function getFuelNetworkId(): ?int
    {
        if (count($this->fuelNetworkId) == 0) {
            return null;
        }
        return $this->fuelNetworkId['value'];
    }

    /**
     * Sets Fuel Network Id.
     * Fuel Network Identifier.
     *
     * @maps FuelNetworkId
     */
    public function setFuelNetworkId(?int $fuelNetworkId): void
    {
        $this->fuelNetworkId['value'] = $fuelNetworkId;
    }

    /**
     * Unsets Fuel Network Id.
     * Fuel Network Identifier.
     */
    public function unsetFuelNetworkId(): void
    {
        $this->fuelNetworkId = [];
    }

    /**
     * Returns Network Name.
     * Network Name.
     */
    public function getNetworkName(): ?string
    {
        if (count($this->networkName) == 0) {
            return null;
        }
        return $this->networkName['value'];
    }

    /**
     * Sets Network Name.
     * Network Name.
     *
     * @maps NetworkName
     */
    public function setNetworkName(?string $networkName): void
    {
        $this->networkName['value'] = $networkName;
    }

    /**
     * Unsets Network Name.
     * Network Name.
     */
    public function unsetNetworkName(): void
    {
        $this->networkName = [];
    }

    /**
     * Returns Site Group Id.
     * Site-Group ID
     */
    public function getSiteGroupId(): ?int
    {
        if (count($this->siteGroupId) == 0) {
            return null;
        }
        return $this->siteGroupId['value'];
    }

    /**
     * Sets Site Group Id.
     * Site-Group ID
     *
     * @maps SiteGroupId
     */
    public function setSiteGroupId(?int $siteGroupId): void
    {
        $this->siteGroupId['value'] = $siteGroupId;
    }

    /**
     * Unsets Site Group Id.
     * Site-Group ID
     */
    public function unsetSiteGroupId(): void
    {
        $this->siteGroupId = [];
    }

    /**
     * Returns Site Group Name.
     * Site-Group name.
     */
    public function getSiteGroupName(): ?string
    {
        if (count($this->siteGroupName) == 0) {
            return null;
        }
        return $this->siteGroupName['value'];
    }

    /**
     * Sets Site Group Name.
     * Site-Group name.
     *
     * @maps SiteGroupName
     */
    public function setSiteGroupName(?string $siteGroupName): void
    {
        $this->siteGroupName['value'] = $siteGroupName;
    }

    /**
     * Unsets Site Group Name.
     * Site-Group name.
     */
    public function unsetSiteGroupName(): void
    {
        $this->siteGroupName = [];
    }

    /**
     * Returns Site Code.
     * Site Code
     */
    public function getSiteCode(): ?int
    {
        if (count($this->siteCode) == 0) {
            return null;
        }
        return $this->siteCode['value'];
    }

    /**
     * Sets Site Code.
     * Site Code
     *
     * @maps SiteCode
     */
    public function setSiteCode(?int $siteCode): void
    {
        $this->siteCode['value'] = $siteCode;
    }

    /**
     * Unsets Site Code.
     * Site Code
     */
    public function unsetSiteCode(): void
    {
        $this->siteCode = [];
    }

    /**
     * Returns Site Id.
     * Site Identifier
     */
    public function getSiteId(): ?int
    {
        if (count($this->siteId) == 0) {
            return null;
        }
        return $this->siteId['value'];
    }

    /**
     * Sets Site Id.
     * Site Identifier
     *
     * @maps SiteId
     */
    public function setSiteId(?int $siteId): void
    {
        $this->siteId['value'] = $siteId;
    }

    /**
     * Unsets Site Id.
     * Site Identifier
     */
    public function unsetSiteId(): void
    {
        $this->siteId = [];
    }

    /**
     * Returns Site Name.
     * Site Name
     */
    public function getSiteName(): ?string
    {
        if (count($this->siteName) == 0) {
            return null;
        }
        return $this->siteName['value'];
    }

    /**
     * Sets Site Name.
     * Site Name
     *
     * @maps SiteName
     */
    public function setSiteName(?string $siteName): void
    {
        $this->siteName['value'] = $siteName;
    }

    /**
     * Unsets Site Name.
     * Site Name
     */
    public function unsetSiteName(): void
    {
        $this->siteName = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->delcoId)) {
            $json['DelcoId']       = $this->delcoId['value'];
        }
        if (!empty($this->country)) {
            $json['Country']       = $this->country['value'];
        }
        if (!empty($this->countryCode)) {
            $json['CountryCode']   = $this->countryCode['value'];
        }
        if (!empty($this->fuelNetworkId)) {
            $json['FuelNetworkId'] = $this->fuelNetworkId['value'];
        }
        if (!empty($this->networkName)) {
            $json['NetworkName']   = $this->networkName['value'];
        }
        if (!empty($this->siteGroupId)) {
            $json['SiteGroupId']   = $this->siteGroupId['value'];
        }
        if (!empty($this->siteGroupName)) {
            $json['SiteGroupName'] = $this->siteGroupName['value'];
        }
        if (!empty($this->siteCode)) {
            $json['SiteCode']      = $this->siteCode['value'];
        }
        if (!empty($this->siteId)) {
            $json['SiteId']        = $this->siteId['value'];
        }
        if (!empty($this->siteName)) {
            $json['SiteName']      = $this->siteName['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

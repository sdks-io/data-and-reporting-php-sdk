<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CardUsageRestrictions implements \JsonSerializable
{
    /**
     * @var array
     */
    private $level = [];

    /**
     * @var array
     */
    private $dailySpendLimit = [];

    /**
     * @var array
     */
    private $weeklySpendLimit = [];

    /**
     * @var array
     */
    private $monthlySpendLimit = [];

    /**
     * @var array
     */
    private $annualSpendLimit = [];

    /**
     * @var array
     */
    private $lifeTimeSpendLimit = [];

    /**
     * @var array
     */
    private $dailyVolumeLimit = [];

    /**
     * @var array
     */
    private $weeklyVolumeLimit = [];

    /**
     * @var array
     */
    private $monthlyVolumeLimit = [];

    /**
     * @var array
     */
    private $annualVolumeLimit = ['value' => 0];

    /**
     * @var array
     */
    private $lifeTimeVolumeLimit = [];

    /**
     * @var array
     */
    private $transactionSpendLimit = [];

    /**
     * @var array
     */
    private $transactionVolumeLimit = [];

    /**
     * @var array
     */
    private $dailyTransactionCount = [];

    /**
     * @var array
     */
    private $weeklyTransactionCount = [];

    /**
     * @var array
     */
    private $monthlyTransactionCount = [];

    /**
     * @var array
     */
    private $annualTransactionCount = [];

    /**
     * @var array
     */
    private $lifeTimeTransactionCount = [];

    /**
     * @var bool|null
     */
    private $isVelocityCeiling;

    /**
     * Returns Level.
     * Describes at which level the restriction is set at.
     *
     * Possible values:
     *
     * OU = Restriction set at ColCo card type
     *
     * Customer = Restriction set at customer card type
     */
    public function getLevel(): ?string
    {
        if (count($this->level) == 0) {
            return null;
        }
        return $this->level['value'];
    }

    /**
     * Sets Level.
     * Describes at which level the restriction is set at.
     *
     * Possible values:
     *
     * OU = Restriction set at ColCo card type
     *
     * Customer = Restriction set at customer card type
     *
     * @maps Level
     */
    public function setLevel(?string $level): void
    {
        $this->level['value'] = $level;
    }

    /**
     * Unsets Level.
     * Describes at which level the restriction is set at.
     *
     * Possible values:
     *
     * OU = Restriction set at ColCo card type
     *
     * Customer = Restriction set at customer card type
     */
    public function unsetLevel(): void
    {
        $this->level = [];
    }

    /**
     * Returns Daily Spend Limit.
     * Maximum amount that can be spend on the card in a day.
     */
    public function getDailySpendLimit(): ?float
    {
        if (count($this->dailySpendLimit) == 0) {
            return null;
        }
        return $this->dailySpendLimit['value'];
    }

    /**
     * Sets Daily Spend Limit.
     * Maximum amount that can be spend on the card in a day.
     *
     * @maps DailySpendLimit
     */
    public function setDailySpendLimit(?float $dailySpendLimit): void
    {
        $this->dailySpendLimit['value'] = $dailySpendLimit;
    }

    /**
     * Unsets Daily Spend Limit.
     * Maximum amount that can be spend on the card in a day.
     */
    public function unsetDailySpendLimit(): void
    {
        $this->dailySpendLimit = [];
    }

    /**
     * Returns Weekly Spend Limit.
     * Maximum amount that can be spend on the card in a week.
     */
    public function getWeeklySpendLimit(): ?float
    {
        if (count($this->weeklySpendLimit) == 0) {
            return null;
        }
        return $this->weeklySpendLimit['value'];
    }

    /**
     * Sets Weekly Spend Limit.
     * Maximum amount that can be spend on the card in a week.
     *
     * @maps WeeklySpendLimit
     */
    public function setWeeklySpendLimit(?float $weeklySpendLimit): void
    {
        $this->weeklySpendLimit['value'] = $weeklySpendLimit;
    }

    /**
     * Unsets Weekly Spend Limit.
     * Maximum amount that can be spend on the card in a week.
     */
    public function unsetWeeklySpendLimit(): void
    {
        $this->weeklySpendLimit = [];
    }

    /**
     * Returns Monthly Spend Limit.
     * Maximum amount that can be spend on the card in a month.
     */
    public function getMonthlySpendLimit(): ?float
    {
        if (count($this->monthlySpendLimit) == 0) {
            return null;
        }
        return $this->monthlySpendLimit['value'];
    }

    /**
     * Sets Monthly Spend Limit.
     * Maximum amount that can be spend on the card in a month.
     *
     * @maps MonthlySpendLimit
     */
    public function setMonthlySpendLimit(?float $monthlySpendLimit): void
    {
        $this->monthlySpendLimit['value'] = $monthlySpendLimit;
    }

    /**
     * Unsets Monthly Spend Limit.
     * Maximum amount that can be spend on the card in a month.
     */
    public function unsetMonthlySpendLimit(): void
    {
        $this->monthlySpendLimit = [];
    }

    /**
     * Returns Annual Spend Limit.
     * Maximum amount that can be spend on the card in a year.
     */
    public function getAnnualSpendLimit(): ?float
    {
        if (count($this->annualSpendLimit) == 0) {
            return null;
        }
        return $this->annualSpendLimit['value'];
    }

    /**
     * Sets Annual Spend Limit.
     * Maximum amount that can be spend on the card in a year.
     *
     * @maps AnnualSpendLimit
     */
    public function setAnnualSpendLimit(?float $annualSpendLimit): void
    {
        $this->annualSpendLimit['value'] = $annualSpendLimit;
    }

    /**
     * Unsets Annual Spend Limit.
     * Maximum amount that can be spend on the card in a year.
     */
    public function unsetAnnualSpendLimit(): void
    {
        $this->annualSpendLimit = [];
    }

    /**
     * Returns Life Time Spend Limit.
     * Maximum amount that can be spend on the card in the card’s life time.
     */
    public function getLifeTimeSpendLimit(): ?float
    {
        if (count($this->lifeTimeSpendLimit) == 0) {
            return null;
        }
        return $this->lifeTimeSpendLimit['value'];
    }

    /**
     * Sets Life Time Spend Limit.
     * Maximum amount that can be spend on the card in the card’s life time.
     *
     * @maps LifeTimeSpendLimit
     */
    public function setLifeTimeSpendLimit(?float $lifeTimeSpendLimit): void
    {
        $this->lifeTimeSpendLimit['value'] = $lifeTimeSpendLimit;
    }

    /**
     * Unsets Life Time Spend Limit.
     * Maximum amount that can be spend on the card in the card’s life time.
     */
    public function unsetLifeTimeSpendLimit(): void
    {
        $this->lifeTimeSpendLimit = [];
    }

    /**
     * Returns Daily Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a day.
     */
    public function getDailyVolumeLimit(): ?float
    {
        if (count($this->dailyVolumeLimit) == 0) {
            return null;
        }
        return $this->dailyVolumeLimit['value'];
    }

    /**
     * Sets Daily Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a day.
     *
     * @maps DailyVolumeLimit
     */
    public function setDailyVolumeLimit(?float $dailyVolumeLimit): void
    {
        $this->dailyVolumeLimit['value'] = $dailyVolumeLimit;
    }

    /**
     * Unsets Daily Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a day.
     */
    public function unsetDailyVolumeLimit(): void
    {
        $this->dailyVolumeLimit = [];
    }

    /**
     * Returns Weekly Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a week.
     */
    public function getWeeklyVolumeLimit(): ?float
    {
        if (count($this->weeklyVolumeLimit) == 0) {
            return null;
        }
        return $this->weeklyVolumeLimit['value'];
    }

    /**
     * Sets Weekly Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a week.
     *
     * @maps WeeklyVolumeLimit
     */
    public function setWeeklyVolumeLimit(?float $weeklyVolumeLimit): void
    {
        $this->weeklyVolumeLimit['value'] = $weeklyVolumeLimit;
    }

    /**
     * Unsets Weekly Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a week.
     */
    public function unsetWeeklyVolumeLimit(): void
    {
        $this->weeklyVolumeLimit = [];
    }

    /**
     * Returns Monthly Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a month.
     */
    public function getMonthlyVolumeLimit(): ?float
    {
        if (count($this->monthlyVolumeLimit) == 0) {
            return null;
        }
        return $this->monthlyVolumeLimit['value'];
    }

    /**
     * Sets Monthly Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a month.
     *
     * @maps MonthlyVolumeLimit
     */
    public function setMonthlyVolumeLimit(?float $monthlyVolumeLimit): void
    {
        $this->monthlyVolumeLimit['value'] = $monthlyVolumeLimit;
    }

    /**
     * Unsets Monthly Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a month.
     */
    public function unsetMonthlyVolumeLimit(): void
    {
        $this->monthlyVolumeLimit = [];
    }

    /**
     * Returns Annual Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a year.
     */
    public function getAnnualVolumeLimit(): ?float
    {
        if (count($this->annualVolumeLimit) == 0) {
            return null;
        }
        return $this->annualVolumeLimit['value'];
    }

    /**
     * Sets Annual Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a year.
     *
     * @maps AnnualVolumeLimit
     */
    public function setAnnualVolumeLimit(?float $annualVolumeLimit): void
    {
        $this->annualVolumeLimit['value'] = $annualVolumeLimit;
    }

    /**
     * Unsets Annual Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a year.
     */
    public function unsetAnnualVolumeLimit(): void
    {
        $this->annualVolumeLimit = [];
    }

    /**
     * Returns Life Time Volume Limit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     */
    public function getLifeTimeVolumeLimit(): ?float
    {
        if (count($this->lifeTimeVolumeLimit) == 0) {
            return null;
        }
        return $this->lifeTimeVolumeLimit['value'];
    }

    /**
     * Sets Life Time Volume Limit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     *
     * @maps LifeTimeVolumeLimit
     */
    public function setLifeTimeVolumeLimit(?float $lifeTimeVolumeLimit): void
    {
        $this->lifeTimeVolumeLimit['value'] = $lifeTimeVolumeLimit;
    }

    /**
     * Unsets Life Time Volume Limit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     */
    public function unsetLifeTimeVolumeLimit(): void
    {
        $this->lifeTimeVolumeLimit = [];
    }

    /**
     * Returns Transaction Spend Limit.
     * Maximum amount that can be spend on the card in a transaction.
     */
    public function getTransactionSpendLimit(): ?float
    {
        if (count($this->transactionSpendLimit) == 0) {
            return null;
        }
        return $this->transactionSpendLimit['value'];
    }

    /**
     * Sets Transaction Spend Limit.
     * Maximum amount that can be spend on the card in a transaction.
     *
     * @maps TransactionSpendLimit
     */
    public function setTransactionSpendLimit(?float $transactionSpendLimit): void
    {
        $this->transactionSpendLimit['value'] = $transactionSpendLimit;
    }

    /**
     * Unsets Transaction Spend Limit.
     * Maximum amount that can be spend on the card in a transaction.
     */
    public function unsetTransactionSpendLimit(): void
    {
        $this->transactionSpendLimit = [];
    }

    /**
     * Returns Transaction Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     */
    public function getTransactionVolumeLimit(): ?float
    {
        if (count($this->transactionVolumeLimit) == 0) {
            return null;
        }
        return $this->transactionVolumeLimit['value'];
    }

    /**
     * Sets Transaction Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     *
     * @maps TransactionVolumeLimit
     */
    public function setTransactionVolumeLimit(?float $transactionVolumeLimit): void
    {
        $this->transactionVolumeLimit['value'] = $transactionVolumeLimit;
    }

    /**
     * Unsets Transaction Volume Limit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     */
    public function unsetTransactionVolumeLimit(): void
    {
        $this->transactionVolumeLimit = [];
    }

    /**
     * Returns Daily Transaction Count.
     * Maximum number of transactions allowed on a card in a day.
     */
    public function getDailyTransactionCount(): ?float
    {
        if (count($this->dailyTransactionCount) == 0) {
            return null;
        }
        return $this->dailyTransactionCount['value'];
    }

    /**
     * Sets Daily Transaction Count.
     * Maximum number of transactions allowed on a card in a day.
     *
     * @maps DailyTransactionCount
     */
    public function setDailyTransactionCount(?float $dailyTransactionCount): void
    {
        $this->dailyTransactionCount['value'] = $dailyTransactionCount;
    }

    /**
     * Unsets Daily Transaction Count.
     * Maximum number of transactions allowed on a card in a day.
     */
    public function unsetDailyTransactionCount(): void
    {
        $this->dailyTransactionCount = [];
    }

    /**
     * Returns Weekly Transaction Count.
     * Maximum number of transactions allowed on a card in a week.
     */
    public function getWeeklyTransactionCount(): ?float
    {
        if (count($this->weeklyTransactionCount) == 0) {
            return null;
        }
        return $this->weeklyTransactionCount['value'];
    }

    /**
     * Sets Weekly Transaction Count.
     * Maximum number of transactions allowed on a card in a week.
     *
     * @maps WeeklyTransactionCount
     */
    public function setWeeklyTransactionCount(?float $weeklyTransactionCount): void
    {
        $this->weeklyTransactionCount['value'] = $weeklyTransactionCount;
    }

    /**
     * Unsets Weekly Transaction Count.
     * Maximum number of transactions allowed on a card in a week.
     */
    public function unsetWeeklyTransactionCount(): void
    {
        $this->weeklyTransactionCount = [];
    }

    /**
     * Returns Monthly Transaction Count.
     * Maximum number of transactions allowed on a card in a month.
     */
    public function getMonthlyTransactionCount(): ?float
    {
        if (count($this->monthlyTransactionCount) == 0) {
            return null;
        }
        return $this->monthlyTransactionCount['value'];
    }

    /**
     * Sets Monthly Transaction Count.
     * Maximum number of transactions allowed on a card in a month.
     *
     * @maps MonthlyTransactionCount
     */
    public function setMonthlyTransactionCount(?float $monthlyTransactionCount): void
    {
        $this->monthlyTransactionCount['value'] = $monthlyTransactionCount;
    }

    /**
     * Unsets Monthly Transaction Count.
     * Maximum number of transactions allowed on a card in a month.
     */
    public function unsetMonthlyTransactionCount(): void
    {
        $this->monthlyTransactionCount = [];
    }

    /**
     * Returns Annual Transaction Count.
     * Maximum number of transactions allowed on the card in a year.
     */
    public function getAnnualTransactionCount(): ?float
    {
        if (count($this->annualTransactionCount) == 0) {
            return null;
        }
        return $this->annualTransactionCount['value'];
    }

    /**
     * Sets Annual Transaction Count.
     * Maximum number of transactions allowed on the card in a year.
     *
     * @maps AnnualTransactionCount
     */
    public function setAnnualTransactionCount(?float $annualTransactionCount): void
    {
        $this->annualTransactionCount['value'] = $annualTransactionCount;
    }

    /**
     * Unsets Annual Transaction Count.
     * Maximum number of transactions allowed on the card in a year.
     */
    public function unsetAnnualTransactionCount(): void
    {
        $this->annualTransactionCount = [];
    }

    /**
     * Returns Life Time Transaction Count.
     * Maximum number of transactions allowed on the card in the card’s life time.
     */
    public function getLifeTimeTransactionCount(): ?float
    {
        if (count($this->lifeTimeTransactionCount) == 0) {
            return null;
        }
        return $this->lifeTimeTransactionCount['value'];
    }

    /**
     * Sets Life Time Transaction Count.
     * Maximum number of transactions allowed on the card in the card’s life time.
     *
     * @maps LifeTimeTransactionCount
     */
    public function setLifeTimeTransactionCount(?float $lifeTimeTransactionCount): void
    {
        $this->lifeTimeTransactionCount['value'] = $lifeTimeTransactionCount;
    }

    /**
     * Unsets Life Time Transaction Count.
     * Maximum number of transactions allowed on the card in the card’s life time.
     */
    public function unsetLifeTimeTransactionCount(): void
    {
        $this->lifeTimeTransactionCount = [];
    }

    /**
     * Returns Is Velocity Ceiling.
     * IsVelocityCeiling flag
     *
     * Note: When "True", the velocity defaults configured in MS DB will be considered as the Max Limits
     * for velocity changes. When ‘false’ max allowed limits will be 999999999999 for Type “Count” and
     * 9999999999.99 for Type ‘Value’.
     */
    public function getIsVelocityCeiling(): ?bool
    {
        return $this->isVelocityCeiling;
    }

    /**
     * Sets Is Velocity Ceiling.
     * IsVelocityCeiling flag
     *
     * Note: When "True", the velocity defaults configured in MS DB will be considered as the Max Limits
     * for velocity changes. When ‘false’ max allowed limits will be 999999999999 for Type “Count” and
     * 9999999999.99 for Type ‘Value’.
     *
     * @maps IsVelocityCeiling
     */
    public function setIsVelocityCeiling(?bool $isVelocityCeiling): void
    {
        $this->isVelocityCeiling = $isVelocityCeiling;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->level)) {
            $json['Level']                    = $this->level['value'];
        }
        if (!empty($this->dailySpendLimit)) {
            $json['DailySpendLimit']          = $this->dailySpendLimit['value'];
        }
        if (!empty($this->weeklySpendLimit)) {
            $json['WeeklySpendLimit']         = $this->weeklySpendLimit['value'];
        }
        if (!empty($this->monthlySpendLimit)) {
            $json['MonthlySpendLimit']        = $this->monthlySpendLimit['value'];
        }
        if (!empty($this->annualSpendLimit)) {
            $json['AnnualSpendLimit']         = $this->annualSpendLimit['value'];
        }
        if (!empty($this->lifeTimeSpendLimit)) {
            $json['LifeTimeSpendLimit']       = $this->lifeTimeSpendLimit['value'];
        }
        if (!empty($this->dailyVolumeLimit)) {
            $json['DailyVolumeLimit']         = $this->dailyVolumeLimit['value'];
        }
        if (!empty($this->weeklyVolumeLimit)) {
            $json['WeeklyVolumeLimit']        = $this->weeklyVolumeLimit['value'];
        }
        if (!empty($this->monthlyVolumeLimit)) {
            $json['MonthlyVolumeLimit']       = $this->monthlyVolumeLimit['value'];
        }
        if (!empty($this->annualVolumeLimit)) {
            $json['AnnualVolumeLimit']        = $this->annualVolumeLimit['value'];
        }
        if (!empty($this->lifeTimeVolumeLimit)) {
            $json['LifeTimeVolumeLimit']      = $this->lifeTimeVolumeLimit['value'];
        }
        if (!empty($this->transactionSpendLimit)) {
            $json['TransactionSpendLimit']    = $this->transactionSpendLimit['value'];
        }
        if (!empty($this->transactionVolumeLimit)) {
            $json['TransactionVolumeLimit']   = $this->transactionVolumeLimit['value'];
        }
        if (!empty($this->dailyTransactionCount)) {
            $json['DailyTransactionCount']    = $this->dailyTransactionCount['value'];
        }
        if (!empty($this->weeklyTransactionCount)) {
            $json['WeeklyTransactionCount']   = $this->weeklyTransactionCount['value'];
        }
        if (!empty($this->monthlyTransactionCount)) {
            $json['MonthlyTransactionCount']  = $this->monthlyTransactionCount['value'];
        }
        if (!empty($this->annualTransactionCount)) {
            $json['AnnualTransactionCount']   = $this->annualTransactionCount['value'];
        }
        if (!empty($this->lifeTimeTransactionCount)) {
            $json['LifeTimeTransactionCount'] = $this->lifeTimeTransactionCount['value'];
        }
        if (isset($this->isVelocityCeiling)) {
            $json['IsVelocityCeiling']        = $this->isVelocityCeiling;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

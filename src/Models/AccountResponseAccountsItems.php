<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class AccountResponseAccountsItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountFullName = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var bool|null
     */
    private $bestOfIndicator;

    /**
     * @var array
     */
    private $billingFrequencyType = [];

    /**
     * @var array
     */
    private $billingFrequencyTypeId = [];

    /**
     * @var array
     */
    private $billingRunFrequency = [];

    /**
     * @var array
     */
    private $billingRunFrequencyTypeId = [];

    /**
     * @var array
     */
    private $colCoCountryCode = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $day1Run = [];

    /**
     * @var array
     */
    private $day2Run = [];

    /**
     * @var array
     */
    private $day3Run = [];

    /**
     * @var array
     */
    private $day4Run = [];

    /**
     * @var array
     */
    private $frequencyType = [];

    /**
     * @var array
     */
    private $grossAmount = [];

    /**
     * @var array
     */
    private $internationalPOSLanguageCode = [];

    /**
     * @var array
     */
    private $internationalPOSLanguageID = [];

    /**
     * @var array
     */
    private $invoiceAccountID = [];

    /**
     * @var array
     */
    private $invoiceAccountNumber = [];

    /**
     * @var array
     */
    private $invoiceAccountShortName = [];

    /**
     * @var InvoiceDistributionMethod[]|null
     */
    private $invoiceDistributionMethods;

    /**
     * @var array
     */
    private $isInternational = [];

    /**
     * @var array
     */
    private $isInvoicePoint = [];

    /**
     * @var array
     */
    private $lastModifiedDate = [];

    /**
     * @var array
     */
    private $localCurrencyCode = [];

    /**
     * @var array
     */
    private $localCurrencySymbol = [];

    /**
     * @var array
     */
    private $localPOSLanguageCode = [];

    /**
     * @var array
     */
    private $localPOSLanguageID = [];

    /**
     * @var array
     */
    private $netAmount = [];

    /**
     * @var array
     */
    private $outstandingBalance = [];

    /**
     * @var array
     */
    private $paidAmount = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $statusReason = [];

    /**
     * @var array
     */
    private $totalActiveCardGroups = [];

    /**
     * @var array
     */
    private $totalActiveCards = [];

    /**
     * @var array
     */
    private $totalBlockedCards = [];

    /**
     * @var array
     */
    private $totalCancelledCards = [];

    /**
     * @var array
     */
    private $totalCards = [];

    /**
     * @var array
     */
    private $totalExpiredCards = [];

    /**
     * @var array
     */
    private $totalFraudCards = [];

    /**
     * @var array
     */
    private $totalNewCards = [];

    /**
     * @var array
     */
    private $totalRenewalPendingCards = [];

    /**
     * @var array
     */
    private $totalReplacedCards = [];

    /**
     * @var array
     */
    private $totalTemporaryBlockCardsByCustomer = [];

    /**
     * @var array
     */
    private $totalTemporaryBlockCardsByShell = [];

    /**
     * @var array
     */
    private $vATAmount = [];

    /**
     * @var array
     */
    private $isPartnerCard = [];

    /**
     * @var array
     */
    private $tollsCustomerId = [];

    /**
     * @var array
     */
    private $tollsColcoCountryTypeId = [];

    /**
     * @var CustomerContract[]|null
     */
    private $contracts;

    /**
     * @var array
     */
    private $isConsortiumMember = [];

    /**
     * Returns Account Full Name.
     * Account Full Name
     */
    public function getAccountFullName(): ?string
    {
        if (count($this->accountFullName) == 0) {
            return null;
        }
        return $this->accountFullName['value'];
    }

    /**
     * Sets Account Full Name.
     * Account Full Name
     *
     * @maps AccountFullName
     */
    public function setAccountFullName(?string $accountFullName): void
    {
        $this->accountFullName['value'] = $accountFullName;
    }

    /**
     * Unsets Account Full Name.
     * Account Full Name
     */
    public function unsetAccountFullName(): void
    {
        $this->accountFullName = [];
    }

    /**
     * Returns Account Id.
     * Account Id
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account Short Name
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account Short Name
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account Short Name
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Best of Indicator.
     * Best of Indicator of the Pricing customer/account configured.
     */
    public function getBestOfIndicator(): ?bool
    {
        return $this->bestOfIndicator;
    }

    /**
     * Sets Best of Indicator.
     * Best of Indicator of the Pricing customer/account configured.
     *
     * @maps BestOfIndicator
     */
    public function setBestOfIndicator(?bool $bestOfIndicator): void
    {
        $this->bestOfIndicator = $bestOfIndicator;
    }

    /**
     * Returns Billing Frequency Type.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for invoicing
     * in a bulling run
     *
     * E.g.:
     *
     * 1    Daily (all days)
     *
     * 2    Daily (only working days)
     *
     * 3    Weekly - Monday
     *
     * 4    Weekly – Tuesday
     *
     * Etc.
     */
    public function getBillingFrequencyType(): ?string
    {
        if (count($this->billingFrequencyType) == 0) {
            return null;
        }
        return $this->billingFrequencyType['value'];
    }

    /**
     * Sets Billing Frequency Type.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for invoicing
     * in a bulling run
     *
     * E.g.:
     *
     * 1    Daily (all days)
     *
     * 2    Daily (only working days)
     *
     * 3    Weekly - Monday
     *
     * 4    Weekly – Tuesday
     *
     * Etc.
     *
     * @maps BillingFrequencyType
     */
    public function setBillingFrequencyType(?string $billingFrequencyType): void
    {
        $this->billingFrequencyType['value'] = $billingFrequencyType;
    }

    /**
     * Unsets Billing Frequency Type.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for invoicing
     * in a bulling run
     *
     * E.g.:
     *
     * 1    Daily (all days)
     *
     * 2    Daily (only working days)
     *
     * 3    Weekly - Monday
     *
     * 4    Weekly – Tuesday
     *
     * Etc.
     */
    public function unsetBillingFrequencyType(): void
    {
        $this->billingFrequencyType = [];
    }

    /**
     * Returns Billing Frequency Type Id.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will be
     * considered for invoicing in a bulling run
     */
    public function getBillingFrequencyTypeId(): ?int
    {
        if (count($this->billingFrequencyTypeId) == 0) {
            return null;
        }
        return $this->billingFrequencyTypeId['value'];
    }

    /**
     * Sets Billing Frequency Type Id.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will be
     * considered for invoicing in a bulling run
     *
     * @maps BillingFrequencyTypeId
     */
    public function setBillingFrequencyTypeId(?int $billingFrequencyTypeId): void
    {
        $this->billingFrequencyTypeId['value'] = $billingFrequencyTypeId;
    }

    /**
     * Unsets Billing Frequency Type Id.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will be
     * considered for invoicing in a bulling run
     */
    public function unsetBillingFrequencyTypeId(): void
    {
        $this->billingFrequencyTypeId = [];
    }

    /**
     * Returns Billing Run Frequency.
     * Frequency at which the billing process is triggered. E.g.:
     *
     * 1    Daily (all days)
     *
     * 2    Daily (only working days)
     *
     * 3    Weekly - Monday
     *
     * 4    Weekly – Tuesday
     *
     * Etc.
     */
    public function getBillingRunFrequency(): ?string
    {
        if (count($this->billingRunFrequency) == 0) {
            return null;
        }
        return $this->billingRunFrequency['value'];
    }

    /**
     * Sets Billing Run Frequency.
     * Frequency at which the billing process is triggered. E.g.:
     *
     * 1    Daily (all days)
     *
     * 2    Daily (only working days)
     *
     * 3    Weekly - Monday
     *
     * 4    Weekly – Tuesday
     *
     * Etc.
     *
     * @maps BillingRunFrequency
     */
    public function setBillingRunFrequency(?string $billingRunFrequency): void
    {
        $this->billingRunFrequency['value'] = $billingRunFrequency;
    }

    /**
     * Unsets Billing Run Frequency.
     * Frequency at which the billing process is triggered. E.g.:
     *
     * 1    Daily (all days)
     *
     * 2    Daily (only working days)
     *
     * 3    Weekly - Monday
     *
     * 4    Weekly – Tuesday
     *
     * Etc.
     */
    public function unsetBillingRunFrequency(): void
    {
        $this->billingRunFrequency = [];
    }

    /**
     * Returns Billing Run Frequency Type Id.
     * Frequency at which the billing process is triggered.
     * E.g.: 1, 2, 3, etc.
     */
    public function getBillingRunFrequencyTypeId(): ?int
    {
        if (count($this->billingRunFrequencyTypeId) == 0) {
            return null;
        }
        return $this->billingRunFrequencyTypeId['value'];
    }

    /**
     * Sets Billing Run Frequency Type Id.
     * Frequency at which the billing process is triggered.
     * E.g.: 1, 2, 3, etc.
     *
     * @maps BillingRunFrequencyTypeId
     */
    public function setBillingRunFrequencyTypeId(?int $billingRunFrequencyTypeId): void
    {
        $this->billingRunFrequencyTypeId['value'] = $billingRunFrequencyTypeId;
    }

    /**
     * Unsets Billing Run Frequency Type Id.
     * Frequency at which the billing process is triggered.
     * E.g.: 1, 2, 3, etc.
     */
    public function unsetBillingRunFrequencyTypeId(): void
    {
        $this->billingRunFrequencyTypeId = [];
    }

    /**
     * Returns Col Co Country Code.
     * The 2-character ISO Code for the customer and card owning country.
     */
    public function getColCoCountryCode(): ?string
    {
        if (count($this->colCoCountryCode) == 0) {
            return null;
        }
        return $this->colCoCountryCode['value'];
    }

    /**
     * Sets Col Co Country Code.
     * The 2-character ISO Code for the customer and card owning country.
     *
     * @maps ColCoCountryCode
     */
    public function setColCoCountryCode(?string $colCoCountryCode): void
    {
        $this->colCoCountryCode['value'] = $colCoCountryCode;
    }

    /**
     * Unsets Col Co Country Code.
     * The 2-character ISO Code for the customer and card owning country.
     */
    public function unsetColCoCountryCode(): void
    {
        $this->colCoCountryCode = [];
    }

    /**
     * Returns Currency Code.
     * ISO code of customer currency.
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * ISO code of customer currency.
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * ISO code of customer currency.
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * €
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * €
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * €
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Day 1 Run.
     * The first day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function getDay1Run(): ?int
    {
        if (count($this->day1Run) == 0) {
            return null;
        }
        return $this->day1Run['value'];
    }

    /**
     * Sets Day 1 Run.
     * The first day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     *
     * @maps Day1Run
     */
    public function setDay1Run(?int $day1Run): void
    {
        $this->day1Run['value'] = $day1Run;
    }

    /**
     * Unsets Day 1 Run.
     * The first day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function unsetDay1Run(): void
    {
        $this->day1Run = [];
    }

    /**
     * Returns Day 2 Run.
     * The second day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function getDay2Run(): ?int
    {
        if (count($this->day2Run) == 0) {
            return null;
        }
        return $this->day2Run['value'];
    }

    /**
     * Sets Day 2 Run.
     * The second day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     *
     * @maps Day2Run
     */
    public function setDay2Run(?int $day2Run): void
    {
        $this->day2Run['value'] = $day2Run;
    }

    /**
     * Unsets Day 2 Run.
     * The second day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function unsetDay2Run(): void
    {
        $this->day2Run = [];
    }

    /**
     * Returns Day 3 Run.
     * The third day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function getDay3Run(): ?int
    {
        if (count($this->day3Run) == 0) {
            return null;
        }
        return $this->day3Run['value'];
    }

    /**
     * Sets Day 3 Run.
     * The third day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     *
     * @maps Day3Run
     */
    public function setDay3Run(?int $day3Run): void
    {
        $this->day3Run['value'] = $day3Run;
    }

    /**
     * Unsets Day 3 Run.
     * The third day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function unsetDay3Run(): void
    {
        $this->day3Run = [];
    }

    /**
     * Returns Day 4 Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function getDay4Run(): ?int
    {
        if (count($this->day4Run) == 0) {
            return null;
        }
        return $this->day4Run['value'];
    }

    /**
     * Sets Day 4 Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     *
     * @maps Day4Run
     */
    public function setDay4Run(?int $day4Run): void
    {
        $this->day4Run['value'] = $day4Run;
    }

    /**
     * Unsets Day 4 Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs configured
     * with in a single month
     */
    public function unsetDay4Run(): void
    {
        $this->day4Run = [];
    }

    /**
     * Returns Frequency Type.
     * Frequency type unit id & description
     * E.g.:
     * 1 - Daily
     * 2 - Weekly
     * 3 - Monthly
     * 4 - Invoicing
     * 6 - Calendar quarter
     */
    public function getFrequencyType(): ?string
    {
        if (count($this->frequencyType) == 0) {
            return null;
        }
        return $this->frequencyType['value'];
    }

    /**
     * Sets Frequency Type.
     * Frequency type unit id & description
     * E.g.:
     * 1 - Daily
     * 2 - Weekly
     * 3 - Monthly
     * 4 - Invoicing
     * 6 - Calendar quarter
     *
     * @maps FrequencyType
     */
    public function setFrequencyType(?string $frequencyType): void
    {
        $this->frequencyType['value'] = $frequencyType;
    }

    /**
     * Unsets Frequency Type.
     * Frequency type unit id & description
     * E.g.:
     * 1 - Daily
     * 2 - Weekly
     * 3 - Monthly
     * 4 - Invoicing
     * 6 - Calendar quarter
     */
    public function unsetFrequencyType(): void
    {
        $this->frequencyType = [];
    }

    /**
     * Returns Gross Amount.
     * Gross amount in customer currency.
     */
    public function getGrossAmount(): ?float
    {
        if (count($this->grossAmount) == 0) {
            return null;
        }
        return $this->grossAmount['value'];
    }

    /**
     * Sets Gross Amount.
     * Gross amount in customer currency.
     *
     * @maps GrossAmount
     */
    public function setGrossAmount(?float $grossAmount): void
    {
        $this->grossAmount['value'] = $grossAmount;
    }

    /**
     * Unsets Gross Amount.
     * Gross amount in customer currency.
     */
    public function unsetGrossAmount(): void
    {
        $this->grossAmount = [];
    }

    /**
     * Returns International POS Language Code.
     * POS international language code
     */
    public function getInternationalPOSLanguageCode(): ?string
    {
        if (count($this->internationalPOSLanguageCode) == 0) {
            return null;
        }
        return $this->internationalPOSLanguageCode['value'];
    }

    /**
     * Sets International POS Language Code.
     * POS international language code
     *
     * @maps InternationalPOSLanguageCode
     */
    public function setInternationalPOSLanguageCode(?string $internationalPOSLanguageCode): void
    {
        $this->internationalPOSLanguageCode['value'] = $internationalPOSLanguageCode;
    }

    /**
     * Unsets International POS Language Code.
     * POS international language code
     */
    public function unsetInternationalPOSLanguageCode(): void
    {
        $this->internationalPOSLanguageCode = [];
    }

    /**
     * Returns International POS Language ID.
     * POS international language ID
     */
    public function getInternationalPOSLanguageID(): ?int
    {
        if (count($this->internationalPOSLanguageID) == 0) {
            return null;
        }
        return $this->internationalPOSLanguageID['value'];
    }

    /**
     * Sets International POS Language ID.
     * POS international language ID
     *
     * @maps InternationalPOSLanguageID
     */
    public function setInternationalPOSLanguageID(?int $internationalPOSLanguageID): void
    {
        $this->internationalPOSLanguageID['value'] = $internationalPOSLanguageID;
    }

    /**
     * Unsets International POS Language ID.
     * POS international language ID
     */
    public function unsetInternationalPOSLanguageID(): void
    {
        $this->internationalPOSLanguageID = [];
    }

    /**
     * Returns Invoice Account ID.
     * The Account ID of the account on which the invoice is generated.
     */
    public function getInvoiceAccountID(): ?int
    {
        if (count($this->invoiceAccountID) == 0) {
            return null;
        }
        return $this->invoiceAccountID['value'];
    }

    /**
     * Sets Invoice Account ID.
     * The Account ID of the account on which the invoice is generated.
     *
     * @maps InvoiceAccountID
     */
    public function setInvoiceAccountID(?int $invoiceAccountID): void
    {
        $this->invoiceAccountID['value'] = $invoiceAccountID;
    }

    /**
     * Unsets Invoice Account ID.
     * The Account ID of the account on which the invoice is generated.
     */
    public function unsetInvoiceAccountID(): void
    {
        $this->invoiceAccountID = [];
    }

    /**
     * Returns Invoice Account Number.
     * The Account Number of the account on which the invoice is generated.
     */
    public function getInvoiceAccountNumber(): ?string
    {
        if (count($this->invoiceAccountNumber) == 0) {
            return null;
        }
        return $this->invoiceAccountNumber['value'];
    }

    /**
     * Sets Invoice Account Number.
     * The Account Number of the account on which the invoice is generated.
     *
     * @maps InvoiceAccountNumber
     */
    public function setInvoiceAccountNumber(?string $invoiceAccountNumber): void
    {
        $this->invoiceAccountNumber['value'] = $invoiceAccountNumber;
    }

    /**
     * Unsets Invoice Account Number.
     * The Account Number of the account on which the invoice is generated.
     */
    public function unsetInvoiceAccountNumber(): void
    {
        $this->invoiceAccountNumber = [];
    }

    /**
     * Returns Invoice Account Short Name.
     * The Account Short Name of the account on which the invoice is generated.
     */
    public function getInvoiceAccountShortName(): ?string
    {
        if (count($this->invoiceAccountShortName) == 0) {
            return null;
        }
        return $this->invoiceAccountShortName['value'];
    }

    /**
     * Sets Invoice Account Short Name.
     * The Account Short Name of the account on which the invoice is generated.
     *
     * @maps InvoiceAccountShortName
     */
    public function setInvoiceAccountShortName(?string $invoiceAccountShortName): void
    {
        $this->invoiceAccountShortName['value'] = $invoiceAccountShortName;
    }

    /**
     * Unsets Invoice Account Short Name.
     * The Account Short Name of the account on which the invoice is generated.
     */
    public function unsetInvoiceAccountShortName(): void
    {
        $this->invoiceAccountShortName = [];
    }

    /**
     * Returns Invoice Distribution Methods.
     *
     * @return InvoiceDistributionMethod[]|null
     */
    public function getInvoiceDistributionMethods(): ?array
    {
        return $this->invoiceDistributionMethods;
    }

    /**
     * Sets Invoice Distribution Methods.
     *
     * @maps InvoiceDistributionMethods
     *
     * @param InvoiceDistributionMethod[]|null $invoiceDistributionMethods
     */
    public function setInvoiceDistributionMethods(?array $invoiceDistributionMethods): void
    {
        $this->invoiceDistributionMethods = $invoiceDistributionMethods;
    }

    /**
     * Returns Is International.
     * Whether the account is international.
     */
    public function getIsInternational(): ?bool
    {
        if (count($this->isInternational) == 0) {
            return null;
        }
        return $this->isInternational['value'];
    }

    /**
     * Sets Is International.
     * Whether the account is international.
     *
     * @maps IsInternational
     */
    public function setIsInternational(?bool $isInternational): void
    {
        $this->isInternational['value'] = $isInternational;
    }

    /**
     * Unsets Is International.
     * Whether the account is international.
     */
    public function unsetIsInternational(): void
    {
        $this->isInternational = [];
    }

    /**
     * Returns Is Invoice Point.
     * Whether the account is an invoice point.
     */
    public function getIsInvoicePoint(): ?bool
    {
        if (count($this->isInvoicePoint) == 0) {
            return null;
        }
        return $this->isInvoicePoint['value'];
    }

    /**
     * Sets Is Invoice Point.
     * Whether the account is an invoice point.
     *
     * @maps IsInvoicePoint
     */
    public function setIsInvoicePoint(?bool $isInvoicePoint): void
    {
        $this->isInvoicePoint['value'] = $isInvoicePoint;
    }

    /**
     * Unsets Is Invoice Point.
     * Whether the account is an invoice point.
     */
    public function unsetIsInvoicePoint(): void
    {
        $this->isInvoicePoint = [];
    }

    /**
     * Returns Last Modified Date.
     * Account last modified date and time
     */
    public function getLastModifiedDate(): ?string
    {
        if (count($this->lastModifiedDate) == 0) {
            return null;
        }
        return $this->lastModifiedDate['value'];
    }

    /**
     * Sets Last Modified Date.
     * Account last modified date and time
     *
     * @maps LastModifiedDate
     */
    public function setLastModifiedDate(?string $lastModifiedDate): void
    {
        $this->lastModifiedDate['value'] = $lastModifiedDate;
    }

    /**
     * Unsets Last Modified Date.
     * Account last modified date and time
     */
    public function unsetLastModifiedDate(): void
    {
        $this->lastModifiedDate = [];
    }

    /**
     * Returns Local Currency Code.
     * ISO code of customer currency.
     */
    public function getLocalCurrencyCode(): ?string
    {
        if (count($this->localCurrencyCode) == 0) {
            return null;
        }
        return $this->localCurrencyCode['value'];
    }

    /**
     * Sets Local Currency Code.
     * ISO code of customer currency.
     *
     * @maps LocalCurrencyCode
     */
    public function setLocalCurrencyCode(?string $localCurrencyCode): void
    {
        $this->localCurrencyCode['value'] = $localCurrencyCode;
    }

    /**
     * Unsets Local Currency Code.
     * ISO code of customer currency.
     */
    public function unsetLocalCurrencyCode(): void
    {
        $this->localCurrencyCode = [];
    }

    /**
     * Returns Local Currency Symbol.
     * Customer currency symbol.
     */
    public function getLocalCurrencySymbol(): ?string
    {
        if (count($this->localCurrencySymbol) == 0) {
            return null;
        }
        return $this->localCurrencySymbol['value'];
    }

    /**
     * Sets Local Currency Symbol.
     * Customer currency symbol.
     *
     * @maps LocalCurrencySymbol
     */
    public function setLocalCurrencySymbol(?string $localCurrencySymbol): void
    {
        $this->localCurrencySymbol['value'] = $localCurrencySymbol;
    }

    /**
     * Unsets Local Currency Symbol.
     * Customer currency symbol.
     */
    public function unsetLocalCurrencySymbol(): void
    {
        $this->localCurrencySymbol = [];
    }

    /**
     * Returns Local POS Language Code.
     * POS local language code
     */
    public function getLocalPOSLanguageCode(): ?string
    {
        if (count($this->localPOSLanguageCode) == 0) {
            return null;
        }
        return $this->localPOSLanguageCode['value'];
    }

    /**
     * Sets Local POS Language Code.
     * POS local language code
     *
     * @maps LocalPOSLanguageCode
     */
    public function setLocalPOSLanguageCode(?string $localPOSLanguageCode): void
    {
        $this->localPOSLanguageCode['value'] = $localPOSLanguageCode;
    }

    /**
     * Unsets Local POS Language Code.
     * POS local language code
     */
    public function unsetLocalPOSLanguageCode(): void
    {
        $this->localPOSLanguageCode = [];
    }

    /**
     * Returns Local POS Language ID.
     * POS local language ID
     */
    public function getLocalPOSLanguageID(): ?int
    {
        if (count($this->localPOSLanguageID) == 0) {
            return null;
        }
        return $this->localPOSLanguageID['value'];
    }

    /**
     * Sets Local POS Language ID.
     * POS local language ID
     *
     * @maps LocalPOSLanguageID
     */
    public function setLocalPOSLanguageID(?int $localPOSLanguageID): void
    {
        $this->localPOSLanguageID['value'] = $localPOSLanguageID;
    }

    /**
     * Unsets Local POS Language ID.
     * POS local language ID
     */
    public function unsetLocalPOSLanguageID(): void
    {
        $this->localPOSLanguageID = [];
    }

    /**
     * Returns Net Amount.
     * Net amount in customer currency.
     */
    public function getNetAmount(): ?float
    {
        if (count($this->netAmount) == 0) {
            return null;
        }
        return $this->netAmount['value'];
    }

    /**
     * Sets Net Amount.
     * Net amount in customer currency.
     *
     * @maps NetAmount
     */
    public function setNetAmount(?float $netAmount): void
    {
        $this->netAmount['value'] = $netAmount;
    }

    /**
     * Unsets Net Amount.
     * Net amount in customer currency.
     */
    public function unsetNetAmount(): void
    {
        $this->netAmount = [];
    }

    /**
     * Returns Outstanding Balance.
     * Outstanding balance in customer currency.
     */
    public function getOutstandingBalance(): ?float
    {
        if (count($this->outstandingBalance) == 0) {
            return null;
        }
        return $this->outstandingBalance['value'];
    }

    /**
     * Sets Outstanding Balance.
     * Outstanding balance in customer currency.
     *
     * @maps OutstandingBalance
     */
    public function setOutstandingBalance(?float $outstandingBalance): void
    {
        $this->outstandingBalance['value'] = $outstandingBalance;
    }

    /**
     * Unsets Outstanding Balance.
     * Outstanding balance in customer currency.
     */
    public function unsetOutstandingBalance(): void
    {
        $this->outstandingBalance = [];
    }

    /**
     * Returns Paid Amount.
     * Amount paid in customer currency.
     */
    public function getPaidAmount(): ?float
    {
        if (count($this->paidAmount) == 0) {
            return null;
        }
        return $this->paidAmount['value'];
    }

    /**
     * Sets Paid Amount.
     * Amount paid in customer currency.
     *
     * @maps PaidAmount
     */
    public function setPaidAmount(?float $paidAmount): void
    {
        $this->paidAmount['value'] = $paidAmount;
    }

    /**
     * Unsets Paid Amount.
     * Amount paid in customer currency.
     */
    public function unsetPaidAmount(): void
    {
        $this->paidAmount = [];
    }

    /**
     * Returns Status.
     * Account Status
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Account Status
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Account Status
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Status Reason.
     * Account status change reason id-description for the Status Reason, if any
     */
    public function getStatusReason(): ?string
    {
        if (count($this->statusReason) == 0) {
            return null;
        }
        return $this->statusReason['value'];
    }

    /**
     * Sets Status Reason.
     * Account status change reason id-description for the Status Reason, if any
     *
     * @maps StatusReason
     */
    public function setStatusReason(?string $statusReason): void
    {
        $this->statusReason['value'] = $statusReason;
    }

    /**
     * Unsets Status Reason.
     * Account status change reason id-description for the Status Reason, if any
     */
    public function unsetStatusReason(): void
    {
        $this->statusReason = [];
    }

    /**
     * Returns Total Active Card Groups.
     * Total number of active card groups under the account
     */
    public function getTotalActiveCardGroups(): ?int
    {
        if (count($this->totalActiveCardGroups) == 0) {
            return null;
        }
        return $this->totalActiveCardGroups['value'];
    }

    /**
     * Sets Total Active Card Groups.
     * Total number of active card groups under the account
     *
     * @maps TotalActiveCardGroups
     */
    public function setTotalActiveCardGroups(?int $totalActiveCardGroups): void
    {
        $this->totalActiveCardGroups['value'] = $totalActiveCardGroups;
    }

    /**
     * Unsets Total Active Card Groups.
     * Total number of active card groups under the account
     */
    public function unsetTotalActiveCardGroups(): void
    {
        $this->totalActiveCardGroups = [];
    }

    /**
     * Returns Total Active Cards.
     * Total number of active cards under the account.
     */
    public function getTotalActiveCards(): ?int
    {
        if (count($this->totalActiveCards) == 0) {
            return null;
        }
        return $this->totalActiveCards['value'];
    }

    /**
     * Sets Total Active Cards.
     * Total number of active cards under the account.
     *
     * @maps TotalActiveCards
     */
    public function setTotalActiveCards(?int $totalActiveCards): void
    {
        $this->totalActiveCards['value'] = $totalActiveCards;
    }

    /**
     * Unsets Total Active Cards.
     * Total number of active cards under the account.
     */
    public function unsetTotalActiveCards(): void
    {
        $this->totalActiveCards = [];
    }

    /**
     * Returns Total Blocked Cards.
     * Total number of cards under the account that are permanently blocked
     */
    public function getTotalBlockedCards(): ?int
    {
        if (count($this->totalBlockedCards) == 0) {
            return null;
        }
        return $this->totalBlockedCards['value'];
    }

    /**
     * Sets Total Blocked Cards.
     * Total number of cards under the account that are permanently blocked
     *
     * @maps TotalBlockedCards
     */
    public function setTotalBlockedCards(?int $totalBlockedCards): void
    {
        $this->totalBlockedCards['value'] = $totalBlockedCards;
    }

    /**
     * Unsets Total Blocked Cards.
     * Total number of cards under the account that are permanently blocked
     */
    public function unsetTotalBlockedCards(): void
    {
        $this->totalBlockedCards = [];
    }

    /**
     * Returns Total Cancelled Cards.
     * Total number of cards under the account that are cancelled
     */
    public function getTotalCancelledCards(): ?int
    {
        if (count($this->totalCancelledCards) == 0) {
            return null;
        }
        return $this->totalCancelledCards['value'];
    }

    /**
     * Sets Total Cancelled Cards.
     * Total number of cards under the account that are cancelled
     *
     * @maps TotalCancelledCards
     */
    public function setTotalCancelledCards(?int $totalCancelledCards): void
    {
        $this->totalCancelledCards['value'] = $totalCancelledCards;
    }

    /**
     * Unsets Total Cancelled Cards.
     * Total number of cards under the account that are cancelled
     */
    public function unsetTotalCancelledCards(): void
    {
        $this->totalCancelledCards = [];
    }

    /**
     * Returns Total Cards.
     * Total number of cards under the account.
     */
    public function getTotalCards(): ?int
    {
        if (count($this->totalCards) == 0) {
            return null;
        }
        return $this->totalCards['value'];
    }

    /**
     * Sets Total Cards.
     * Total number of cards under the account.
     *
     * @maps TotalCards
     */
    public function setTotalCards(?int $totalCards): void
    {
        $this->totalCards['value'] = $totalCards;
    }

    /**
     * Unsets Total Cards.
     * Total number of cards under the account.
     */
    public function unsetTotalCards(): void
    {
        $this->totalCards = [];
    }

    /**
     * Returns Total Expired Cards.
     * Total number of expired cards under the account.
     */
    public function getTotalExpiredCards(): ?int
    {
        if (count($this->totalExpiredCards) == 0) {
            return null;
        }
        return $this->totalExpiredCards['value'];
    }

    /**
     * Sets Total Expired Cards.
     * Total number of expired cards under the account.
     *
     * @maps TotalExpiredCards
     */
    public function setTotalExpiredCards(?int $totalExpiredCards): void
    {
        $this->totalExpiredCards['value'] = $totalExpiredCards;
    }

    /**
     * Unsets Total Expired Cards.
     * Total number of expired cards under the account.
     */
    public function unsetTotalExpiredCards(): void
    {
        $this->totalExpiredCards = [];
    }

    /**
     * Returns Total Fraud Cards.
     * Total number of cards in Fraud status.
     */
    public function getTotalFraudCards(): ?int
    {
        if (count($this->totalFraudCards) == 0) {
            return null;
        }
        return $this->totalFraudCards['value'];
    }

    /**
     * Sets Total Fraud Cards.
     * Total number of cards in Fraud status.
     *
     * @maps TotalFraudCards
     */
    public function setTotalFraudCards(?int $totalFraudCards): void
    {
        $this->totalFraudCards['value'] = $totalFraudCards;
    }

    /**
     * Unsets Total Fraud Cards.
     * Total number of cards in Fraud status.
     */
    public function unsetTotalFraudCards(): void
    {
        $this->totalFraudCards = [];
    }

    /**
     * Returns Total New Cards.
     * Total number of cards in “New” status.
     */
    public function getTotalNewCards(): ?int
    {
        if (count($this->totalNewCards) == 0) {
            return null;
        }
        return $this->totalNewCards['value'];
    }

    /**
     * Sets Total New Cards.
     * Total number of cards in “New” status.
     *
     * @maps TotalNewCards
     */
    public function setTotalNewCards(?int $totalNewCards): void
    {
        $this->totalNewCards['value'] = $totalNewCards;
    }

    /**
     * Unsets Total New Cards.
     * Total number of cards in “New” status.
     */
    public function unsetTotalNewCards(): void
    {
        $this->totalNewCards = [];
    }

    /**
     * Returns Total Renewal Pending Cards.
     * Total number of Renewal Pending account under the payer
     */
    public function getTotalRenewalPendingCards(): ?int
    {
        if (count($this->totalRenewalPendingCards) == 0) {
            return null;
        }
        return $this->totalRenewalPendingCards['value'];
    }

    /**
     * Sets Total Renewal Pending Cards.
     * Total number of Renewal Pending account under the payer
     *
     * @maps TotalRenewalPendingCards
     */
    public function setTotalRenewalPendingCards(?int $totalRenewalPendingCards): void
    {
        $this->totalRenewalPendingCards['value'] = $totalRenewalPendingCards;
    }

    /**
     * Unsets Total Renewal Pending Cards.
     * Total number of Renewal Pending account under the payer
     */
    public function unsetTotalRenewalPendingCards(): void
    {
        $this->totalRenewalPendingCards = [];
    }

    /**
     * Returns Total Replaced Cards.
     * Total number of cards under the account with status as “Replaced”
     */
    public function getTotalReplacedCards(): ?int
    {
        if (count($this->totalReplacedCards) == 0) {
            return null;
        }
        return $this->totalReplacedCards['value'];
    }

    /**
     * Sets Total Replaced Cards.
     * Total number of cards under the account with status as “Replaced”
     *
     * @maps TotalReplacedCards
     */
    public function setTotalReplacedCards(?int $totalReplacedCards): void
    {
        $this->totalReplacedCards['value'] = $totalReplacedCards;
    }

    /**
     * Unsets Total Replaced Cards.
     * Total number of cards under the account with status as “Replaced”
     */
    public function unsetTotalReplacedCards(): void
    {
        $this->totalReplacedCards = [];
    }

    /**
     * Returns Total Temporary Block Cards by Customer.
     * Total number of cards under the account that are temporarily blocked by customer.
     */
    public function getTotalTemporaryBlockCardsByCustomer(): ?int
    {
        if (count($this->totalTemporaryBlockCardsByCustomer) == 0) {
            return null;
        }
        return $this->totalTemporaryBlockCardsByCustomer['value'];
    }

    /**
     * Sets Total Temporary Block Cards by Customer.
     * Total number of cards under the account that are temporarily blocked by customer.
     *
     * @maps TotalTemporaryBlockCardsByCustomer
     */
    public function setTotalTemporaryBlockCardsByCustomer(?int $totalTemporaryBlockCardsByCustomer): void
    {
        $this->totalTemporaryBlockCardsByCustomer['value'] = $totalTemporaryBlockCardsByCustomer;
    }

    /**
     * Unsets Total Temporary Block Cards by Customer.
     * Total number of cards under the account that are temporarily blocked by customer.
     */
    public function unsetTotalTemporaryBlockCardsByCustomer(): void
    {
        $this->totalTemporaryBlockCardsByCustomer = [];
    }

    /**
     * Returns Total Temporary Block Cards by Shell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     */
    public function getTotalTemporaryBlockCardsByShell(): ?int
    {
        if (count($this->totalTemporaryBlockCardsByShell) == 0) {
            return null;
        }
        return $this->totalTemporaryBlockCardsByShell['value'];
    }

    /**
     * Sets Total Temporary Block Cards by Shell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     *
     * @maps TotalTemporaryBlockCardsByShell
     */
    public function setTotalTemporaryBlockCardsByShell(?int $totalTemporaryBlockCardsByShell): void
    {
        $this->totalTemporaryBlockCardsByShell['value'] = $totalTemporaryBlockCardsByShell;
    }

    /**
     * Unsets Total Temporary Block Cards by Shell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     */
    public function unsetTotalTemporaryBlockCardsByShell(): void
    {
        $this->totalTemporaryBlockCardsByShell = [];
    }

    /**
     * Returns V at Amount.
     * VAT amount in customer currency.
     */
    public function getVATAmount(): ?float
    {
        if (count($this->vATAmount) == 0) {
            return null;
        }
        return $this->vATAmount['value'];
    }

    /**
     * Sets V at Amount.
     * VAT amount in customer currency.
     *
     * @maps VATAmount
     */
    public function setVATAmount(?float $vATAmount): void
    {
        $this->vATAmount['value'] = $vATAmount;
    }

    /**
     * Unsets V at Amount.
     * VAT amount in customer currency.
     */
    public function unsetVATAmount(): void
    {
        $this->vATAmount = [];
    }

    /**
     * Returns Is Partner Card.
     * The account / sub-account is partner card account or not.
     * Possible values (1= Non-PC account, 2= PC account, 3= PC Payer with Card Types, 4= PC Payer)
     * Note: A partner card account is assumed to have only partner card card-types associated
     */
    public function getIsPartnerCard(): ?int
    {
        if (count($this->isPartnerCard) == 0) {
            return null;
        }
        return $this->isPartnerCard['value'];
    }

    /**
     * Sets Is Partner Card.
     * The account / sub-account is partner card account or not.
     * Possible values (1= Non-PC account, 2= PC account, 3= PC Payer with Card Types, 4= PC Payer)
     * Note: A partner card account is assumed to have only partner card card-types associated
     *
     * @maps IsPartnerCard
     */
    public function setIsPartnerCard(?int $isPartnerCard): void
    {
        $this->isPartnerCard['value'] = $isPartnerCard;
    }

    /**
     * Unsets Is Partner Card.
     * The account / sub-account is partner card account or not.
     * Possible values (1= Non-PC account, 2= PC account, 3= PC Payer with Card Types, 4= PC Payer)
     * Note: A partner card account is assumed to have only partner card card-types associated
     */
    public function unsetIsPartnerCard(): void
    {
        $this->isPartnerCard = [];
    }

    /**
     * Returns Tolls Customer Id.
     * Customer id in e-TM system
     */
    public function getTollsCustomerId(): ?string
    {
        if (count($this->tollsCustomerId) == 0) {
            return null;
        }
        return $this->tollsCustomerId['value'];
    }

    /**
     * Sets Tolls Customer Id.
     * Customer id in e-TM system
     *
     * @maps TollsCustomerId
     */
    public function setTollsCustomerId(?string $tollsCustomerId): void
    {
        $this->tollsCustomerId['value'] = $tollsCustomerId;
    }

    /**
     * Unsets Tolls Customer Id.
     * Customer id in e-TM system
     */
    public function unsetTollsCustomerId(): void
    {
        $this->tollsCustomerId = [];
    }

    /**
     * Returns Tolls Colco Country Type Id.
     * Colco country type id in e-TM system
     */
    public function getTollsColcoCountryTypeId(): ?string
    {
        if (count($this->tollsColcoCountryTypeId) == 0) {
            return null;
        }
        return $this->tollsColcoCountryTypeId['value'];
    }

    /**
     * Sets Tolls Colco Country Type Id.
     * Colco country type id in e-TM system
     *
     * @maps TollsColcoCountryTypeId
     */
    public function setTollsColcoCountryTypeId(?string $tollsColcoCountryTypeId): void
    {
        $this->tollsColcoCountryTypeId['value'] = $tollsColcoCountryTypeId;
    }

    /**
     * Unsets Tolls Colco Country Type Id.
     * Colco country type id in e-TM system
     */
    public function unsetTollsColcoCountryTypeId(): void
    {
        $this->tollsColcoCountryTypeId = [];
    }

    /**
     * Returns Contracts.
     *
     * @return CustomerContract[]|null
     */
    public function getContracts(): ?array
    {
        return $this->contracts;
    }

    /**
     * Sets Contracts.
     *
     * @maps Contracts
     *
     * @param CustomerContract[]|null $contracts
     */
    public function setContracts(?array $contracts): void
    {
        $this->contracts = $contracts;
    }

    /**
     * Returns Is Consortium Member.
     * true
     */
    public function getIsConsortiumMember(): ?string
    {
        if (count($this->isConsortiumMember) == 0) {
            return null;
        }
        return $this->isConsortiumMember['value'];
    }

    /**
     * Sets Is Consortium Member.
     * true
     *
     * @maps IsConsortiumMember
     */
    public function setIsConsortiumMember(?string $isConsortiumMember): void
    {
        $this->isConsortiumMember['value'] = $isConsortiumMember;
    }

    /**
     * Unsets Is Consortium Member.
     * true
     */
    public function unsetIsConsortiumMember(): void
    {
        $this->isConsortiumMember = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountFullName)) {
            $json['AccountFullName']                    = $this->accountFullName['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                          = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                      = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']                   = $this->accountShortName['value'];
        }
        if (isset($this->bestOfIndicator)) {
            $json['BestOfIndicator']                    = $this->bestOfIndicator;
        }
        if (!empty($this->billingFrequencyType)) {
            $json['BillingFrequencyType']               = $this->billingFrequencyType['value'];
        }
        if (!empty($this->billingFrequencyTypeId)) {
            $json['BillingFrequencyTypeId']             = $this->billingFrequencyTypeId['value'];
        }
        if (!empty($this->billingRunFrequency)) {
            $json['BillingRunFrequency']                = $this->billingRunFrequency['value'];
        }
        if (!empty($this->billingRunFrequencyTypeId)) {
            $json['BillingRunFrequencyTypeId']          = $this->billingRunFrequencyTypeId['value'];
        }
        if (!empty($this->colCoCountryCode)) {
            $json['ColCoCountryCode']                   = $this->colCoCountryCode['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']                       = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']                     = $this->currencySymbol['value'];
        }
        if (!empty($this->day1Run)) {
            $json['Day1Run']                            = $this->day1Run['value'];
        }
        if (!empty($this->day2Run)) {
            $json['Day2Run']                            = $this->day2Run['value'];
        }
        if (!empty($this->day3Run)) {
            $json['Day3Run']                            = $this->day3Run['value'];
        }
        if (!empty($this->day4Run)) {
            $json['Day4Run']                            = $this->day4Run['value'];
        }
        if (!empty($this->frequencyType)) {
            $json['FrequencyType']                      = $this->frequencyType['value'];
        }
        if (!empty($this->grossAmount)) {
            $json['GrossAmount']                        = $this->grossAmount['value'];
        }
        if (!empty($this->internationalPOSLanguageCode)) {
            $json['InternationalPOSLanguageCode']       = $this->internationalPOSLanguageCode['value'];
        }
        if (!empty($this->internationalPOSLanguageID)) {
            $json['InternationalPOSLanguageID']         = $this->internationalPOSLanguageID['value'];
        }
        if (!empty($this->invoiceAccountID)) {
            $json['InvoiceAccountID']                   = $this->invoiceAccountID['value'];
        }
        if (!empty($this->invoiceAccountNumber)) {
            $json['InvoiceAccountNumber']               = $this->invoiceAccountNumber['value'];
        }
        if (!empty($this->invoiceAccountShortName)) {
            $json['InvoiceAccountShortName']            = $this->invoiceAccountShortName['value'];
        }
        if (isset($this->invoiceDistributionMethods)) {
            $json['InvoiceDistributionMethods']         = $this->invoiceDistributionMethods;
        }
        if (!empty($this->isInternational)) {
            $json['IsInternational']                    = $this->isInternational['value'];
        }
        if (!empty($this->isInvoicePoint)) {
            $json['IsInvoicePoint']                     = $this->isInvoicePoint['value'];
        }
        if (!empty($this->lastModifiedDate)) {
            $json['LastModifiedDate']                   = $this->lastModifiedDate['value'];
        }
        if (!empty($this->localCurrencyCode)) {
            $json['LocalCurrencyCode']                  = $this->localCurrencyCode['value'];
        }
        if (!empty($this->localCurrencySymbol)) {
            $json['LocalCurrencySymbol']                = $this->localCurrencySymbol['value'];
        }
        if (!empty($this->localPOSLanguageCode)) {
            $json['LocalPOSLanguageCode']               = $this->localPOSLanguageCode['value'];
        }
        if (!empty($this->localPOSLanguageID)) {
            $json['LocalPOSLanguageID']                 = $this->localPOSLanguageID['value'];
        }
        if (!empty($this->netAmount)) {
            $json['NetAmount']                          = $this->netAmount['value'];
        }
        if (!empty($this->outstandingBalance)) {
            $json['OutstandingBalance']                 = $this->outstandingBalance['value'];
        }
        if (!empty($this->paidAmount)) {
            $json['PaidAmount']                         = $this->paidAmount['value'];
        }
        if (!empty($this->status)) {
            $json['Status']                             = $this->status['value'];
        }
        if (!empty($this->statusReason)) {
            $json['StatusReason']                       = $this->statusReason['value'];
        }
        if (!empty($this->totalActiveCardGroups)) {
            $json['TotalActiveCardGroups']              = $this->totalActiveCardGroups['value'];
        }
        if (!empty($this->totalActiveCards)) {
            $json['TotalActiveCards']                   = $this->totalActiveCards['value'];
        }
        if (!empty($this->totalBlockedCards)) {
            $json['TotalBlockedCards']                  = $this->totalBlockedCards['value'];
        }
        if (!empty($this->totalCancelledCards)) {
            $json['TotalCancelledCards']                = $this->totalCancelledCards['value'];
        }
        if (!empty($this->totalCards)) {
            $json['TotalCards']                         = $this->totalCards['value'];
        }
        if (!empty($this->totalExpiredCards)) {
            $json['TotalExpiredCards']                  = $this->totalExpiredCards['value'];
        }
        if (!empty($this->totalFraudCards)) {
            $json['TotalFraudCards']                    = $this->totalFraudCards['value'];
        }
        if (!empty($this->totalNewCards)) {
            $json['TotalNewCards']                      = $this->totalNewCards['value'];
        }
        if (!empty($this->totalRenewalPendingCards)) {
            $json['TotalRenewalPendingCards']           = $this->totalRenewalPendingCards['value'];
        }
        if (!empty($this->totalReplacedCards)) {
            $json['TotalReplacedCards']                 = $this->totalReplacedCards['value'];
        }
        if (!empty($this->totalTemporaryBlockCardsByCustomer)) {
            $json['TotalTemporaryBlockCardsByCustomer'] = $this->totalTemporaryBlockCardsByCustomer['value'];
        }
        if (!empty($this->totalTemporaryBlockCardsByShell)) {
            $json['TotalTemporaryBlockCardsByShell']    = $this->totalTemporaryBlockCardsByShell['value'];
        }
        if (!empty($this->vATAmount)) {
            $json['VATAmount']                          = $this->vATAmount['value'];
        }
        if (!empty($this->isPartnerCard)) {
            $json['IsPartnerCard']                      = $this->isPartnerCard['value'];
        }
        if (!empty($this->tollsCustomerId)) {
            $json['TollsCustomerId']                    = $this->tollsCustomerId['value'];
        }
        if (!empty($this->tollsColcoCountryTypeId)) {
            $json['TollsColcoCountryTypeId']            = $this->tollsColcoCountryTypeId['value'];
        }
        if (isset($this->contracts)) {
            $json['Contracts']                          = $this->contracts;
        }
        if (!empty($this->isConsortiumMember)) {
            $json['IsConsortiumMember']                 = $this->isConsortiumMember['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class LastStatementOfAccount2 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $amountDue = [];

    /**
     * @var array
     */
    private $amountNotOverdue = [];

    /**
     * @var array
     */
    private $amountOverdue = [];

    /**
     * @var array
     */
    private $creditLimit = [];

    /**
     * @var array
     */
    private $creditLimitCurrencyCode = [];

    /**
     * @var array
     */
    private $creditLimitCurrencySymbol = [];

    /**
     * @var array
     */
    private $creditLimitInCustomerCurrency = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $lastPaymentCurrencyCode = [];

    /**
     * @var array
     */
    private $lastPaymentCurrencySymbol = [];

    /**
     * @var array
     */
    private $lastPaymentDate = [];

    /**
     * @var array
     */
    private $lastPaymentValue = [];

    /**
     * @var array
     */
    private $outstandingBalance = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $paymentDueDate = [];

    /**
     * @var array
     */
    private $paymentMethod = [];

    /**
     * @var array
     */
    private $paymentMethodId = [];

    /**
     * @var array
     */
    private $paymentTerms = [];

    /**
     * @var array
     */
    private $paymentTermsId = [];

    /**
     * @var array
     */
    private $soAReferenceNumber = [];

    /**
     * @var array
     */
    private $statementDate = [];

    /**
     * @var array
     */
    private $statementOfAccountId = [];

    /**
     * @var array
     */
    private $totalBillingDocuments = [];

    /**
     * @var array
     */
    private $totalSummaryBillingDocuments = [];

    /**
     * @var array
     */
    private $unallocatedPayment = [];

    /**
     * Returns Amount Due.
     * Invoiced amount and due for payment.
     */
    public function getAmountDue(): ?float
    {
        if (count($this->amountDue) == 0) {
            return null;
        }
        return $this->amountDue['value'];
    }

    /**
     * Sets Amount Due.
     * Invoiced amount and due for payment.
     *
     * @maps AmountDue
     */
    public function setAmountDue(?float $amountDue): void
    {
        $this->amountDue['value'] = $amountDue;
    }

    /**
     * Unsets Amount Due.
     * Invoiced amount and due for payment.
     */
    public function unsetAmountDue(): void
    {
        $this->amountDue = [];
    }

    /**
     * Returns Amount Not Overdue.
     * Invoiced amount and not overdue for payment.
     */
    public function getAmountNotOverdue(): ?float
    {
        if (count($this->amountNotOverdue) == 0) {
            return null;
        }
        return $this->amountNotOverdue['value'];
    }

    /**
     * Sets Amount Not Overdue.
     * Invoiced amount and not overdue for payment.
     *
     * @maps AmountNotOverdue
     */
    public function setAmountNotOverdue(?float $amountNotOverdue): void
    {
        $this->amountNotOverdue['value'] = $amountNotOverdue;
    }

    /**
     * Unsets Amount Not Overdue.
     * Invoiced amount and not overdue for payment.
     */
    public function unsetAmountNotOverdue(): void
    {
        $this->amountNotOverdue = [];
    }

    /**
     * Returns Amount Overdue.
     * Invoiced amount and overdue for payment.
     */
    public function getAmountOverdue(): ?float
    {
        if (count($this->amountOverdue) == 0) {
            return null;
        }
        return $this->amountOverdue['value'];
    }

    /**
     * Sets Amount Overdue.
     * Invoiced amount and overdue for payment.
     *
     * @maps AmountOverdue
     */
    public function setAmountOverdue(?float $amountOverdue): void
    {
        $this->amountOverdue['value'] = $amountOverdue;
    }

    /**
     * Unsets Amount Overdue.
     * Invoiced amount and overdue for payment.
     */
    public function unsetAmountOverdue(): void
    {
        $this->amountOverdue = [];
    }

    /**
     * Returns Credit Limit.
     * Credit limit.
     */
    public function getCreditLimit(): ?int
    {
        if (count($this->creditLimit) == 0) {
            return null;
        }
        return $this->creditLimit['value'];
    }

    /**
     * Sets Credit Limit.
     * Credit limit.
     *
     * @maps CreditLimit
     */
    public function setCreditLimit(?int $creditLimit): void
    {
        $this->creditLimit['value'] = $creditLimit;
    }

    /**
     * Unsets Credit Limit.
     * Credit limit.
     */
    public function unsetCreditLimit(): void
    {
        $this->creditLimit = [];
    }

    /**
     * Returns Credit Limit Currency Code.
     * ISO code of the credit limit’s currency.
     * Example: EUR
     */
    public function getCreditLimitCurrencyCode(): ?string
    {
        if (count($this->creditLimitCurrencyCode) == 0) {
            return null;
        }
        return $this->creditLimitCurrencyCode['value'];
    }

    /**
     * Sets Credit Limit Currency Code.
     * ISO code of the credit limit’s currency.
     * Example: EUR
     *
     * @maps CreditLimitCurrencyCode
     */
    public function setCreditLimitCurrencyCode(?string $creditLimitCurrencyCode): void
    {
        $this->creditLimitCurrencyCode['value'] = $creditLimitCurrencyCode;
    }

    /**
     * Unsets Credit Limit Currency Code.
     * ISO code of the credit limit’s currency.
     * Example: EUR
     */
    public function unsetCreditLimitCurrencyCode(): void
    {
        $this->creditLimitCurrencyCode = [];
    }

    /**
     * Returns Credit Limit Currency Symbol.
     * Symbol of the credit limit’s currency.
     * Example: €
     */
    public function getCreditLimitCurrencySymbol(): ?string
    {
        if (count($this->creditLimitCurrencySymbol) == 0) {
            return null;
        }
        return $this->creditLimitCurrencySymbol['value'];
    }

    /**
     * Sets Credit Limit Currency Symbol.
     * Symbol of the credit limit’s currency.
     * Example: €
     *
     * @maps CreditLimitCurrencySymbol
     */
    public function setCreditLimitCurrencySymbol(?string $creditLimitCurrencySymbol): void
    {
        $this->creditLimitCurrencySymbol['value'] = $creditLimitCurrencySymbol;
    }

    /**
     * Unsets Credit Limit Currency Symbol.
     * Symbol of the credit limit’s currency.
     * Example: €
     */
    public function unsetCreditLimitCurrencySymbol(): void
    {
        $this->creditLimitCurrencySymbol = [];
    }

    /**
     * Returns Credit Limit in Customer Currency.
     * Credit limit in Customer currency.
     * **Note**: For currency details refer the parameters CurrencyCode & CurrencySymbol in the
     * StatementOfAccount response.
     */
    public function getCreditLimitInCustomerCurrency(): ?float
    {
        if (count($this->creditLimitInCustomerCurrency) == 0) {
            return null;
        }
        return $this->creditLimitInCustomerCurrency['value'];
    }

    /**
     * Sets Credit Limit in Customer Currency.
     * Credit limit in Customer currency.
     * **Note**: For currency details refer the parameters CurrencyCode & CurrencySymbol in the
     * StatementOfAccount response.
     *
     * @maps CreditLimitInCustomerCurrency
     */
    public function setCreditLimitInCustomerCurrency(?float $creditLimitInCustomerCurrency): void
    {
        $this->creditLimitInCustomerCurrency['value'] = $creditLimitInCustomerCurrency;
    }

    /**
     * Unsets Credit Limit in Customer Currency.
     * Credit limit in Customer currency.
     * **Note**: For currency details refer the parameters CurrencyCode & CurrencySymbol in the
     * StatementOfAccount response.
     */
    public function unsetCreditLimitInCustomerCurrency(): void
    {
        $this->creditLimitInCustomerCurrency = [];
    }

    /**
     * Returns Currency Code.
     * ISO code of SOA currency.
     *
     * Example: EUR
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * ISO code of SOA currency.
     *
     * Example: EUR
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * ISO code of SOA currency.
     *
     * Example: EUR
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Symbol of SOA currency.
     *
     * Example: €
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Symbol of SOA currency.
     *
     * Example: €
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Symbol of SOA currency.
     *
     * Example: €
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Last Payment Currency Code.
     * ISO code of Last Payment currency.
     *
     * Example: EUR
     */
    public function getLastPaymentCurrencyCode(): ?string
    {
        if (count($this->lastPaymentCurrencyCode) == 0) {
            return null;
        }
        return $this->lastPaymentCurrencyCode['value'];
    }

    /**
     * Sets Last Payment Currency Code.
     * ISO code of Last Payment currency.
     *
     * Example: EUR
     *
     * @maps LastPaymentCurrencyCode
     */
    public function setLastPaymentCurrencyCode(?string $lastPaymentCurrencyCode): void
    {
        $this->lastPaymentCurrencyCode['value'] = $lastPaymentCurrencyCode;
    }

    /**
     * Unsets Last Payment Currency Code.
     * ISO code of Last Payment currency.
     *
     * Example: EUR
     */
    public function unsetLastPaymentCurrencyCode(): void
    {
        $this->lastPaymentCurrencyCode = [];
    }

    /**
     * Returns Last Payment Currency Symbol.
     * Symbol of Last Payment currency.
     *
     * Example: €
     */
    public function getLastPaymentCurrencySymbol(): ?string
    {
        if (count($this->lastPaymentCurrencySymbol) == 0) {
            return null;
        }
        return $this->lastPaymentCurrencySymbol['value'];
    }

    /**
     * Sets Last Payment Currency Symbol.
     * Symbol of Last Payment currency.
     *
     * Example: €
     *
     * @maps LastPaymentCurrencySymbol
     */
    public function setLastPaymentCurrencySymbol(?string $lastPaymentCurrencySymbol): void
    {
        $this->lastPaymentCurrencySymbol['value'] = $lastPaymentCurrencySymbol;
    }

    /**
     * Unsets Last Payment Currency Symbol.
     * Symbol of Last Payment currency.
     *
     * Example: €
     */
    public function unsetLastPaymentCurrencySymbol(): void
    {
        $this->lastPaymentCurrencySymbol = [];
    }

    /**
     * Returns Last Payment Date.
     * Last payment date. Format: yyyyMMdd
     */
    public function getLastPaymentDate(): ?string
    {
        if (count($this->lastPaymentDate) == 0) {
            return null;
        }
        return $this->lastPaymentDate['value'];
    }

    /**
     * Sets Last Payment Date.
     * Last payment date. Format: yyyyMMdd
     *
     * @maps LastPaymentDate
     */
    public function setLastPaymentDate(?string $lastPaymentDate): void
    {
        $this->lastPaymentDate['value'] = $lastPaymentDate;
    }

    /**
     * Unsets Last Payment Date.
     * Last payment date. Format: yyyyMMdd
     */
    public function unsetLastPaymentDate(): void
    {
        $this->lastPaymentDate = [];
    }

    /**
     * Returns Last Payment Value.
     * Last payment value.
     */
    public function getLastPaymentValue(): ?float
    {
        if (count($this->lastPaymentValue) == 0) {
            return null;
        }
        return $this->lastPaymentValue['value'];
    }

    /**
     * Sets Last Payment Value.
     * Last payment value.
     *
     * @maps LastPaymentValue
     */
    public function setLastPaymentValue(?float $lastPaymentValue): void
    {
        $this->lastPaymentValue['value'] = $lastPaymentValue;
    }

    /**
     * Unsets Last Payment Value.
     * Last payment value.
     */
    public function unsetLastPaymentValue(): void
    {
        $this->lastPaymentValue = [];
    }

    /**
     * Returns Outstanding Balance.
     * Current outstanding balance amount.
     */
    public function getOutstandingBalance(): ?float
    {
        if (count($this->outstandingBalance) == 0) {
            return null;
        }
        return $this->outstandingBalance['value'];
    }

    /**
     * Sets Outstanding Balance.
     * Current outstanding balance amount.
     *
     * @maps OutstandingBalance
     */
    public function setOutstandingBalance(?float $outstandingBalance): void
    {
        $this->outstandingBalance['value'] = $outstandingBalance;
    }

    /**
     * Unsets Outstanding Balance.
     * Current outstanding balance amount.
     */
    public function unsetOutstandingBalance(): void
    {
        $this->outstandingBalance = [];
    }

    /**
     * Returns Payer Id.
     * Payment customer id of the customer.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payment customer id of the customer.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payment customer id of the customer.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payment customer number.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payment customer number.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payment customer number.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payment Due Date.
     * Due date for payment. Format: yyyyMMdd
     */
    public function getPaymentDueDate(): ?string
    {
        if (count($this->paymentDueDate) == 0) {
            return null;
        }
        return $this->paymentDueDate['value'];
    }

    /**
     * Sets Payment Due Date.
     * Due date for payment. Format: yyyyMMdd
     *
     * @maps PaymentDueDate
     */
    public function setPaymentDueDate(?string $paymentDueDate): void
    {
        $this->paymentDueDate['value'] = $paymentDueDate;
    }

    /**
     * Unsets Payment Due Date.
     * Due date for payment. Format: yyyyMMdd
     */
    public function unsetPaymentDueDate(): void
    {
        $this->paymentDueDate = [];
    }

    /**
     * Returns Payment Method.
     * Payment method description of the Payer.
     *
     * Example: Id & Description
     *
     * •    Incoming - Direct Debit
     *
     * •    Incoming - Cheque
     *
     * •    Incoming - Direct Debit A
     *
     * •    Incoming - Bank Transfer
     *
     * •    Incoming - Cash
     */
    public function getPaymentMethod(): ?string
    {
        if (count($this->paymentMethod) == 0) {
            return null;
        }
        return $this->paymentMethod['value'];
    }

    /**
     * Sets Payment Method.
     * Payment method description of the Payer.
     *
     * Example: Id & Description
     *
     * •    Incoming - Direct Debit
     *
     * •    Incoming - Cheque
     *
     * •    Incoming - Direct Debit A
     *
     * •    Incoming - Bank Transfer
     *
     * •    Incoming - Cash
     *
     * @maps PaymentMethod
     */
    public function setPaymentMethod(?string $paymentMethod): void
    {
        $this->paymentMethod['value'] = $paymentMethod;
    }

    /**
     * Unsets Payment Method.
     * Payment method description of the Payer.
     *
     * Example: Id & Description
     *
     * •    Incoming - Direct Debit
     *
     * •    Incoming - Cheque
     *
     * •    Incoming - Direct Debit A
     *
     * •    Incoming - Bank Transfer
     *
     * •    Incoming - Cash
     */
    public function unsetPaymentMethod(): void
    {
        $this->paymentMethod = [];
    }

    /**
     * Returns Payment Method Id.
     * Payment method Id of the Payer.
     *
     * Example: Id & Description
     *
     * •    Incoming - Direct Debit
     *
     * •    Incoming - Cheque
     *
     * •    Incoming - Direct Debit A
     *
     * •    Incoming - Bank Transfer
     *
     * •    Incoming - Cash
     */
    public function getPaymentMethodId(): ?int
    {
        if (count($this->paymentMethodId) == 0) {
            return null;
        }
        return $this->paymentMethodId['value'];
    }

    /**
     * Sets Payment Method Id.
     * Payment method Id of the Payer.
     *
     * Example: Id & Description
     *
     * •    Incoming - Direct Debit
     *
     * •    Incoming - Cheque
     *
     * •    Incoming - Direct Debit A
     *
     * •    Incoming - Bank Transfer
     *
     * •    Incoming - Cash
     *
     * @maps PaymentMethodId
     */
    public function setPaymentMethodId(?int $paymentMethodId): void
    {
        $this->paymentMethodId['value'] = $paymentMethodId;
    }

    /**
     * Unsets Payment Method Id.
     * Payment method Id of the Payer.
     *
     * Example: Id & Description
     *
     * •    Incoming - Direct Debit
     *
     * •    Incoming - Cheque
     *
     * •    Incoming - Direct Debit A
     *
     * •    Incoming - Bank Transfer
     *
     * •    Incoming - Cash
     */
    public function unsetPaymentMethodId(): void
    {
        $this->paymentMethodId = [];
    }

    /**
     * Returns Payment Terms.
     * Payment terms description of the Payer.
     * Example: Id & Description
     * •    14 days after Invoice
     * •    15 days after Invoice
     * •    21 days after Invoice
     * •    30 days after Invoice
     * •    45 days after Invoice
     * •    0 days after invoice
     * •    days after invoice
     * •    days after invoice
     * •    7 days after invoice
     * •    10th of the following month
     */
    public function getPaymentTerms(): ?string
    {
        if (count($this->paymentTerms) == 0) {
            return null;
        }
        return $this->paymentTerms['value'];
    }

    /**
     * Sets Payment Terms.
     * Payment terms description of the Payer.
     * Example: Id & Description
     * •    14 days after Invoice
     * •    15 days after Invoice
     * •    21 days after Invoice
     * •    30 days after Invoice
     * •    45 days after Invoice
     * •    0 days after invoice
     * •    days after invoice
     * •    days after invoice
     * •    7 days after invoice
     * •    10th of the following month
     *
     * @maps PaymentTerms
     */
    public function setPaymentTerms(?string $paymentTerms): void
    {
        $this->paymentTerms['value'] = $paymentTerms;
    }

    /**
     * Unsets Payment Terms.
     * Payment terms description of the Payer.
     * Example: Id & Description
     * •    14 days after Invoice
     * •    15 days after Invoice
     * •    21 days after Invoice
     * •    30 days after Invoice
     * •    45 days after Invoice
     * •    0 days after invoice
     * •    days after invoice
     * •    days after invoice
     * •    7 days after invoice
     * •    10th of the following month
     */
    public function unsetPaymentTerms(): void
    {
        $this->paymentTerms = [];
    }

    /**
     * Returns Payment Terms Id.
     * Payment terms Id of the Payer.
     * Example: Id & Description
     * •    14 days after Invoice
     * •    15 days after Invoice
     * •    21 days after Invoice
     * •    30 days after Invoice
     * •    45 days after Invoice
     * •    0 days after invoice
     * •    days after invoice
     * •    days after invoice
     * •    7 days after invoice
     * •    10th of the following month
     */
    public function getPaymentTermsId(): ?int
    {
        if (count($this->paymentTermsId) == 0) {
            return null;
        }
        return $this->paymentTermsId['value'];
    }

    /**
     * Sets Payment Terms Id.
     * Payment terms Id of the Payer.
     * Example: Id & Description
     * •    14 days after Invoice
     * •    15 days after Invoice
     * •    21 days after Invoice
     * •    30 days after Invoice
     * •    45 days after Invoice
     * •    0 days after invoice
     * •    days after invoice
     * •    days after invoice
     * •    7 days after invoice
     * •    10th of the following month
     *
     * @maps PaymentTermsId
     */
    public function setPaymentTermsId(?int $paymentTermsId): void
    {
        $this->paymentTermsId['value'] = $paymentTermsId;
    }

    /**
     * Unsets Payment Terms Id.
     * Payment terms Id of the Payer.
     * Example: Id & Description
     * •    14 days after Invoice
     * •    15 days after Invoice
     * •    21 days after Invoice
     * •    30 days after Invoice
     * •    45 days after Invoice
     * •    0 days after invoice
     * •    days after invoice
     * •    days after invoice
     * •    7 days after invoice
     * •    10th of the following month
     */
    public function unsetPaymentTermsId(): void
    {
        $this->paymentTermsId = [];
    }

    /**
     * Returns So a Reference Number.
     * Statement of account reference number
     */
    public function getSoAReferenceNumber(): ?string
    {
        if (count($this->soAReferenceNumber) == 0) {
            return null;
        }
        return $this->soAReferenceNumber['value'];
    }

    /**
     * Sets So a Reference Number.
     * Statement of account reference number
     *
     * @maps SoAReferenceNumber
     */
    public function setSoAReferenceNumber(?string $soAReferenceNumber): void
    {
        $this->soAReferenceNumber['value'] = $soAReferenceNumber;
    }

    /**
     * Unsets So a Reference Number.
     * Statement of account reference number
     */
    public function unsetSoAReferenceNumber(): void
    {
        $this->soAReferenceNumber = [];
    }

    /**
     * Returns Statement Date.
     * Date on which the SOA was generated.
     * Format: yyyyMMdd
     */
    public function getStatementDate(): ?string
    {
        if (count($this->statementDate) == 0) {
            return null;
        }
        return $this->statementDate['value'];
    }

    /**
     * Sets Statement Date.
     * Date on which the SOA was generated.
     * Format: yyyyMMdd
     *
     * @maps StatementDate
     */
    public function setStatementDate(?string $statementDate): void
    {
        $this->statementDate['value'] = $statementDate;
    }

    /**
     * Unsets Statement Date.
     * Date on which the SOA was generated.
     * Format: yyyyMMdd
     */
    public function unsetStatementDate(): void
    {
        $this->statementDate = [];
    }

    /**
     * Returns Statement of Account Id.
     * Statement of account identifier,
     * Example: 1
     */
    public function getStatementOfAccountId(): ?int
    {
        if (count($this->statementOfAccountId) == 0) {
            return null;
        }
        return $this->statementOfAccountId['value'];
    }

    /**
     * Sets Statement of Account Id.
     * Statement of account identifier,
     * Example: 1
     *
     * @maps StatementOfAccountId
     */
    public function setStatementOfAccountId(?int $statementOfAccountId): void
    {
        $this->statementOfAccountId['value'] = $statementOfAccountId;
    }

    /**
     * Unsets Statement of Account Id.
     * Statement of account identifier,
     * Example: 1
     */
    public function unsetStatementOfAccountId(): void
    {
        $this->statementOfAccountId = [];
    }

    /**
     * Returns Total Billing Documents.
     * Total number of billing documents for this Statement of Account
     */
    public function getTotalBillingDocuments(): ?int
    {
        if (count($this->totalBillingDocuments) == 0) {
            return null;
        }
        return $this->totalBillingDocuments['value'];
    }

    /**
     * Sets Total Billing Documents.
     * Total number of billing documents for this Statement of Account
     *
     * @maps TotalBillingDocuments
     */
    public function setTotalBillingDocuments(?int $totalBillingDocuments): void
    {
        $this->totalBillingDocuments['value'] = $totalBillingDocuments;
    }

    /**
     * Unsets Total Billing Documents.
     * Total number of billing documents for this Statement of Account
     */
    public function unsetTotalBillingDocuments(): void
    {
        $this->totalBillingDocuments = [];
    }

    /**
     * Returns Total Summary Billing Documents.
     * Total number of summary billing documents for this Statement of Account
     */
    public function getTotalSummaryBillingDocuments(): ?int
    {
        if (count($this->totalSummaryBillingDocuments) == 0) {
            return null;
        }
        return $this->totalSummaryBillingDocuments['value'];
    }

    /**
     * Sets Total Summary Billing Documents.
     * Total number of summary billing documents for this Statement of Account
     *
     * @maps TotalSummaryBillingDocuments
     */
    public function setTotalSummaryBillingDocuments(?int $totalSummaryBillingDocuments): void
    {
        $this->totalSummaryBillingDocuments['value'] = $totalSummaryBillingDocuments;
    }

    /**
     * Unsets Total Summary Billing Documents.
     * Total number of summary billing documents for this Statement of Account
     */
    public function unsetTotalSummaryBillingDocuments(): void
    {
        $this->totalSummaryBillingDocuments = [];
    }

    /**
     * Returns Unallocated Payment.
     * Unallocated payment.
     *
     * When negative, indicates overdue amount.
     */
    public function getUnallocatedPayment(): ?int
    {
        if (count($this->unallocatedPayment) == 0) {
            return null;
        }
        return $this->unallocatedPayment['value'];
    }

    /**
     * Sets Unallocated Payment.
     * Unallocated payment.
     *
     * When negative, indicates overdue amount.
     *
     * @maps UnallocatedPayment
     */
    public function setUnallocatedPayment(?int $unallocatedPayment): void
    {
        $this->unallocatedPayment['value'] = $unallocatedPayment;
    }

    /**
     * Unsets Unallocated Payment.
     * Unallocated payment.
     *
     * When negative, indicates overdue amount.
     */
    public function unsetUnallocatedPayment(): void
    {
        $this->unallocatedPayment = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->amountDue)) {
            $json['AmountDue']                     = $this->amountDue['value'];
        }
        if (!empty($this->amountNotOverdue)) {
            $json['AmountNotOverdue']              = $this->amountNotOverdue['value'];
        }
        if (!empty($this->amountOverdue)) {
            $json['AmountOverdue']                 = $this->amountOverdue['value'];
        }
        if (!empty($this->creditLimit)) {
            $json['CreditLimit']                   = $this->creditLimit['value'];
        }
        if (!empty($this->creditLimitCurrencyCode)) {
            $json['CreditLimitCurrencyCode']       = $this->creditLimitCurrencyCode['value'];
        }
        if (!empty($this->creditLimitCurrencySymbol)) {
            $json['CreditLimitCurrencySymbol']     = $this->creditLimitCurrencySymbol['value'];
        }
        if (!empty($this->creditLimitInCustomerCurrency)) {
            $json['CreditLimitInCustomerCurrency'] = $this->creditLimitInCustomerCurrency['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']                  = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']                = $this->currencySymbol['value'];
        }
        if (!empty($this->lastPaymentCurrencyCode)) {
            $json['LastPaymentCurrencyCode']       = $this->lastPaymentCurrencyCode['value'];
        }
        if (!empty($this->lastPaymentCurrencySymbol)) {
            $json['LastPaymentCurrencySymbol']     = $this->lastPaymentCurrencySymbol['value'];
        }
        if (!empty($this->lastPaymentDate)) {
            $json['LastPaymentDate']               = $this->lastPaymentDate['value'];
        }
        if (!empty($this->lastPaymentValue)) {
            $json['LastPaymentValue']              = $this->lastPaymentValue['value'];
        }
        if (!empty($this->outstandingBalance)) {
            $json['OutstandingBalance']            = $this->outstandingBalance['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                       = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                   = $this->payerNumber['value'];
        }
        if (!empty($this->paymentDueDate)) {
            $json['PaymentDueDate']                = $this->paymentDueDate['value'];
        }
        if (!empty($this->paymentMethod)) {
            $json['PaymentMethod']                 = $this->paymentMethod['value'];
        }
        if (!empty($this->paymentMethodId)) {
            $json['PaymentMethodId']               = $this->paymentMethodId['value'];
        }
        if (!empty($this->paymentTerms)) {
            $json['PaymentTerms']                  = $this->paymentTerms['value'];
        }
        if (!empty($this->paymentTermsId)) {
            $json['PaymentTermsId']                = $this->paymentTermsId['value'];
        }
        if (!empty($this->soAReferenceNumber)) {
            $json['SoAReferenceNumber']            = $this->soAReferenceNumber['value'];
        }
        if (!empty($this->statementDate)) {
            $json['StatementDate']                 = $this->statementDate['value'];
        }
        if (!empty($this->statementOfAccountId)) {
            $json['StatementOfAccountId']          = $this->statementOfAccountId['value'];
        }
        if (!empty($this->totalBillingDocuments)) {
            $json['TotalBillingDocuments']         = $this->totalBillingDocuments['value'];
        }
        if (!empty($this->totalSummaryBillingDocuments)) {
            $json['TotalSummaryBillingDocuments']  = $this->totalSummaryBillingDocuments['value'];
        }
        if (!empty($this->unallocatedPayment)) {
            $json['UnallocatedPayment']            = $this->unallocatedPayment['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

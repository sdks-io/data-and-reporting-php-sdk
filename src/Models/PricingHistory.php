<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class PricingHistory implements \JsonSerializable
{
    /**
     * @var array
     */
    private $fromDate = [];

    /**
     * @var array
     */
    private $toDate = [];

    /**
     * @var array
     */
    private $feesRuleID = [];

    /**
     * @var array
     */
    private $feesRuleDescription = [];

    /**
     * @var array
     */
    private $totalVolume = [];

    /**
     * Returns From Date.
     * Pricing History Period Start date and should be the first date of the month.
     *
     * Format: YYYYMMDD
     */
    public function getFromDate(): ?string
    {
        if (count($this->fromDate) == 0) {
            return null;
        }
        return $this->fromDate['value'];
    }

    /**
     * Sets From Date.
     * Pricing History Period Start date and should be the first date of the month.
     *
     * Format: YYYYMMDD
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate['value'] = $fromDate;
    }

    /**
     * Unsets From Date.
     * Pricing History Period Start date and should be the first date of the month.
     *
     * Format: YYYYMMDD
     */
    public function unsetFromDate(): void
    {
        $this->fromDate = [];
    }

    /**
     * Returns To Date.
     * Pricing History Period end date and should be the last date of the period month.
     *
     * Format: YYYYMMDD
     */
    public function getToDate(): ?string
    {
        if (count($this->toDate) == 0) {
            return null;
        }
        return $this->toDate['value'];
    }

    /**
     * Sets To Date.
     * Pricing History Period end date and should be the last date of the period month.
     *
     * Format: YYYYMMDD
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate['value'] = $toDate;
    }

    /**
     * Unsets To Date.
     * Pricing History Period end date and should be the last date of the period month.
     *
     * Format: YYYYMMDD
     */
    public function unsetToDate(): void
    {
        $this->toDate = [];
    }

    /**
     * Returns Fees Rule ID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated payer.
     *
     * Example: 8101
     */
    public function getFeesRuleID(): ?int
    {
        if (count($this->feesRuleID) == 0) {
            return null;
        }
        return $this->feesRuleID['value'];
    }

    /**
     * Sets Fees Rule ID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated payer.
     *
     * Example: 8101
     *
     * @maps FeesRuleID
     */
    public function setFeesRuleID(?int $feesRuleID): void
    {
        $this->feesRuleID['value'] = $feesRuleID;
    }

    /**
     * Unsets Fees Rule ID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated payer.
     *
     * Example: 8101
     */
    public function unsetFeesRuleID(): void
    {
        $this->feesRuleID = [];
    }

    /**
     * Returns Fees Rule Description.
     * Pricing History Period Fees Rule Description that is associated to the period of that associated
     * payer.
     */
    public function getFeesRuleDescription(): ?string
    {
        if (count($this->feesRuleDescription) == 0) {
            return null;
        }
        return $this->feesRuleDescription['value'];
    }

    /**
     * Sets Fees Rule Description.
     * Pricing History Period Fees Rule Description that is associated to the period of that associated
     * payer.
     *
     * @maps FeesRuleDescription
     */
    public function setFeesRuleDescription(?string $feesRuleDescription): void
    {
        $this->feesRuleDescription['value'] = $feesRuleDescription;
    }

    /**
     * Unsets Fees Rule Description.
     * Pricing History Period Fees Rule Description that is associated to the period of that associated
     * payer.
     */
    public function unsetFeesRuleDescription(): void
    {
        $this->feesRuleDescription = [];
    }

    /**
     * Returns Total Volume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     */
    public function getTotalVolume(): ?float
    {
        if (count($this->totalVolume) == 0) {
            return null;
        }
        return $this->totalVolume['value'];
    }

    /**
     * Sets Total Volume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     *
     * @maps TotalVolume
     */
    public function setTotalVolume(?float $totalVolume): void
    {
        $this->totalVolume['value'] = $totalVolume;
    }

    /**
     * Unsets Total Volume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     */
    public function unsetTotalVolume(): void
    {
        $this->totalVolume = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->fromDate)) {
            $json['FromDate']            = $this->fromDate['value'];
        }
        if (!empty($this->toDate)) {
            $json['ToDate']              = $this->toDate['value'];
        }
        if (!empty($this->feesRuleID)) {
            $json['FeesRuleID']          = $this->feesRuleID['value'];
        }
        if (!empty($this->feesRuleDescription)) {
            $json['FeesRuleDescription'] = $this->feesRuleDescription['value'];
        }
        if (!empty($this->totalVolume)) {
            $json['TotalVolume']         = $this->totalVolume['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

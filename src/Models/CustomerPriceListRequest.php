<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CustomerPriceListRequest implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $customerSpecificList = [];

    /**
     * @var array
     */
    private $priceListType = [];

    /**
     * @var array
     */
    private $delCoId = [];

    /**
     * @var string|null
     */
    private $fromDate;

    /**
     * @var string|null
     */
    private $toDate;

    /**
     * @var array
     */
    private $includePumpPriceDiscounts = [];

    /**
     * Returns Col Co Id.
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Code.
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Account Id.
     * Account Id of the customer.
     * Optional
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id of the customer.
     * Optional
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id of the customer.
     * Optional
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the customer.
     * Optional
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the customer.
     * Optional
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the customer.
     * Optional
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Customer Specific List.
     * Whether customer specific price lists and customer specific discount values set on pump prices are
     * to be returned or not.
     */
    public function getCustomerSpecificList(): ?int
    {
        if (count($this->customerSpecificList) == 0) {
            return null;
        }
        return $this->customerSpecificList['value'];
    }

    /**
     * Sets Customer Specific List.
     * Whether customer specific price lists and customer specific discount values set on pump prices are
     * to be returned or not.
     *
     * @maps CustomerSpecificList
     */
    public function setCustomerSpecificList(?int $customerSpecificList): void
    {
        $this->customerSpecificList['value'] = $customerSpecificList;
    }

    /**
     * Unsets Customer Specific List.
     * Whether customer specific price lists and customer specific discount values set on pump prices are
     * to be returned or not.
     */
    public function unsetCustomerSpecificList(): void
    {
        $this->customerSpecificList = [];
    }

    /**
     * Returns Price List Type.
     * Specifies the type of price lists to be included in the response.
     * Optional – default value is zero.
     *
     *
     * Allowed values:
     * 0 – All
     * 1 – National Only
     * 2 – International Only
     */
    public function getPriceListType(): ?int
    {
        if (count($this->priceListType) == 0) {
            return null;
        }
        return $this->priceListType['value'];
    }

    /**
     * Sets Price List Type.
     * Specifies the type of price lists to be included in the response.
     * Optional – default value is zero.
     *
     *
     * Allowed values:
     * 0 – All
     * 1 – National Only
     * 2 – International Only
     *
     * @maps PriceListType
     */
    public function setPriceListType(?int $priceListType): void
    {
        $this->priceListType['value'] = $priceListType;
    }

    /**
     * Unsets Price List Type.
     * Specifies the type of price lists to be included in the response.
     * Optional – default value is zero.
     *
     *
     * Allowed values:
     * 0 – All
     * 1 – National Only
     * 2 – International Only
     */
    public function unsetPriceListType(): void
    {
        $this->priceListType = [];
    }

    /**
     * Returns Del Co Id.
     * Delivering Company ID
     * Optional.
     */
    public function getDelCoId(): ?int
    {
        if (count($this->delCoId) == 0) {
            return null;
        }
        return $this->delCoId['value'];
    }

    /**
     * Sets Del Co Id.
     * Delivering Company ID
     * Optional.
     *
     * @maps DelCoId
     */
    public function setDelCoId(?int $delCoId): void
    {
        $this->delCoId['value'] = $delCoId;
    }

    /**
     * Unsets Del Co Id.
     * Delivering Company ID
     * Optional.
     */
    public function unsetDelCoId(): void
    {
        $this->delCoId = [];
    }

    /**
     * Returns From Date.
     * Start date to fetch the price lists, discount values on pump prices and VAT rates.
     *
     * Mandatory
     *
     * Format: yyyyMMdd
     */
    public function getFromDate(): ?string
    {
        return $this->fromDate;
    }

    /**
     * Sets From Date.
     * Start date to fetch the price lists, discount values on pump prices and VAT rates.
     *
     * Mandatory
     *
     * Format: yyyyMMdd
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate = $fromDate;
    }

    /**
     * Returns To Date.
     * End date to fetch the price lists, discount values on pump prices and VAT rates.
     * Mandatory and greater than or equal to FromDate.
     * Maximum of 30 (configurable) day’s duration is allowed between ‘From’ and ‘To’ dates.
     * Format: yyyyMMdd
     */
    public function getToDate(): ?string
    {
        return $this->toDate;
    }

    /**
     * Sets To Date.
     * End date to fetch the price lists, discount values on pump prices and VAT rates.
     * Mandatory and greater than or equal to FromDate.
     * Maximum of 30 (configurable) day’s duration is allowed between ‘From’ and ‘To’ dates.
     * Format: yyyyMMdd
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate = $toDate;
    }

    /**
     * Returns Include Pump Price Discounts.
     * True / False.
     * A flag to request the discount information set on pump prices for the customer to be included in the
     * response.
     * Optional
     * Default value: False
     */
    public function getIncludePumpPriceDiscounts(): ?bool
    {
        if (count($this->includePumpPriceDiscounts) == 0) {
            return null;
        }
        return $this->includePumpPriceDiscounts['value'];
    }

    /**
     * Sets Include Pump Price Discounts.
     * True / False.
     * A flag to request the discount information set on pump prices for the customer to be included in the
     * response.
     * Optional
     * Default value: False
     *
     * @maps IncludePumpPriceDiscounts
     */
    public function setIncludePumpPriceDiscounts(?bool $includePumpPriceDiscounts): void
    {
        $this->includePumpPriceDiscounts['value'] = $includePumpPriceDiscounts;
    }

    /**
     * Unsets Include Pump Price Discounts.
     * True / False.
     * A flag to request the discount information set on pump prices for the customer to be included in the
     * response.
     * Optional
     * Default value: False
     */
    public function unsetIncludePumpPriceDiscounts(): void
    {
        $this->includePumpPriceDiscounts = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoId)) {
            $json['ColCoId']                   = $this->colCoId['value'];
        }
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                 = $this->colCoCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                   = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']               = $this->payerNumber['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                 = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']             = $this->accountNumber['value'];
        }
        if (!empty($this->customerSpecificList)) {
            $json['CustomerSpecificList']      = $this->customerSpecificList['value'];
        }
        if (!empty($this->priceListType)) {
            $json['PriceListType']             = $this->priceListType['value'];
        }
        if (!empty($this->delCoId)) {
            $json['DelCoId']                   = $this->delCoId['value'];
        }
        $json['FromDate']                      = $this->fromDate;
        $json['ToDate']                        = $this->toDate;
        if (!empty($this->includePumpPriceDiscounts)) {
            $json['IncludePumpPriceDiscounts'] = $this->includePumpPriceDiscounts['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

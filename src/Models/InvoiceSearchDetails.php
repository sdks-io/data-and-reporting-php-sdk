<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class InvoiceSearchDetails implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountFullName = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var array
     */
    private $colCoOpCoId = [];

    /**
     * @var array
     */
    private $currentBillingFrequency = [];

    /**
     * @var array
     */
    private $currentBillingFrequencyId = [];

    /**
     * @var array
     */
    private $currentDistributionMethod = [];

    /**
     * @var array
     */
    private $currentDistributionMethodId = [];

    /**
     * @var array
     */
    private $customerCurrencyCode = [];

    /**
     * @var array
     */
    private $customerCurrencySymbol = [];

    /**
     * @var array
     */
    private $delCoClientNumber = [];

    /**
     * @var array
     */
    private $delCoId = [];

    /**
     * @var array
     */
    private $delCoOpCoId = [];

    /**
     * @var array
     */
    private $documentType = [];

    /**
     * @var array
     */
    private $documentTypeId = [];

    /**
     * @var array
     */
    private $dueDate = [];

    /**
     * @var array
     */
    private $grossAmountCustomerCurrency = [];

    /**
     * @var array
     */
    private $grossAmountTransactionCurrency = [];

    /**
     * @var array
     */
    private $invoiceDate = [];

    /**
     * @var array
     */
    private $invoicedBy = [];

    /**
     * @var array
     */
    private $invoicedOnBehalfOf = [];

    /**
     * @var array
     */
    private $invoiceId = [];

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $isInternational = [];

    /**
     * @var array
     */
    private $isNational = [];

    /**
     * @var array
     */
    private $netAmountCustomerCurrency = [];

    /**
     * @var array
     */
    private $netAmountTransactionCurrency = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $paymentTerms = [];

    /**
     * @var array
     */
    private $paymentTermsId = [];

    /**
     * @var array
     */
    private $replacementInvoiceId = [];

    /**
     * @var array
     */
    private $reversalInvoiceId = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $summaryDocumentBillingType = [];

    /**
     * @var array
     */
    private $summaryDocumentBillingTypeId = [];

    /**
     * @var array
     */
    private $summaryDocumentDate = [];

    /**
     * @var array
     */
    private $summaryDocumentDDAmount = [];

    /**
     * @var array
     */
    private $summaryDocumentDueDate = [];

    /**
     * @var array
     */
    private $summaryDocumentId = [];

    /**
     * @var array
     */
    private $summaryDocumentIsFullyPaid = [];

    /**
     * @var array
     */
    private $summaryDocumentNumber = [];

    /**
     * @var array
     */
    private $summaryDocumentPaidAmount = [];

    /**
     * @var array
     */
    private $summaryDocumentSoAReferenceNumber = [];

    /**
     * @var array
     */
    private $summaryDocumentStatementOfAccountId = [];

    /**
     * @var array
     */
    private $transactionCurrencyCode = [];

    /**
     * @var array
     */
    private $transactionCurrencySymbol = [];

    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $typeId = [];

    /**
     * @var array
     */
    private $vATAmountCustomerCurrency = [];

    /**
     * @var array
     */
    private $vATAmountTransactionCurrency = [];

    /**
     * @var array
     */
    private $vATCountry = [];

    /**
     * @var array
     */
    private $vATCountryId = [];

    /**
     * @var array
     */
    private $vATCountryISOCode = [];

    /**
     * @var array
     */
    private $vATCountryOpCoId = [];

    /**
     * @var array
     */
    private $documentReference = [];

    /**
     * @var InvoiceSearchAdditionalDocument[]|null
     */
    private $additionalDocuments;

    /**
     * Returns Account Full Name.
     * Account Full Name
     *
     * Example: AT_reversal customer_FN
     */
    public function getAccountFullName(): ?string
    {
        if (count($this->accountFullName) == 0) {
            return null;
        }
        return $this->accountFullName['value'];
    }

    /**
     * Sets Account Full Name.
     * Account Full Name
     *
     * Example: AT_reversal customer_FN
     *
     * @maps AccountFullName
     */
    public function setAccountFullName(?string $accountFullName): void
    {
        $this->accountFullName['value'] = $accountFullName;
    }

    /**
     * Unsets Account Full Name.
     * Account Full Name
     *
     * Example: AT_reversal customer_FN
     */
    public function unsetAccountFullName(): void
    {
        $this->accountFullName = [];
    }

    /**
     * Returns Account Id.
     * Account ID
     *
     * Example: 29484
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account ID
     *
     * Example: 29484
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account ID
     *
     * Example: 29484
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     *
     * Example: GB99215176
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * Example: GB99215176
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     *
     * Example: GB99215176
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account Short Name
     *
     * Example: AT Earth Movers-SN
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account Short Name
     *
     * Example: AT Earth Movers-SN
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account Short Name
     *
     * Example: AT Earth Movers-SN
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Col Co Id.
     * ColCo Id.
     *
     * Example: 18
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * ColCo Id.
     *
     * Example: 18
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * ColCo Id.
     *
     * Example: 18
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Col Co Op Co Id.
     * ColCo’s OpCo Id.
     *
     * Example: 018
     */
    public function getColCoOpCoId(): ?string
    {
        if (count($this->colCoOpCoId) == 0) {
            return null;
        }
        return $this->colCoOpCoId['value'];
    }

    /**
     * Sets Col Co Op Co Id.
     * ColCo’s OpCo Id.
     *
     * Example: 018
     *
     * @maps ColCoOpCoId
     */
    public function setColCoOpCoId(?string $colCoOpCoId): void
    {
        $this->colCoOpCoId['value'] = $colCoOpCoId;
    }

    /**
     * Unsets Col Co Op Co Id.
     * ColCo’s OpCo Id.
     *
     * Example: 018
     */
    public function unsetColCoOpCoId(): void
    {
        $this->colCoOpCoId = [];
    }

    /**
     * Returns Current Billing Frequency.
     * Current billing frequency of the account.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly - Tuesday
     *
     * 5 Weekly - Wednesday
     *
     * 6 Weekly - Thursday
     *
     * 7 Weekly - Friday
     *
     * 8 Weekly - Saturday
     *
     * 9 Weekly - Sunday
     *
     * 10 Monthly - 1st
     *
     * Example: Weekly – Wednesday
     */
    public function getCurrentBillingFrequency(): ?string
    {
        if (count($this->currentBillingFrequency) == 0) {
            return null;
        }
        return $this->currentBillingFrequency['value'];
    }

    /**
     * Sets Current Billing Frequency.
     * Current billing frequency of the account.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly - Tuesday
     *
     * 5 Weekly - Wednesday
     *
     * 6 Weekly - Thursday
     *
     * 7 Weekly - Friday
     *
     * 8 Weekly - Saturday
     *
     * 9 Weekly - Sunday
     *
     * 10 Monthly - 1st
     *
     * Example: Weekly – Wednesday
     *
     * @maps CurrentBillingFrequency
     */
    public function setCurrentBillingFrequency(?string $currentBillingFrequency): void
    {
        $this->currentBillingFrequency['value'] = $currentBillingFrequency;
    }

    /**
     * Unsets Current Billing Frequency.
     * Current billing frequency of the account.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly - Tuesday
     *
     * 5 Weekly - Wednesday
     *
     * 6 Weekly - Thursday
     *
     * 7 Weekly - Friday
     *
     * 8 Weekly - Saturday
     *
     * 9 Weekly - Sunday
     *
     * 10 Monthly - 1st
     *
     * Example: Weekly – Wednesday
     */
    public function unsetCurrentBillingFrequency(): void
    {
        $this->currentBillingFrequency = [];
    }

    /**
     * Returns Current Billing Frequency Id.
     * Current billing frequency id of the account.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly - Tuesday
     *
     * 5 Weekly - Wednesday
     *
     * 6 Weekly - Thursday
     *
     * 7 Weekly - Friday
     *
     * 8 Weekly - Saturday
     *
     * 9 Weekly - Sunday
     *
     * 10 Monthly - 1st
     *
     * Example: 5
     */
    public function getCurrentBillingFrequencyId(): ?int
    {
        if (count($this->currentBillingFrequencyId) == 0) {
            return null;
        }
        return $this->currentBillingFrequencyId['value'];
    }

    /**
     * Sets Current Billing Frequency Id.
     * Current billing frequency id of the account.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly - Tuesday
     *
     * 5 Weekly - Wednesday
     *
     * 6 Weekly - Thursday
     *
     * 7 Weekly - Friday
     *
     * 8 Weekly - Saturday
     *
     * 9 Weekly - Sunday
     *
     * 10 Monthly - 1st
     *
     * Example: 5
     *
     * @maps CurrentBillingFrequencyId
     */
    public function setCurrentBillingFrequencyId(?int $currentBillingFrequencyId): void
    {
        $this->currentBillingFrequencyId['value'] = $currentBillingFrequencyId;
    }

    /**
     * Unsets Current Billing Frequency Id.
     * Current billing frequency id of the account.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Daily (all days)
     *
     * 2 Daily (only working days)
     *
     * 3 Weekly - Monday
     *
     * 4 Weekly - Tuesday
     *
     * 5 Weekly - Wednesday
     *
     * 6 Weekly - Thursday
     *
     * 7 Weekly - Friday
     *
     * 8 Weekly - Saturday
     *
     * 9 Weekly - Sunday
     *
     * 10 Monthly - 1st
     *
     * Example: 5
     */
    public function unsetCurrentBillingFrequencyId(): void
    {
        $this->currentBillingFrequencyId = [];
    }

    /**
     * Returns Current Distribution Method.
     * Current distribution method name of the account.
     *
     * Example : Id & Description
     *
     * 1 e-mail
     *
     * 2 Fax
     *
     * 3 Courier to Customer
     *
     * 4 Courier to Client
     *
     * 5 Print
     *
     * 6 FTP
     *
     * 7 SMS
     */
    public function getCurrentDistributionMethod(): ?string
    {
        if (count($this->currentDistributionMethod) == 0) {
            return null;
        }
        return $this->currentDistributionMethod['value'];
    }

    /**
     * Sets Current Distribution Method.
     * Current distribution method name of the account.
     *
     * Example : Id & Description
     *
     * 1 e-mail
     *
     * 2 Fax
     *
     * 3 Courier to Customer
     *
     * 4 Courier to Client
     *
     * 5 Print
     *
     * 6 FTP
     *
     * 7 SMS
     *
     * @maps CurrentDistributionMethod
     */
    public function setCurrentDistributionMethod(?string $currentDistributionMethod): void
    {
        $this->currentDistributionMethod['value'] = $currentDistributionMethod;
    }

    /**
     * Unsets Current Distribution Method.
     * Current distribution method name of the account.
     *
     * Example : Id & Description
     *
     * 1 e-mail
     *
     * 2 Fax
     *
     * 3 Courier to Customer
     *
     * 4 Courier to Client
     *
     * 5 Print
     *
     * 6 FTP
     *
     * 7 SMS
     */
    public function unsetCurrentDistributionMethod(): void
    {
        $this->currentDistributionMethod = [];
    }

    /**
     * Returns Current Distribution Method Id.
     * Current distribution method id of the account.
     *
     * Example : Id & Description
     *
     * 1 e-mail
     *
     * 2 Fax
     *
     * 3 Courier to Customer
     *
     * 4 Courier to Client
     *
     * 5 Print
     *
     * 6 FTP
     *
     * 7 SMS
     */
    public function getCurrentDistributionMethodId(): ?int
    {
        if (count($this->currentDistributionMethodId) == 0) {
            return null;
        }
        return $this->currentDistributionMethodId['value'];
    }

    /**
     * Sets Current Distribution Method Id.
     * Current distribution method id of the account.
     *
     * Example : Id & Description
     *
     * 1 e-mail
     *
     * 2 Fax
     *
     * 3 Courier to Customer
     *
     * 4 Courier to Client
     *
     * 5 Print
     *
     * 6 FTP
     *
     * 7 SMS
     *
     * @maps CurrentDistributionMethodId
     */
    public function setCurrentDistributionMethodId(?int $currentDistributionMethodId): void
    {
        $this->currentDistributionMethodId['value'] = $currentDistributionMethodId;
    }

    /**
     * Unsets Current Distribution Method Id.
     * Current distribution method id of the account.
     *
     * Example : Id & Description
     *
     * 1 e-mail
     *
     * 2 Fax
     *
     * 3 Courier to Customer
     *
     * 4 Courier to Client
     *
     * 5 Print
     *
     * 6 FTP
     *
     * 7 SMS
     */
    public function unsetCurrentDistributionMethodId(): void
    {
        $this->currentDistributionMethodId = [];
    }

    /**
     * Returns Customer Currency Code.
     * Customer currency ISO code.
     *
     * Example: EUR
     */
    public function getCustomerCurrencyCode(): ?string
    {
        if (count($this->customerCurrencyCode) == 0) {
            return null;
        }
        return $this->customerCurrencyCode['value'];
    }

    /**
     * Sets Customer Currency Code.
     * Customer currency ISO code.
     *
     * Example: EUR
     *
     * @maps CustomerCurrencyCode
     */
    public function setCustomerCurrencyCode(?string $customerCurrencyCode): void
    {
        $this->customerCurrencyCode['value'] = $customerCurrencyCode;
    }

    /**
     * Unsets Customer Currency Code.
     * Customer currency ISO code.
     *
     * Example: EUR
     */
    public function unsetCustomerCurrencyCode(): void
    {
        $this->customerCurrencyCode = [];
    }

    /**
     * Returns Customer Currency Symbol.
     * Customer currency code.
     *
     * Example: €
     */
    public function getCustomerCurrencySymbol(): ?string
    {
        if (count($this->customerCurrencySymbol) == 0) {
            return null;
        }
        return $this->customerCurrencySymbol['value'];
    }

    /**
     * Sets Customer Currency Symbol.
     * Customer currency code.
     *
     * Example: €
     *
     * @maps CustomerCurrencySymbol
     */
    public function setCustomerCurrencySymbol(?string $customerCurrencySymbol): void
    {
        $this->customerCurrencySymbol['value'] = $customerCurrencySymbol;
    }

    /**
     * Unsets Customer Currency Symbol.
     * Customer currency code.
     *
     * Example: €
     */
    public function unsetCustomerCurrencySymbol(): void
    {
        $this->customerCurrencySymbol = [];
    }

    /**
     * Returns Del Co Client Number.
     * DelCo’s client company number.
     *
     * Example: 132
     */
    public function getDelCoClientNumber(): ?string
    {
        if (count($this->delCoClientNumber) == 0) {
            return null;
        }
        return $this->delCoClientNumber['value'];
    }

    /**
     * Sets Del Co Client Number.
     * DelCo’s client company number.
     *
     * Example: 132
     *
     * @maps DelCoClientNumber
     */
    public function setDelCoClientNumber(?string $delCoClientNumber): void
    {
        $this->delCoClientNumber['value'] = $delCoClientNumber;
    }

    /**
     * Unsets Del Co Client Number.
     * DelCo’s client company number.
     *
     * Example: 132
     */
    public function unsetDelCoClientNumber(): void
    {
        $this->delCoClientNumber = [];
    }

    /**
     * Returns Del Co Id.
     * DelCo Id.
     *
     * Example: 132
     */
    public function getDelCoId(): ?int
    {
        if (count($this->delCoId) == 0) {
            return null;
        }
        return $this->delCoId['value'];
    }

    /**
     * Sets Del Co Id.
     * DelCo Id.
     *
     * Example: 132
     *
     * @maps DelCoId
     */
    public function setDelCoId(?int $delCoId): void
    {
        $this->delCoId['value'] = $delCoId;
    }

    /**
     * Unsets Del Co Id.
     * DelCo Id.
     *
     * Example: 132
     */
    public function unsetDelCoId(): void
    {
        $this->delCoId = [];
    }

    /**
     * Returns Del Co Op Co Id.
     * DelCo’s OpCo Id.
     *
     * Example: 032
     */
    public function getDelCoOpCoId(): ?string
    {
        if (count($this->delCoOpCoId) == 0) {
            return null;
        }
        return $this->delCoOpCoId['value'];
    }

    /**
     * Sets Del Co Op Co Id.
     * DelCo’s OpCo Id.
     *
     * Example: 032
     *
     * @maps DelCoOpCoId
     */
    public function setDelCoOpCoId(?string $delCoOpCoId): void
    {
        $this->delCoOpCoId['value'] = $delCoOpCoId;
    }

    /**
     * Unsets Del Co Op Co Id.
     * DelCo’s OpCo Id.
     *
     * Example: 032
     */
    public function unsetDelCoOpCoId(): void
    {
        $this->delCoOpCoId = [];
    }

    /**
     * Returns Document Type.
     * Document type Id description.
     */
    public function getDocumentType(): ?string
    {
        if (count($this->documentType) == 0) {
            return null;
        }
        return $this->documentType['value'];
    }

    /**
     * Sets Document Type.
     * Document type Id description.
     *
     * @maps DocumentType
     */
    public function setDocumentType(?string $documentType): void
    {
        $this->documentType['value'] = $documentType;
    }

    /**
     * Unsets Document Type.
     * Document type Id description.
     */
    public function unsetDocumentType(): void
    {
        $this->documentType = [];
    }

    /**
     * Returns Document Type Id.
     * Document type Id.
     */
    public function getDocumentTypeId(): ?int
    {
        if (count($this->documentTypeId) == 0) {
            return null;
        }
        return $this->documentTypeId['value'];
    }

    /**
     * Sets Document Type Id.
     * Document type Id.
     *
     * @maps DocumentTypeId
     */
    public function setDocumentTypeId(?int $documentTypeId): void
    {
        $this->documentTypeId['value'] = $documentTypeId;
    }

    /**
     * Unsets Document Type Id.
     * Document type Id.
     */
    public function unsetDocumentTypeId(): void
    {
        $this->documentTypeId = [];
    }

    /**
     * Returns Due Date.
     * Due date. Format: yyyyMMdd.
     *
     * Example: 20170115
     */
    public function getDueDate(): ?string
    {
        if (count($this->dueDate) == 0) {
            return null;
        }
        return $this->dueDate['value'];
    }

    /**
     * Sets Due Date.
     * Due date. Format: yyyyMMdd.
     *
     * Example: 20170115
     *
     * @maps DueDate
     */
    public function setDueDate(?string $dueDate): void
    {
        $this->dueDate['value'] = $dueDate;
    }

    /**
     * Unsets Due Date.
     * Due date. Format: yyyyMMdd.
     *
     * Example: 20170115
     */
    public function unsetDueDate(): void
    {
        $this->dueDate = [];
    }

    /**
     * Returns Gross Amount Customer Currency.
     * Gross amount in customer currency in the document.
     */
    public function getGrossAmountCustomerCurrency(): ?float
    {
        if (count($this->grossAmountCustomerCurrency) == 0) {
            return null;
        }
        return $this->grossAmountCustomerCurrency['value'];
    }

    /**
     * Sets Gross Amount Customer Currency.
     * Gross amount in customer currency in the document.
     *
     * @maps GrossAmountCustomerCurrency
     */
    public function setGrossAmountCustomerCurrency(?float $grossAmountCustomerCurrency): void
    {
        $this->grossAmountCustomerCurrency['value'] = $grossAmountCustomerCurrency;
    }

    /**
     * Unsets Gross Amount Customer Currency.
     * Gross amount in customer currency in the document.
     */
    public function unsetGrossAmountCustomerCurrency(): void
    {
        $this->grossAmountCustomerCurrency = [];
    }

    /**
     * Returns Gross Amount Transaction Currency.
     * Gross amount in transaction currency in the document
     */
    public function getGrossAmountTransactionCurrency(): ?float
    {
        if (count($this->grossAmountTransactionCurrency) == 0) {
            return null;
        }
        return $this->grossAmountTransactionCurrency['value'];
    }

    /**
     * Sets Gross Amount Transaction Currency.
     * Gross amount in transaction currency in the document
     *
     * @maps GrossAmountTransactionCurrency
     */
    public function setGrossAmountTransactionCurrency(?float $grossAmountTransactionCurrency): void
    {
        $this->grossAmountTransactionCurrency['value'] = $grossAmountTransactionCurrency;
    }

    /**
     * Unsets Gross Amount Transaction Currency.
     * Gross amount in transaction currency in the document
     */
    public function unsetGrossAmountTransactionCurrency(): void
    {
        $this->grossAmountTransactionCurrency = [];
    }

    /**
     * Returns Invoice Date.
     * Invoicing date. Format: yyyyMMdd
     *
     * Example: 20170101
     */
    public function getInvoiceDate(): ?string
    {
        if (count($this->invoiceDate) == 0) {
            return null;
        }
        return $this->invoiceDate['value'];
    }

    /**
     * Sets Invoice Date.
     * Invoicing date. Format: yyyyMMdd
     *
     * Example: 20170101
     *
     * @maps InvoiceDate
     */
    public function setInvoiceDate(?string $invoiceDate): void
    {
        $this->invoiceDate['value'] = $invoiceDate;
    }

    /**
     * Unsets Invoice Date.
     * Invoicing date. Format: yyyyMMdd
     *
     * Example: 20170101
     */
    public function unsetInvoiceDate(): void
    {
        $this->invoiceDate = [];
    }

    /**
     * Returns Invoiced By.
     * Company name.
     */
    public function getInvoicedBy(): ?string
    {
        if (count($this->invoicedBy) == 0) {
            return null;
        }
        return $this->invoicedBy['value'];
    }

    /**
     * Sets Invoiced By.
     * Company name.
     *
     * @maps InvoicedBy
     */
    public function setInvoicedBy(?string $invoicedBy): void
    {
        $this->invoicedBy['value'] = $invoicedBy;
    }

    /**
     * Unsets Invoiced By.
     * Company name.
     */
    public function unsetInvoicedBy(): void
    {
        $this->invoicedBy = [];
    }

    /**
     * Returns Invoiced on Behalf Of.
     * Country Name.
     *
     * Example: Czech Republic
     */
    public function getInvoicedOnBehalfOf(): ?string
    {
        if (count($this->invoicedOnBehalfOf) == 0) {
            return null;
        }
        return $this->invoicedOnBehalfOf['value'];
    }

    /**
     * Sets Invoiced on Behalf Of.
     * Country Name.
     *
     * Example: Czech Republic
     *
     * @maps InvoicedOnBehalfOf
     */
    public function setInvoicedOnBehalfOf(?string $invoicedOnBehalfOf): void
    {
        $this->invoicedOnBehalfOf['value'] = $invoicedOnBehalfOf;
    }

    /**
     * Unsets Invoiced on Behalf Of.
     * Country Name.
     *
     * Example: Czech Republic
     */
    public function unsetInvoicedOnBehalfOf(): void
    {
        $this->invoicedOnBehalfOf = [];
    }

    /**
     * Returns Invoice Id.
     * Invoice id.
     *
     * Example: 1
     */
    public function getInvoiceId(): ?int
    {
        if (count($this->invoiceId) == 0) {
            return null;
        }
        return $this->invoiceId['value'];
    }

    /**
     * Sets Invoice Id.
     * Invoice id.
     *
     * Example: 1
     *
     * @maps InvoiceId
     */
    public function setInvoiceId(?int $invoiceId): void
    {
        $this->invoiceId['value'] = $invoiceId;
    }

    /**
     * Unsets Invoice Id.
     * Invoice id.
     *
     * Example: 1
     */
    public function unsetInvoiceId(): void
    {
        $this->invoiceId = [];
    }

    /**
     * Returns Invoice Number.
     * Invoice number.
     *
     * Example: 0123456789
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice number.
     *
     * Example: 0123456789
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice number.
     *
     * Example: 0123456789
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Is International.
     * True/False.
     *
     * True if this is an International invoice, else false.
     */
    public function getIsInternational(): ?bool
    {
        if (count($this->isInternational) == 0) {
            return null;
        }
        return $this->isInternational['value'];
    }

    /**
     * Sets Is International.
     * True/False.
     *
     * True if this is an International invoice, else false.
     *
     * @maps IsInternational
     */
    public function setIsInternational(?bool $isInternational): void
    {
        $this->isInternational['value'] = $isInternational;
    }

    /**
     * Unsets Is International.
     * True/False.
     *
     * True if this is an International invoice, else false.
     */
    public function unsetIsInternational(): void
    {
        $this->isInternational = [];
    }

    /**
     * Returns Is National.
     * True/False.
     *
     * True if this is a National invoice, else false.
     */
    public function getIsNational(): ?bool
    {
        if (count($this->isNational) == 0) {
            return null;
        }
        return $this->isNational['value'];
    }

    /**
     * Sets Is National.
     * True/False.
     *
     * True if this is a National invoice, else false.
     *
     * @maps IsNational
     */
    public function setIsNational(?bool $isNational): void
    {
        $this->isNational['value'] = $isNational;
    }

    /**
     * Unsets Is National.
     * True/False.
     *
     * True if this is a National invoice, else false.
     */
    public function unsetIsNational(): void
    {
        $this->isNational = [];
    }

    /**
     * Returns Net Amount Customer Currency.
     * Net amount in customer currency in the document.
     */
    public function getNetAmountCustomerCurrency(): ?float
    {
        if (count($this->netAmountCustomerCurrency) == 0) {
            return null;
        }
        return $this->netAmountCustomerCurrency['value'];
    }

    /**
     * Sets Net Amount Customer Currency.
     * Net amount in customer currency in the document.
     *
     * @maps NetAmountCustomerCurrency
     */
    public function setNetAmountCustomerCurrency(?float $netAmountCustomerCurrency): void
    {
        $this->netAmountCustomerCurrency['value'] = $netAmountCustomerCurrency;
    }

    /**
     * Unsets Net Amount Customer Currency.
     * Net amount in customer currency in the document.
     */
    public function unsetNetAmountCustomerCurrency(): void
    {
        $this->netAmountCustomerCurrency = [];
    }

    /**
     * Returns Net Amount Transaction Currency.
     * Net amount in transaction currency in the document.
     */
    public function getNetAmountTransactionCurrency(): ?float
    {
        if (count($this->netAmountTransactionCurrency) == 0) {
            return null;
        }
        return $this->netAmountTransactionCurrency['value'];
    }

    /**
     * Sets Net Amount Transaction Currency.
     * Net amount in transaction currency in the document.
     *
     * @maps NetAmountTransactionCurrency
     */
    public function setNetAmountTransactionCurrency(?float $netAmountTransactionCurrency): void
    {
        $this->netAmountTransactionCurrency['value'] = $netAmountTransactionCurrency;
    }

    /**
     * Unsets Net Amount Transaction Currency.
     * Net amount in transaction currency in the document.
     */
    public function unsetNetAmountTransactionCurrency(): void
    {
        $this->netAmountTransactionCurrency = [];
    }

    /**
     * Returns Payer Id.
     * Payment customer id of the customer.
     *
     * Example: 123456
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payment customer id of the customer.
     *
     * Example: 123456
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payment customer id of the customer.
     *
     * Example: 123456
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payment customer number.
     *
     * Example: GB000000123
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payment customer number.
     *
     * Example: GB000000123
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payment customer number.
     *
     * Example: GB000000123
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payment Terms.
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 14 days after Invoice
     *
     * 2 15 days after Invoice
     *
     * 3 21 days after Invoice
     *
     * 4 30 days after Invoice
     *
     * 5 45 days after Invoice
     */
    public function getPaymentTerms(): ?string
    {
        if (count($this->paymentTerms) == 0) {
            return null;
        }
        return $this->paymentTerms['value'];
    }

    /**
     * Sets Payment Terms.
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 14 days after Invoice
     *
     * 2 15 days after Invoice
     *
     * 3 21 days after Invoice
     *
     * 4 30 days after Invoice
     *
     * 5 45 days after Invoice
     *
     * @maps PaymentTerms
     */
    public function setPaymentTerms(?string $paymentTerms): void
    {
        $this->paymentTerms['value'] = $paymentTerms;
    }

    /**
     * Unsets Payment Terms.
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 14 days after Invoice
     *
     * 2 15 days after Invoice
     *
     * 3 21 days after Invoice
     *
     * 4 30 days after Invoice
     *
     * 5 45 days after Invoice
     */
    public function unsetPaymentTerms(): void
    {
        $this->paymentTerms = [];
    }

    /**
     * Returns Payment Terms Id.
     * Payment terms id of the payment customer.
     *
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 14 days after Invoice
     *
     * 2 15 days after Invoice
     *
     * 3 21 days after Invoice
     *
     * 4 30 days after Invoice
     *
     * 5 45 days after Invoice
     */
    public function getPaymentTermsId(): ?int
    {
        if (count($this->paymentTermsId) == 0) {
            return null;
        }
        return $this->paymentTermsId['value'];
    }

    /**
     * Sets Payment Terms Id.
     * Payment terms id of the payment customer.
     *
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 14 days after Invoice
     *
     * 2 15 days after Invoice
     *
     * 3 21 days after Invoice
     *
     * 4 30 days after Invoice
     *
     * 5 45 days after Invoice
     *
     * @maps PaymentTermsId
     */
    public function setPaymentTermsId(?int $paymentTermsId): void
    {
        $this->paymentTermsId['value'] = $paymentTermsId;
    }

    /**
     * Unsets Payment Terms Id.
     * Payment terms id of the payment customer.
     *
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 14 days after Invoice
     *
     * 2 15 days after Invoice
     *
     * 3 21 days after Invoice
     *
     * 4 30 days after Invoice
     *
     * 5 45 days after Invoice
     */
    public function unsetPaymentTermsId(): void
    {
        $this->paymentTermsId = [];
    }

    /**
     * Returns Replacement Invoice Id.
     * Replaced document id.
     *
     * Example: 2
     */
    public function getReplacementInvoiceId(): ?int
    {
        if (count($this->replacementInvoiceId) == 0) {
            return null;
        }
        return $this->replacementInvoiceId['value'];
    }

    /**
     * Sets Replacement Invoice Id.
     * Replaced document id.
     *
     * Example: 2
     *
     * @maps ReplacementInvoiceId
     */
    public function setReplacementInvoiceId(?int $replacementInvoiceId): void
    {
        $this->replacementInvoiceId['value'] = $replacementInvoiceId;
    }

    /**
     * Unsets Replacement Invoice Id.
     * Replaced document id.
     *
     * Example: 2
     */
    public function unsetReplacementInvoiceId(): void
    {
        $this->replacementInvoiceId = [];
    }

    /**
     * Returns Reversal Invoice Id.
     * Reversed document id.
     *
     * Example: 3
     */
    public function getReversalInvoiceId(): ?int
    {
        if (count($this->reversalInvoiceId) == 0) {
            return null;
        }
        return $this->reversalInvoiceId['value'];
    }

    /**
     * Sets Reversal Invoice Id.
     * Reversed document id.
     *
     * Example: 3
     *
     * @maps ReversalInvoiceId
     */
    public function setReversalInvoiceId(?int $reversalInvoiceId): void
    {
        $this->reversalInvoiceId['value'] = $reversalInvoiceId;
    }

    /**
     * Unsets Reversal Invoice Id.
     * Reversed document id.
     *
     * Example: 3
     */
    public function unsetReversalInvoiceId(): void
    {
        $this->reversalInvoiceId = [];
    }

    /**
     * Returns Status.
     * Status of the document. Valid values –
     *
     * • [Empty] – For all document types except for Invoice and Statement.
     *
     * • Due – Invoices/Statements due for payment and is within the due date.
     *
     * • Paid – Fully paid Invoices/Statements.
     *
     * Overdue – Invoices/Statements due of payment and has crossed the due date.
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status of the document. Valid values –
     *
     * • [Empty] – For all document types except for Invoice and Statement.
     *
     * • Due – Invoices/Statements due for payment and is within the due date.
     *
     * • Paid – Fully paid Invoices/Statements.
     *
     * Overdue – Invoices/Statements due of payment and has crossed the due date.
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status of the document. Valid values –
     *
     * • [Empty] – For all document types except for Invoice and Statement.
     *
     * • Due – Invoices/Statements due for payment and is within the due date.
     *
     * • Paid – Fully paid Invoices/Statements.
     *
     * Overdue – Invoices/Statements due of payment and has crossed the due date.
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Summary Document Billing Type.
     * Billing type description.
     *
     * Example: Id & Description
     *
     * -3 Guarantee History
     *
     * -1 Initial Balance
     *
     * 0 Standard Invoice
     *
     * 1 Immediate Invoice
     *
     * 2 Guarantee
     *
     * 4 Advanced DD Invoice
     */
    public function getSummaryDocumentBillingType(): ?string
    {
        if (count($this->summaryDocumentBillingType) == 0) {
            return null;
        }
        return $this->summaryDocumentBillingType['value'];
    }

    /**
     * Sets Summary Document Billing Type.
     * Billing type description.
     *
     * Example: Id & Description
     *
     * -3 Guarantee History
     *
     * -1 Initial Balance
     *
     * 0 Standard Invoice
     *
     * 1 Immediate Invoice
     *
     * 2 Guarantee
     *
     * 4 Advanced DD Invoice
     *
     * @maps SummaryDocumentBillingType
     */
    public function setSummaryDocumentBillingType(?string $summaryDocumentBillingType): void
    {
        $this->summaryDocumentBillingType['value'] = $summaryDocumentBillingType;
    }

    /**
     * Unsets Summary Document Billing Type.
     * Billing type description.
     *
     * Example: Id & Description
     *
     * -3 Guarantee History
     *
     * -1 Initial Balance
     *
     * 0 Standard Invoice
     *
     * 1 Immediate Invoice
     *
     * 2 Guarantee
     *
     * 4 Advanced DD Invoice
     */
    public function unsetSummaryDocumentBillingType(): void
    {
        $this->summaryDocumentBillingType = [];
    }

    /**
     * Returns Summary Document Billing Type Id.
     * Billing type id.
     *
     * Example: Id & Description
     *
     * -3 Guarantee History
     *
     * -1 Initial Balance
     *
     * 0 Standard Invoice
     *
     * 1 Immediate Invoice
     *
     * 2 Guarantee
     *
     * 4 Advanced DD Invoice
     */
    public function getSummaryDocumentBillingTypeId(): ?int
    {
        if (count($this->summaryDocumentBillingTypeId) == 0) {
            return null;
        }
        return $this->summaryDocumentBillingTypeId['value'];
    }

    /**
     * Sets Summary Document Billing Type Id.
     * Billing type id.
     *
     * Example: Id & Description
     *
     * -3 Guarantee History
     *
     * -1 Initial Balance
     *
     * 0 Standard Invoice
     *
     * 1 Immediate Invoice
     *
     * 2 Guarantee
     *
     * 4 Advanced DD Invoice
     *
     * @maps SummaryDocumentBillingTypeId
     */
    public function setSummaryDocumentBillingTypeId(?int $summaryDocumentBillingTypeId): void
    {
        $this->summaryDocumentBillingTypeId['value'] = $summaryDocumentBillingTypeId;
    }

    /**
     * Unsets Summary Document Billing Type Id.
     * Billing type id.
     *
     * Example: Id & Description
     *
     * -3 Guarantee History
     *
     * -1 Initial Balance
     *
     * 0 Standard Invoice
     *
     * 1 Immediate Invoice
     *
     * 2 Guarantee
     *
     * 4 Advanced DD Invoice
     */
    public function unsetSummaryDocumentBillingTypeId(): void
    {
        $this->summaryDocumentBillingTypeId = [];
    }

    /**
     * Returns Summary Document Date.
     * Document generated date. Format: yyyyMMdd
     *
     * Example: 20170101
     */
    public function getSummaryDocumentDate(): ?string
    {
        if (count($this->summaryDocumentDate) == 0) {
            return null;
        }
        return $this->summaryDocumentDate['value'];
    }

    /**
     * Sets Summary Document Date.
     * Document generated date. Format: yyyyMMdd
     *
     * Example: 20170101
     *
     * @maps SummaryDocumentDate
     */
    public function setSummaryDocumentDate(?string $summaryDocumentDate): void
    {
        $this->summaryDocumentDate['value'] = $summaryDocumentDate;
    }

    /**
     * Unsets Summary Document Date.
     * Document generated date. Format: yyyyMMdd
     *
     * Example: 20170101
     */
    public function unsetSummaryDocumentDate(): void
    {
        $this->summaryDocumentDate = [];
    }

    /**
     * Returns Summary Document DD Amount.
     * DD amount.
     */
    public function getSummaryDocumentDDAmount(): ?float
    {
        if (count($this->summaryDocumentDDAmount) == 0) {
            return null;
        }
        return $this->summaryDocumentDDAmount['value'];
    }

    /**
     * Sets Summary Document DD Amount.
     * DD amount.
     *
     * @maps SummaryDocumentDDAmount
     */
    public function setSummaryDocumentDDAmount(?float $summaryDocumentDDAmount): void
    {
        $this->summaryDocumentDDAmount['value'] = $summaryDocumentDDAmount;
    }

    /**
     * Unsets Summary Document DD Amount.
     * DD amount.
     */
    public function unsetSummaryDocumentDDAmount(): void
    {
        $this->summaryDocumentDDAmount = [];
    }

    /**
     * Returns Summary Document Due Date.
     * Due date for document. Format: yyyyMMdd
     *
     * Example: 20170115
     */
    public function getSummaryDocumentDueDate(): ?string
    {
        if (count($this->summaryDocumentDueDate) == 0) {
            return null;
        }
        return $this->summaryDocumentDueDate['value'];
    }

    /**
     * Sets Summary Document Due Date.
     * Due date for document. Format: yyyyMMdd
     *
     * Example: 20170115
     *
     * @maps SummaryDocumentDueDate
     */
    public function setSummaryDocumentDueDate(?string $summaryDocumentDueDate): void
    {
        $this->summaryDocumentDueDate['value'] = $summaryDocumentDueDate;
    }

    /**
     * Unsets Summary Document Due Date.
     * Due date for document. Format: yyyyMMdd
     *
     * Example: 20170115
     */
    public function unsetSummaryDocumentDueDate(): void
    {
        $this->summaryDocumentDueDate = [];
    }

    /**
     * Returns Summary Document Id.
     * Summary document identifier
     *
     * Example: 1
     */
    public function getSummaryDocumentId(): ?int
    {
        if (count($this->summaryDocumentId) == 0) {
            return null;
        }
        return $this->summaryDocumentId['value'];
    }

    /**
     * Sets Summary Document Id.
     * Summary document identifier
     *
     * Example: 1
     *
     * @maps SummaryDocumentId
     */
    public function setSummaryDocumentId(?int $summaryDocumentId): void
    {
        $this->summaryDocumentId['value'] = $summaryDocumentId;
    }

    /**
     * Unsets Summary Document Id.
     * Summary document identifier
     *
     * Example: 1
     */
    public function unsetSummaryDocumentId(): void
    {
        $this->summaryDocumentId = [];
    }

    /**
     * Returns Summary Document Is Fully Paid.
     * True/False
     *
     * True if invoice amount is fully paid, else false
     */
    public function getSummaryDocumentIsFullyPaid(): ?bool
    {
        if (count($this->summaryDocumentIsFullyPaid) == 0) {
            return null;
        }
        return $this->summaryDocumentIsFullyPaid['value'];
    }

    /**
     * Sets Summary Document Is Fully Paid.
     * True/False
     *
     * True if invoice amount is fully paid, else false
     *
     * @maps SummaryDocumentIsFullyPaid
     */
    public function setSummaryDocumentIsFullyPaid(?bool $summaryDocumentIsFullyPaid): void
    {
        $this->summaryDocumentIsFullyPaid['value'] = $summaryDocumentIsFullyPaid;
    }

    /**
     * Unsets Summary Document Is Fully Paid.
     * True/False
     *
     * True if invoice amount is fully paid, else false
     */
    public function unsetSummaryDocumentIsFullyPaid(): void
    {
        $this->summaryDocumentIsFullyPaid = [];
    }

    /**
     * Returns Summary Document Number.
     * Summary document number
     *
     * Example: ‘0/CZ0000000123456/2017’
     */
    public function getSummaryDocumentNumber(): ?string
    {
        if (count($this->summaryDocumentNumber) == 0) {
            return null;
        }
        return $this->summaryDocumentNumber['value'];
    }

    /**
     * Sets Summary Document Number.
     * Summary document number
     *
     * Example: ‘0/CZ0000000123456/2017’
     *
     * @maps SummaryDocumentNumber
     */
    public function setSummaryDocumentNumber(?string $summaryDocumentNumber): void
    {
        $this->summaryDocumentNumber['value'] = $summaryDocumentNumber;
    }

    /**
     * Unsets Summary Document Number.
     * Summary document number
     *
     * Example: ‘0/CZ0000000123456/2017’
     */
    public function unsetSummaryDocumentNumber(): void
    {
        $this->summaryDocumentNumber = [];
    }

    /**
     * Returns Summary Document Paid Amount.
     * Total amount paid.
     */
    public function getSummaryDocumentPaidAmount(): ?float
    {
        if (count($this->summaryDocumentPaidAmount) == 0) {
            return null;
        }
        return $this->summaryDocumentPaidAmount['value'];
    }

    /**
     * Sets Summary Document Paid Amount.
     * Total amount paid.
     *
     * @maps SummaryDocumentPaidAmount
     */
    public function setSummaryDocumentPaidAmount(?float $summaryDocumentPaidAmount): void
    {
        $this->summaryDocumentPaidAmount['value'] = $summaryDocumentPaidAmount;
    }

    /**
     * Unsets Summary Document Paid Amount.
     * Total amount paid.
     */
    public function unsetSummaryDocumentPaidAmount(): void
    {
        $this->summaryDocumentPaidAmount = [];
    }

    /**
     * Returns Summary Document So a Reference Number.
     * Statement of Account reference number of the payment customer.
     */
    public function getSummaryDocumentSoAReferenceNumber(): ?string
    {
        if (count($this->summaryDocumentSoAReferenceNumber) == 0) {
            return null;
        }
        return $this->summaryDocumentSoAReferenceNumber['value'];
    }

    /**
     * Sets Summary Document So a Reference Number.
     * Statement of Account reference number of the payment customer.
     *
     * @maps SummaryDocumentSoAReferenceNumber
     */
    public function setSummaryDocumentSoAReferenceNumber(?string $summaryDocumentSoAReferenceNumber): void
    {
        $this->summaryDocumentSoAReferenceNumber['value'] = $summaryDocumentSoAReferenceNumber;
    }

    /**
     * Unsets Summary Document So a Reference Number.
     * Statement of Account reference number of the payment customer.
     */
    public function unsetSummaryDocumentSoAReferenceNumber(): void
    {
        $this->summaryDocumentSoAReferenceNumber = [];
    }

    /**
     * Returns Summary Document Statement of Account Id.
     * Statement of Account Id of the payment customer.
     */
    public function getSummaryDocumentStatementOfAccountId(): ?int
    {
        if (count($this->summaryDocumentStatementOfAccountId) == 0) {
            return null;
        }
        return $this->summaryDocumentStatementOfAccountId['value'];
    }

    /**
     * Sets Summary Document Statement of Account Id.
     * Statement of Account Id of the payment customer.
     *
     * @maps SummaryDocumentStatementOfAccountId
     */
    public function setSummaryDocumentStatementOfAccountId(?int $summaryDocumentStatementOfAccountId): void
    {
        $this->summaryDocumentStatementOfAccountId['value'] = $summaryDocumentStatementOfAccountId;
    }

    /**
     * Unsets Summary Document Statement of Account Id.
     * Statement of Account Id of the payment customer.
     */
    public function unsetSummaryDocumentStatementOfAccountId(): void
    {
        $this->summaryDocumentStatementOfAccountId = [];
    }

    /**
     * Returns Transaction Currency Code.
     * Transaction currency ISO code.
     *
     * Example: EUR
     */
    public function getTransactionCurrencyCode(): ?string
    {
        if (count($this->transactionCurrencyCode) == 0) {
            return null;
        }
        return $this->transactionCurrencyCode['value'];
    }

    /**
     * Sets Transaction Currency Code.
     * Transaction currency ISO code.
     *
     * Example: EUR
     *
     * @maps TransactionCurrencyCode
     */
    public function setTransactionCurrencyCode(?string $transactionCurrencyCode): void
    {
        $this->transactionCurrencyCode['value'] = $transactionCurrencyCode;
    }

    /**
     * Unsets Transaction Currency Code.
     * Transaction currency ISO code.
     *
     * Example: EUR
     */
    public function unsetTransactionCurrencyCode(): void
    {
        $this->transactionCurrencyCode = [];
    }

    /**
     * Returns Transaction Currency Symbol.
     * Transaction currency symbol.
     *
     * Example: €
     */
    public function getTransactionCurrencySymbol(): ?string
    {
        if (count($this->transactionCurrencySymbol) == 0) {
            return null;
        }
        return $this->transactionCurrencySymbol['value'];
    }

    /**
     * Sets Transaction Currency Symbol.
     * Transaction currency symbol.
     *
     * Example: €
     *
     * @maps TransactionCurrencySymbol
     */
    public function setTransactionCurrencySymbol(?string $transactionCurrencySymbol): void
    {
        $this->transactionCurrencySymbol['value'] = $transactionCurrencySymbol;
    }

    /**
     * Unsets Transaction Currency Symbol.
     * Transaction currency symbol.
     *
     * Example: €
     */
    public function unsetTransactionCurrencySymbol(): void
    {
        $this->transactionCurrencySymbol = [];
    }

    /**
     * Returns Type.
     * Invoice type description.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Original
     *
     * 2 Reversal
     *
     * 3 Replacement
     *
     * Example: Original
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     * Invoice type description.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Original
     *
     * 2 Reversal
     *
     * 3 Replacement
     *
     * Example: Original
     *
     * @maps Type
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     * Invoice type description.
     *
     * A few of the possible IDs and Description are below:
     *
     * 1 Original
     *
     * 2 Reversal
     *
     * 3 Replacement
     *
     * Example: Original
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Type Id.
     * Invoice type id.
     *
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 Original
     *
     * 2 Reversal
     *
     * 3 Replacement
     *
     * Example: 1
     */
    public function getTypeId(): ?int
    {
        if (count($this->typeId) == 0) {
            return null;
        }
        return $this->typeId['value'];
    }

    /**
     * Sets Type Id.
     * Invoice type id.
     *
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 Original
     *
     * 2 Reversal
     *
     * 3 Replacement
     *
     * Example: 1
     *
     * @maps TypeId
     */
    public function setTypeId(?int $typeId): void
    {
        $this->typeId['value'] = $typeId;
    }

    /**
     * Unsets Type Id.
     * Invoice type id.
     *
     * A few of the possible IDs and Descriptions are below:
     *
     * 1 Original
     *
     * 2 Reversal
     *
     * 3 Replacement
     *
     * Example: 1
     */
    public function unsetTypeId(): void
    {
        $this->typeId = [];
    }

    /**
     * Returns V at Amount Customer Currency.
     * VAT amount in customer currency in the document
     */
    public function getVATAmountCustomerCurrency(): ?float
    {
        if (count($this->vATAmountCustomerCurrency) == 0) {
            return null;
        }
        return $this->vATAmountCustomerCurrency['value'];
    }

    /**
     * Sets V at Amount Customer Currency.
     * VAT amount in customer currency in the document
     *
     * @maps VATAmountCustomerCurrency
     */
    public function setVATAmountCustomerCurrency(?float $vATAmountCustomerCurrency): void
    {
        $this->vATAmountCustomerCurrency['value'] = $vATAmountCustomerCurrency;
    }

    /**
     * Unsets V at Amount Customer Currency.
     * VAT amount in customer currency in the document
     */
    public function unsetVATAmountCustomerCurrency(): void
    {
        $this->vATAmountCustomerCurrency = [];
    }

    /**
     * Returns V at Amount Transaction Currency.
     * VAT amount in transaction currency in the document
     */
    public function getVATAmountTransactionCurrency(): ?float
    {
        if (count($this->vATAmountTransactionCurrency) == 0) {
            return null;
        }
        return $this->vATAmountTransactionCurrency['value'];
    }

    /**
     * Sets V at Amount Transaction Currency.
     * VAT amount in transaction currency in the document
     *
     * @maps VATAmountTransactionCurrency
     */
    public function setVATAmountTransactionCurrency(?float $vATAmountTransactionCurrency): void
    {
        $this->vATAmountTransactionCurrency['value'] = $vATAmountTransactionCurrency;
    }

    /**
     * Unsets V at Amount Transaction Currency.
     * VAT amount in transaction currency in the document
     */
    public function unsetVATAmountTransactionCurrency(): void
    {
        $this->vATAmountTransactionCurrency = [];
    }

    /**
     * Returns V at Country.
     * Country name of the VAT country.
     *
     * Example: France, Germany
     */
    public function getVATCountry(): ?string
    {
        if (count($this->vATCountry) == 0) {
            return null;
        }
        return $this->vATCountry['value'];
    }

    /**
     * Sets V at Country.
     * Country name of the VAT country.
     *
     * Example: France, Germany
     *
     * @maps VATCountry
     */
    public function setVATCountry(?string $vATCountry): void
    {
        $this->vATCountry['value'] = $vATCountry;
    }

    /**
     * Unsets V at Country.
     * Country name of the VAT country.
     *
     * Example: France, Germany
     */
    public function unsetVATCountry(): void
    {
        $this->vATCountry = [];
    }

    /**
     * Returns V at Country Id.
     * Country Id of the VAT country.
     *
     * Example: 1,2
     */
    public function getVATCountryId(): ?int
    {
        if (count($this->vATCountryId) == 0) {
            return null;
        }
        return $this->vATCountryId['value'];
    }

    /**
     * Sets V at Country Id.
     * Country Id of the VAT country.
     *
     * Example: 1,2
     *
     * @maps VATCountryId
     */
    public function setVATCountryId(?int $vATCountryId): void
    {
        $this->vATCountryId['value'] = $vATCountryId;
    }

    /**
     * Unsets V at Country Id.
     * Country Id of the VAT country.
     *
     * Example: 1,2
     */
    public function unsetVATCountryId(): void
    {
        $this->vATCountryId = [];
    }

    /**
     * Returns V at Country ISO Code.
     * Country ISO code of the VAT country.
     *
     * Example : CZ, SK, UK, etc.,
     */
    public function getVATCountryISOCode(): ?string
    {
        if (count($this->vATCountryISOCode) == 0) {
            return null;
        }
        return $this->vATCountryISOCode['value'];
    }

    /**
     * Sets V at Country ISO Code.
     * Country ISO code of the VAT country.
     *
     * Example : CZ, SK, UK, etc.,
     *
     * @maps VATCountryISOCode
     */
    public function setVATCountryISOCode(?string $vATCountryISOCode): void
    {
        $this->vATCountryISOCode['value'] = $vATCountryISOCode;
    }

    /**
     * Unsets V at Country ISO Code.
     * Country ISO code of the VAT country.
     *
     * Example : CZ, SK, UK, etc.,
     */
    public function unsetVATCountryISOCode(): void
    {
        $this->vATCountryISOCode = [];
    }

    /**
     * Returns V at Country Op Co Id.
     * VAT country’s OpCo Id.
     *
     * Example: 032
     */
    public function getVATCountryOpCoId(): ?string
    {
        if (count($this->vATCountryOpCoId) == 0) {
            return null;
        }
        return $this->vATCountryOpCoId['value'];
    }

    /**
     * Sets V at Country Op Co Id.
     * VAT country’s OpCo Id.
     *
     * Example: 032
     *
     * @maps VATCountryOpCoId
     */
    public function setVATCountryOpCoId(?string $vATCountryOpCoId): void
    {
        $this->vATCountryOpCoId['value'] = $vATCountryOpCoId;
    }

    /**
     * Unsets V at Country Op Co Id.
     * VAT country’s OpCo Id.
     *
     * Example: 032
     */
    public function unsetVATCountryOpCoId(): void
    {
        $this->vATCountryOpCoId = [];
    }

    /**
     * Returns Document Reference.
     * document reference number of the Invoice file
     */
    public function getDocumentReference(): ?string
    {
        if (count($this->documentReference) == 0) {
            return null;
        }
        return $this->documentReference['value'];
    }

    /**
     * Sets Document Reference.
     * document reference number of the Invoice file
     *
     * @maps DocumentReference
     */
    public function setDocumentReference(?string $documentReference): void
    {
        $this->documentReference['value'] = $documentReference;
    }

    /**
     * Unsets Document Reference.
     * document reference number of the Invoice file
     */
    public function unsetDocumentReference(): void
    {
        $this->documentReference = [];
    }

    /**
     * Returns Additional Documents.
     *
     * @return InvoiceSearchAdditionalDocument[]|null
     */
    public function getAdditionalDocuments(): ?array
    {
        return $this->additionalDocuments;
    }

    /**
     * Sets Additional Documents.
     *
     * @maps AdditionalDocuments
     *
     * @param InvoiceSearchAdditionalDocument[]|null $additionalDocuments
     */
    public function setAdditionalDocuments(?array $additionalDocuments): void
    {
        $this->additionalDocuments = $additionalDocuments;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountFullName)) {
            $json['AccountFullName']                     = $this->accountFullName['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                           = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                       = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']                    = $this->accountShortName['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                             = $this->colCoId['value'];
        }
        if (!empty($this->colCoOpCoId)) {
            $json['ColCoOpCoId']                         = $this->colCoOpCoId['value'];
        }
        if (!empty($this->currentBillingFrequency)) {
            $json['CurrentBillingFrequency']             = $this->currentBillingFrequency['value'];
        }
        if (!empty($this->currentBillingFrequencyId)) {
            $json['CurrentBillingFrequencyId']           = $this->currentBillingFrequencyId['value'];
        }
        if (!empty($this->currentDistributionMethod)) {
            $json['CurrentDistributionMethod']           = $this->currentDistributionMethod['value'];
        }
        if (!empty($this->currentDistributionMethodId)) {
            $json['CurrentDistributionMethodId']         = $this->currentDistributionMethodId['value'];
        }
        if (!empty($this->customerCurrencyCode)) {
            $json['CustomerCurrencyCode']                = $this->customerCurrencyCode['value'];
        }
        if (!empty($this->customerCurrencySymbol)) {
            $json['CustomerCurrencySymbol']              = $this->customerCurrencySymbol['value'];
        }
        if (!empty($this->delCoClientNumber)) {
            $json['DelCoClientNumber']                   = $this->delCoClientNumber['value'];
        }
        if (!empty($this->delCoId)) {
            $json['DelCoId']                             = $this->delCoId['value'];
        }
        if (!empty($this->delCoOpCoId)) {
            $json['DelCoOpCoId']                         = $this->delCoOpCoId['value'];
        }
        if (!empty($this->documentType)) {
            $json['DocumentType']                        = $this->documentType['value'];
        }
        if (!empty($this->documentTypeId)) {
            $json['DocumentTypeId']                      = $this->documentTypeId['value'];
        }
        if (!empty($this->dueDate)) {
            $json['DueDate']                             = $this->dueDate['value'];
        }
        if (!empty($this->grossAmountCustomerCurrency)) {
            $json['GrossAmountCustomerCurrency']         = $this->grossAmountCustomerCurrency['value'];
        }
        if (!empty($this->grossAmountTransactionCurrency)) {
            $json['GrossAmountTransactionCurrency']      = $this->grossAmountTransactionCurrency['value'];
        }
        if (!empty($this->invoiceDate)) {
            $json['InvoiceDate']                         = $this->invoiceDate['value'];
        }
        if (!empty($this->invoicedBy)) {
            $json['InvoicedBy']                          = $this->invoicedBy['value'];
        }
        if (!empty($this->invoicedOnBehalfOf)) {
            $json['InvoicedOnBehalfOf']                  = $this->invoicedOnBehalfOf['value'];
        }
        if (!empty($this->invoiceId)) {
            $json['InvoiceId']                           = $this->invoiceId['value'];
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber']                       = $this->invoiceNumber['value'];
        }
        if (!empty($this->isInternational)) {
            $json['IsInternational']                     = $this->isInternational['value'];
        }
        if (!empty($this->isNational)) {
            $json['IsNational']                          = $this->isNational['value'];
        }
        if (!empty($this->netAmountCustomerCurrency)) {
            $json['NetAmountCustomerCurrency']           = $this->netAmountCustomerCurrency['value'];
        }
        if (!empty($this->netAmountTransactionCurrency)) {
            $json['NetAmountTransactionCurrency']        = $this->netAmountTransactionCurrency['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                             = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                         = $this->payerNumber['value'];
        }
        if (!empty($this->paymentTerms)) {
            $json['PaymentTerms']                        = $this->paymentTerms['value'];
        }
        if (!empty($this->paymentTermsId)) {
            $json['PaymentTermsId']                      = $this->paymentTermsId['value'];
        }
        if (!empty($this->replacementInvoiceId)) {
            $json['ReplacementInvoiceId']                = $this->replacementInvoiceId['value'];
        }
        if (!empty($this->reversalInvoiceId)) {
            $json['ReversalInvoiceId']                   = $this->reversalInvoiceId['value'];
        }
        if (!empty($this->status)) {
            $json['Status']                              = $this->status['value'];
        }
        if (!empty($this->summaryDocumentBillingType)) {
            $json['SummaryDocumentBillingType']          = $this->summaryDocumentBillingType['value'];
        }
        if (!empty($this->summaryDocumentBillingTypeId)) {
            $json['SummaryDocumentBillingTypeId']        = $this->summaryDocumentBillingTypeId['value'];
        }
        if (!empty($this->summaryDocumentDate)) {
            $json['SummaryDocumentDate']                 = $this->summaryDocumentDate['value'];
        }
        if (!empty($this->summaryDocumentDDAmount)) {
            $json['SummaryDocumentDDAmount']             = $this->summaryDocumentDDAmount['value'];
        }
        if (!empty($this->summaryDocumentDueDate)) {
            $json['SummaryDocumentDueDate']              = $this->summaryDocumentDueDate['value'];
        }
        if (!empty($this->summaryDocumentId)) {
            $json['SummaryDocumentId']                   = $this->summaryDocumentId['value'];
        }
        if (!empty($this->summaryDocumentIsFullyPaid)) {
            $json['SummaryDocumentIsFullyPaid']          = $this->summaryDocumentIsFullyPaid['value'];
        }
        if (!empty($this->summaryDocumentNumber)) {
            $json['SummaryDocumentNumber']               = $this->summaryDocumentNumber['value'];
        }
        if (!empty($this->summaryDocumentPaidAmount)) {
            $json['SummaryDocumentPaidAmount']           = $this->summaryDocumentPaidAmount['value'];
        }
        if (!empty($this->summaryDocumentSoAReferenceNumber)) {
            $json['SummaryDocumentSoAReferenceNumber']   = $this->summaryDocumentSoAReferenceNumber['value'];
        }
        if (!empty($this->summaryDocumentStatementOfAccountId)) {
            $json['SummaryDocumentStatementOfAccountId'] = $this->summaryDocumentStatementOfAccountId['value'];
        }
        if (!empty($this->transactionCurrencyCode)) {
            $json['TransactionCurrencyCode']             = $this->transactionCurrencyCode['value'];
        }
        if (!empty($this->transactionCurrencySymbol)) {
            $json['TransactionCurrencySymbol']           = $this->transactionCurrencySymbol['value'];
        }
        if (!empty($this->type)) {
            $json['Type']                                = $this->type['value'];
        }
        if (!empty($this->typeId)) {
            $json['TypeId']                              = $this->typeId['value'];
        }
        if (!empty($this->vATAmountCustomerCurrency)) {
            $json['VATAmountCustomerCurrency']           = $this->vATAmountCustomerCurrency['value'];
        }
        if (!empty($this->vATAmountTransactionCurrency)) {
            $json['VATAmountTransactionCurrency']        = $this->vATAmountTransactionCurrency['value'];
        }
        if (!empty($this->vATCountry)) {
            $json['VATCountry']                          = $this->vATCountry['value'];
        }
        if (!empty($this->vATCountryId)) {
            $json['VATCountryId']                        = $this->vATCountryId['value'];
        }
        if (!empty($this->vATCountryISOCode)) {
            $json['VATCountryISOCode']                   = $this->vATCountryISOCode['value'];
        }
        if (!empty($this->vATCountryOpCoId)) {
            $json['VATCountryOpCoId']                    = $this->vATCountryOpCoId['value'];
        }
        if (!empty($this->documentReference)) {
            $json['DocumentReference']                   = $this->documentReference['value'];
        }
        if (isset($this->additionalDocuments)) {
            $json['AdditionalDocuments']                 = $this->additionalDocuments;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

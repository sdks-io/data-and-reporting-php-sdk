<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CardExceptions implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $currencyCode = [];

    /**
     * @var array
     */
    private $currencySymbol = [];

    /**
     * @var array
     */
    private $day = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $month = [];

    /**
     * @var array
     */
    private $pAN = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerShortName = [];

    /**
     * @var array
     */
    private $totalAmount = [];

    /**
     * @var array
     */
    private $totalQuantity = [];

    /**
     * @var array
     */
    private $totalSalesItems = [];

    /**
     * @var array
     */
    private $totalTransactions = [];

    /**
     * @var array
     */
    private $vRN = [];

    /**
     * @var array
     */
    private $week = [];

    /**
     * @var array
     */
    private $year = [];

    /**
     * Returns Account Id.
     * Account Id
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Account Short Name
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account Short Name
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account Short Name
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card Id
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card Id
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Currency Code.
     * ISO currency code
     */
    public function getCurrencyCode(): ?string
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * ISO currency code
     *
     * @maps CurrencyCode
     */
    public function setCurrencyCode(?string $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * ISO currency code
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    /**
     * Returns Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     */
    public function getCurrencySymbol(): ?string
    {
        if (count($this->currencySymbol) == 0) {
            return null;
        }
        return $this->currencySymbol['value'];
    }

    /**
     * Sets Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * @maps CurrencySymbol
     */
    public function setCurrencySymbol(?string $currencySymbol): void
    {
        $this->currencySymbol['value'] = $currencySymbol;
    }

    /**
     * Unsets Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     */
    public function unsetCurrencySymbol(): void
    {
        $this->currencySymbol = [];
    }

    /**
     * Returns Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     */
    public function getDay(): ?int
    {
        if (count($this->day) == 0) {
            return null;
        }
        return $this->day['value'];
    }

    /**
     * Sets Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     *
     * @maps Day
     */
    public function setDay(?int $day): void
    {
        $this->day['value'] = $day;
    }

    /**
     * Unsets Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     */
    public function unsetDay(): void
    {
        $this->day = [];
    }

    /**
     * Returns Driver Name.
     * Driver name
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver name
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver name
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     */
    public function getMonth(): ?int
    {
        if (count($this->month) == 0) {
            return null;
        }
        return $this->month['value'];
    }

    /**
     * Sets Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     *
     * @maps Month
     */
    public function setMonth(?int $month): void
    {
        $this->month['value'] = $month;
    }

    /**
     * Unsets Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     */
    public function unsetMonth(): void
    {
        $this->month = [];
    }

    /**
     * Returns P AN.
     * Card PAN
     */
    public function getPAN(): ?string
    {
        if (count($this->pAN) == 0) {
            return null;
        }
        return $this->pAN['value'];
    }

    /**
     * Sets P AN.
     * Card PAN
     *
     * @maps PAN
     */
    public function setPAN(?string $pAN): void
    {
        $this->pAN['value'] = $pAN;
    }

    /**
     * Unsets P AN.
     * Card PAN
     */
    public function unsetPAN(): void
    {
        $this->pAN = [];
    }

    /**
     * Returns Payer Id.
     * Payment customer id of the customer
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payment customer id of the customer
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payment customer id of the customer
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payment customer number
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payment customer number
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payment customer number
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Short Name.
     * Payer Short Name
     */
    public function getPayerShortName(): ?string
    {
        if (count($this->payerShortName) == 0) {
            return null;
        }
        return $this->payerShortName['value'];
    }

    /**
     * Sets Payer Short Name.
     * Payer Short Name
     *
     * @maps PayerShortName
     */
    public function setPayerShortName(?string $payerShortName): void
    {
        $this->payerShortName['value'] = $payerShortName;
    }

    /**
     * Unsets Payer Short Name.
     * Payer Short Name
     */
    public function unsetPayerShortName(): void
    {
        $this->payerShortName = [];
    }

    /**
     * Returns Total Amount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     */
    public function getTotalAmount(): ?float
    {
        if (count($this->totalAmount) == 0) {
            return null;
        }
        return $this->totalAmount['value'];
    }

    /**
     * Sets Total Amount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     *
     * @maps TotalAmount
     */
    public function setTotalAmount(?float $totalAmount): void
    {
        $this->totalAmount['value'] = $totalAmount;
    }

    /**
     * Unsets Total Amount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     */
    public function unsetTotalAmount(): void
    {
        $this->totalAmount = [];
    }

    /**
     * Returns Total Quantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     */
    public function getTotalQuantity(): ?int
    {
        if (count($this->totalQuantity) == 0) {
            return null;
        }
        return $this->totalQuantity['value'];
    }

    /**
     * Sets Total Quantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     *
     * @maps TotalQuantity
     */
    public function setTotalQuantity(?int $totalQuantity): void
    {
        $this->totalQuantity['value'] = $totalQuantity;
    }

    /**
     * Unsets Total Quantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     */
    public function unsetTotalQuantity(): void
    {
        $this->totalQuantity = [];
    }

    /**
     * Returns Total Sales Items.
     * Total number of Sales Items met with the given exception criteria.
     */
    public function getTotalSalesItems(): ?int
    {
        if (count($this->totalSalesItems) == 0) {
            return null;
        }
        return $this->totalSalesItems['value'];
    }

    /**
     * Sets Total Sales Items.
     * Total number of Sales Items met with the given exception criteria.
     *
     * @maps TotalSalesItems
     */
    public function setTotalSalesItems(?int $totalSalesItems): void
    {
        $this->totalSalesItems['value'] = $totalSalesItems;
    }

    /**
     * Unsets Total Sales Items.
     * Total number of Sales Items met with the given exception criteria.
     */
    public function unsetTotalSalesItems(): void
    {
        $this->totalSalesItems = [];
    }

    /**
     * Returns Total Transactions.
     * Total number of Transactions met with the given exception criteria.
     */
    public function getTotalTransactions(): ?int
    {
        if (count($this->totalTransactions) == 0) {
            return null;
        }
        return $this->totalTransactions['value'];
    }

    /**
     * Sets Total Transactions.
     * Total number of Transactions met with the given exception criteria.
     *
     * @maps TotalTransactions
     */
    public function setTotalTransactions(?int $totalTransactions): void
    {
        $this->totalTransactions['value'] = $totalTransactions;
    }

    /**
     * Unsets Total Transactions.
     * Total number of Transactions met with the given exception criteria.
     */
    public function unsetTotalTransactions(): void
    {
        $this->totalTransactions = [];
    }

    /**
     * Returns V RN.
     * Vehicle Registration Number
     */
    public function getVRN(): ?string
    {
        if (count($this->vRN) == 0) {
            return null;
        }
        return $this->vRN['value'];
    }

    /**
     * Sets V RN.
     * Vehicle Registration Number
     *
     * @maps VRN
     */
    public function setVRN(?string $vRN): void
    {
        $this->vRN['value'] = $vRN;
    }

    /**
     * Unsets V RN.
     * Vehicle Registration Number
     */
    public function unsetVRN(): void
    {
        $this->vRN = [];
    }

    /**
     * Returns Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is Passed as
     * ‘Week’.
     */
    public function getWeek(): ?int
    {
        if (count($this->week) == 0) {
            return null;
        }
        return $this->week['value'];
    }

    /**
     * Sets Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is Passed as
     * ‘Week’.
     *
     * @maps Week
     */
    public function setWeek(?int $week): void
    {
        $this->week['value'] = $week;
    }

    /**
     * Unsets Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is Passed as
     * ‘Week’.
     */
    public function unsetWeek(): void
    {
        $this->week = [];
    }

    /**
     * Returns Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     */
    public function getYear(): ?int
    {
        if (count($this->year) == 0) {
            return null;
        }
        return $this->year['value'];
    }

    /**
     * Sets Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     *
     * @maps Year
     */
    public function setYear(?int $year): void
    {
        $this->year['value'] = $year;
    }

    /**
     * Unsets Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     */
    public function unsetYear(): void
    {
        $this->year = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']         = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']     = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']  = $this->accountShortName['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']            = $this->cardId['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['CurrencyCode']      = $this->currencyCode['value'];
        }
        if (!empty($this->currencySymbol)) {
            $json['CurrencySymbol']    = $this->currencySymbol['value'];
        }
        if (!empty($this->day)) {
            $json['Day']               = $this->day['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']        = $this->driverName['value'];
        }
        if (!empty($this->month)) {
            $json['Month']             = $this->month['value'];
        }
        if (!empty($this->pAN)) {
            $json['PAN']               = $this->pAN['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']           = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']       = $this->payerNumber['value'];
        }
        if (!empty($this->payerShortName)) {
            $json['PayerShortName']    = $this->payerShortName['value'];
        }
        if (!empty($this->totalAmount)) {
            $json['TotalAmount']       = $this->totalAmount['value'];
        }
        if (!empty($this->totalQuantity)) {
            $json['TotalQuantity']     = $this->totalQuantity['value'];
        }
        if (!empty($this->totalSalesItems)) {
            $json['TotalSalesItems']   = $this->totalSalesItems['value'];
        }
        if (!empty($this->totalTransactions)) {
            $json['TotalTransactions'] = $this->totalTransactions['value'];
        }
        if (!empty($this->vRN)) {
            $json['VRN']               = $this->vRN['value'];
        }
        if (!empty($this->week)) {
            $json['Week']              = $this->week['value'];
        }
        if (!empty($this->year)) {
            $json['Year']              = $this->year['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

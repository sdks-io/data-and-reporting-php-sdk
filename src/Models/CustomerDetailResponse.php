<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class CustomerDetailResponse implements \JsonSerializable
{
    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $accountTradingName = [];

    /**
     * @var bool|null
     */
    private $allowFleetIdInput;

    /**
     * @var array
     */
    private $band = [];

    /**
     * @var Address|null
     */
    private $billingAddress;

    /**
     * @var array
     */
    private $cardGroupPosition = [];

    /**
     * @var Address|null
     */
    private $correspondenceAddress;

    /**
     * @var DeliveryAddresses[]|null
     */
    private $deliveryAddresses;

    /**
     * @var bool|null
     */
    private $fleetPin;

    /**
     * @var array
     */
    private $fullName = [];

    /**
     * @var array
     */
    private $invoiceCustomerId = [];

    /**
     * @var array
     */
    private $invoiceCustomerShortName = [];

    /**
     * @var array
     */
    private $isInvoicePoint = [];

    /**
     * @var array
     */
    private $marketingSegmentation = [];

    /**
     * @var array
     */
    private $vATNumber = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerName = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $selfSelectedPin = [];

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var array
     */
    private $defaultPINAdviceType = [];

    /**
     * @var PINAdviceTypes[]|null
     */
    private $pINAdviceTypes;

    /**
     * @var ErrorStatus|null
     */
    private $error;

    /**
     * @var array
     */
    private $requestId = [];

    /**
     * @var bool|null
     */
    private $pINChangeAllowedByCardholder;

    /**
     * @var bool|null
     */
    private $pINChangeAllowedFromFleetPIN;

    /**
     * Returns Account Id.
     * Account Id of the selected account.
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id of the selected account.
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id of the selected account.
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Name.
     * Account Name of the selected account.
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Account Name of the selected account.
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Account Name of the selected account.
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Account Number.
     * Account Number of the selected account.
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number of the selected account.
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number of the selected account.
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Short Name.
     * Short name of the customer.
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Short name of the customer.
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Short name of the customer.
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Account Trading Name.
     * Trading name of the customer
     */
    public function getAccountTradingName(): ?string
    {
        if (count($this->accountTradingName) == 0) {
            return null;
        }
        return $this->accountTradingName['value'];
    }

    /**
     * Sets Account Trading Name.
     * Trading name of the customer
     *
     * @maps AccountTradingName
     */
    public function setAccountTradingName(?string $accountTradingName): void
    {
        $this->accountTradingName['value'] = $accountTradingName;
    }

    /**
     * Unsets Account Trading Name.
     * Trading name of the customer
     */
    public function unsetAccountTradingName(): void
    {
        $this->accountTradingName = [];
    }

    /**
     * Returns Allow Fleet Id Input.
     * True/False.
     *
     * When false, users should not be allowed to enable Fleet Id prompt option while ordering cards under
     * this account.
     */
    public function getAllowFleetIdInput(): ?bool
    {
        return $this->allowFleetIdInput;
    }

    /**
     * Sets Allow Fleet Id Input.
     * True/False.
     *
     * When false, users should not be allowed to enable Fleet Id prompt option while ordering cards under
     * this account.
     *
     * @maps AllowFleetIdInput
     */
    public function setAllowFleetIdInput(?bool $allowFleetIdInput): void
    {
        $this->allowFleetIdInput = $allowFleetIdInput;
    }

    /**
     * Returns Band.
     * Band Id and Description of the Payer in Card Platform
     *
     * e.g. (Id – Description):
     *
     * 1-Platinum
     *
     * 2-Gold
     *
     * 3-Silver
     *
     * 4-Bronze
     */
    public function getBand(): ?string
    {
        if (count($this->band) == 0) {
            return null;
        }
        return $this->band['value'];
    }

    /**
     * Sets Band.
     * Band Id and Description of the Payer in Card Platform
     *
     * e.g. (Id – Description):
     *
     * 1-Platinum
     *
     * 2-Gold
     *
     * 3-Silver
     *
     * 4-Bronze
     *
     * @maps Band
     */
    public function setBand(?string $band): void
    {
        $this->band['value'] = $band;
    }

    /**
     * Unsets Band.
     * Band Id and Description of the Payer in Card Platform
     *
     * e.g. (Id – Description):
     *
     * 1-Platinum
     *
     * 2-Gold
     *
     * 3-Silver
     *
     * 4-Bronze
     */
    public function unsetBand(): void
    {
        $this->band = [];
    }

    /**
     * Returns Billing Address.
     */
    public function getBillingAddress(): ?Address
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     *
     * @maps BillingAddress
     */
    public function setBillingAddress(?Address $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Card Group Position.
     * Card group position at –
     *
     * • Payer – Payer level
     *
     * • Account – Account level
     */
    public function getCardGroupPosition(): ?string
    {
        if (count($this->cardGroupPosition) == 0) {
            return null;
        }
        return $this->cardGroupPosition['value'];
    }

    /**
     * Sets Card Group Position.
     * Card group position at –
     *
     * • Payer – Payer level
     *
     * • Account – Account level
     *
     * @maps CardGroupPosition
     */
    public function setCardGroupPosition(?string $cardGroupPosition): void
    {
        $this->cardGroupPosition['value'] = $cardGroupPosition;
    }

    /**
     * Unsets Card Group Position.
     * Card group position at –
     *
     * • Payer – Payer level
     *
     * • Account – Account level
     */
    public function unsetCardGroupPosition(): void
    {
        $this->cardGroupPosition = [];
    }

    /**
     * Returns Correspondence Address.
     */
    public function getCorrespondenceAddress(): ?Address
    {
        return $this->correspondenceAddress;
    }

    /**
     * Sets Correspondence Address.
     *
     * @maps CorrespondenceAddress
     */
    public function setCorrespondenceAddress(?Address $correspondenceAddress): void
    {
        $this->correspondenceAddress = $correspondenceAddress;
    }

    /**
     * Returns Delivery Addresses.
     *
     * @return DeliveryAddresses[]|null
     */
    public function getDeliveryAddresses(): ?array
    {
        return $this->deliveryAddresses;
    }

    /**
     * Sets Delivery Addresses.
     *
     * @maps DeliveryAddresses
     *
     * @param DeliveryAddresses[]|null $deliveryAddresses
     */
    public function setDeliveryAddresses(?array $deliveryAddresses): void
    {
        $this->deliveryAddresses = $deliveryAddresses;
    }

    /**
     * Returns Fleet Pin.
     * Is Fleet Pin optional enabled for the selected account
     */
    public function getFleetPin(): ?bool
    {
        return $this->fleetPin;
    }

    /**
     * Sets Fleet Pin.
     * Is Fleet Pin optional enabled for the selected account
     *
     * @maps FleetPin
     */
    public function setFleetPin(?bool $fleetPin): void
    {
        $this->fleetPin = $fleetPin;
    }

    /**
     * Returns Full Name.
     * Full Name of the customer
     */
    public function getFullName(): ?string
    {
        if (count($this->fullName) == 0) {
            return null;
        }
        return $this->fullName['value'];
    }

    /**
     * Sets Full Name.
     * Full Name of the customer
     *
     * @maps FullName
     */
    public function setFullName(?string $fullName): void
    {
        $this->fullName['value'] = $fullName;
    }

    /**
     * Unsets Full Name.
     * Full Name of the customer
     */
    public function unsetFullName(): void
    {
        $this->fullName = [];
    }

    /**
     * Returns Invoice Customer Id.
     * Customer Id of the Invoice Point of the account
     */
    public function getInvoiceCustomerId(): ?int
    {
        if (count($this->invoiceCustomerId) == 0) {
            return null;
        }
        return $this->invoiceCustomerId['value'];
    }

    /**
     * Sets Invoice Customer Id.
     * Customer Id of the Invoice Point of the account
     *
     * @maps InvoiceCustomerId
     */
    public function setInvoiceCustomerId(?int $invoiceCustomerId): void
    {
        $this->invoiceCustomerId['value'] = $invoiceCustomerId;
    }

    /**
     * Unsets Invoice Customer Id.
     * Customer Id of the Invoice Point of the account
     */
    public function unsetInvoiceCustomerId(): void
    {
        $this->invoiceCustomerId = [];
    }

    /**
     * Returns Invoice Customer Short Name.
     * Short Name of the Invoice Point of the account
     */
    public function getInvoiceCustomerShortName(): ?string
    {
        if (count($this->invoiceCustomerShortName) == 0) {
            return null;
        }
        return $this->invoiceCustomerShortName['value'];
    }

    /**
     * Sets Invoice Customer Short Name.
     * Short Name of the Invoice Point of the account
     *
     * @maps InvoiceCustomerShortName
     */
    public function setInvoiceCustomerShortName(?string $invoiceCustomerShortName): void
    {
        $this->invoiceCustomerShortName['value'] = $invoiceCustomerShortName;
    }

    /**
     * Unsets Invoice Customer Short Name.
     * Short Name of the Invoice Point of the account
     */
    public function unsetInvoiceCustomerShortName(): void
    {
        $this->invoiceCustomerShortName = [];
    }

    /**
     * Returns Is Invoice Point.
     * Whether the account is an invoice point.
     */
    public function getIsInvoicePoint(): ?bool
    {
        if (count($this->isInvoicePoint) == 0) {
            return null;
        }
        return $this->isInvoicePoint['value'];
    }

    /**
     * Sets Is Invoice Point.
     * Whether the account is an invoice point.
     *
     * @maps IsInvoicePoint
     */
    public function setIsInvoicePoint(?bool $isInvoicePoint): void
    {
        $this->isInvoicePoint['value'] = $isInvoicePoint;
    }

    /**
     * Unsets Is Invoice Point.
     * Whether the account is an invoice point.
     */
    public function unsetIsInvoicePoint(): void
    {
        $this->isInvoicePoint = [];
    }

    /**
     * Returns Marketing Segmentation.
     * Marketing Segmentation id and description
     *
     * e.g. (Id – Description):
     *
     * 1-National CRT
     *
     * 2-International CRT & IKAs
     *
     * 3-Small Customers
     *
     * 4-National/International Fleet/IKA
     */
    public function getMarketingSegmentation(): ?string
    {
        if (count($this->marketingSegmentation) == 0) {
            return null;
        }
        return $this->marketingSegmentation['value'];
    }

    /**
     * Sets Marketing Segmentation.
     * Marketing Segmentation id and description
     *
     * e.g. (Id – Description):
     *
     * 1-National CRT
     *
     * 2-International CRT & IKAs
     *
     * 3-Small Customers
     *
     * 4-National/International Fleet/IKA
     *
     * @maps MarketingSegmentation
     */
    public function setMarketingSegmentation(?string $marketingSegmentation): void
    {
        $this->marketingSegmentation['value'] = $marketingSegmentation;
    }

    /**
     * Unsets Marketing Segmentation.
     * Marketing Segmentation id and description
     *
     * e.g. (Id – Description):
     *
     * 1-National CRT
     *
     * 2-International CRT & IKAs
     *
     * 3-Small Customers
     *
     * 4-National/International Fleet/IKA
     */
    public function unsetMarketingSegmentation(): void
    {
        $this->marketingSegmentation = [];
    }

    /**
     * Returns V at Number.
     * VAT Registration Number of Customer
     */
    public function getVATNumber(): ?string
    {
        if (count($this->vATNumber) == 0) {
            return null;
        }
        return $this->vATNumber['value'];
    }

    /**
     * Sets V at Number.
     * VAT Registration Number of Customer
     *
     * @maps VATNumber
     */
    public function setVATNumber(?string $vATNumber): void
    {
        $this->vATNumber['value'] = $vATNumber;
    }

    /**
     * Unsets V at Number.
     * VAT Registration Number of Customer
     */
    public function unsetVATNumber(): void
    {
        $this->vATNumber = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id of the selected account.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id of the selected account.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id of the selected account.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Name.
     * Payer Name of the selected account.
     */
    public function getPayerName(): ?string
    {
        if (count($this->payerName) == 0) {
            return null;
        }
        return $this->payerName['value'];
    }

    /**
     * Sets Payer Name.
     * Payer Name of the selected account.
     *
     * @maps PayerName
     */
    public function setPayerName(?string $payerName): void
    {
        $this->payerName['value'] = $payerName;
    }

    /**
     * Unsets Payer Name.
     * Payer Name of the selected account.
     */
    public function unsetPayerName(): void
    {
        $this->payerName = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected account.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected account.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected account.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Self Selected Pin.
     * Is Self-selected Pin enabled for the account
     */
    public function getSelfSelectedPin(): ?bool
    {
        if (count($this->selfSelectedPin) == 0) {
            return null;
        }
        return $this->selfSelectedPin['value'];
    }

    /**
     * Sets Self Selected Pin.
     * Is Self-selected Pin enabled for the account
     *
     * @maps SelfSelectedPin
     */
    public function setSelfSelectedPin(?bool $selfSelectedPin): void
    {
        $this->selfSelectedPin['value'] = $selfSelectedPin;
    }

    /**
     * Unsets Self Selected Pin.
     * Is Self-selected Pin enabled for the account
     */
    public function unsetSelfSelectedPin(): void
    {
        $this->selfSelectedPin = [];
    }

    /**
     * Returns Status.
     * Payer current status id and description
     *
     * e.g. (Id – Description):
     *
     * 1-Active
     *
     * 2-Requested from UTA
     *
     * 3-Awaiting embossing
     *
     * 4-Manufactured
     *
     * 5-Awaiting despatch
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Payer current status id and description
     *
     * e.g. (Id – Description):
     *
     * 1-Active
     *
     * 2-Requested from UTA
     *
     * 3-Awaiting embossing
     *
     * 4-Manufactured
     *
     * 5-Awaiting despatch
     *
     * @maps Status
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Payer current status id and description
     *
     * e.g. (Id – Description):
     *
     * 1-Active
     *
     * 2-Requested from UTA
     *
     * 3-Awaiting embossing
     *
     * 4-Manufactured
     *
     * 5-Awaiting despatch
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Default PIN Advice Type.
     * Default PIN AdviceType of the customer.
     *
     * Possible Values:
     *
     * 1. Paper
     *
     * 2. Email
     *
     * 3. SMS
     *
     * 4. None
     */
    public function getDefaultPINAdviceType(): ?int
    {
        if (count($this->defaultPINAdviceType) == 0) {
            return null;
        }
        return $this->defaultPINAdviceType['value'];
    }

    /**
     * Sets Default PIN Advice Type.
     * Default PIN AdviceType of the customer.
     *
     * Possible Values:
     *
     * 1. Paper
     *
     * 2. Email
     *
     * 3. SMS
     *
     * 4. None
     *
     * @maps DefaultPINAdviceType
     */
    public function setDefaultPINAdviceType(?int $defaultPINAdviceType): void
    {
        $this->defaultPINAdviceType['value'] = $defaultPINAdviceType;
    }

    /**
     * Unsets Default PIN Advice Type.
     * Default PIN AdviceType of the customer.
     *
     * Possible Values:
     *
     * 1. Paper
     *
     * 2. Email
     *
     * 3. SMS
     *
     * 4. None
     */
    public function unsetDefaultPINAdviceType(): void
    {
        $this->defaultPINAdviceType = [];
    }

    /**
     * Returns P in Advice Types.
     *
     * @return PINAdviceTypes[]|null
     */
    public function getPINAdviceTypes(): ?array
    {
        return $this->pINAdviceTypes;
    }

    /**
     * Sets P in Advice Types.
     *
     * @maps PINAdviceTypes
     *
     * @param PINAdviceTypes[]|null $pINAdviceTypes
     */
    public function setPINAdviceTypes(?array $pINAdviceTypes): void
    {
        $this->pINAdviceTypes = $pINAdviceTypes;
    }

    /**
     * Returns Error.
     */
    public function getError(): ?ErrorStatus
    {
        return $this->error;
    }

    /**
     * Sets Error.
     *
     * @maps Error
     */
    public function setError(?ErrorStatus $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Request Id.
     * API Request id
     */
    public function getRequestId(): ?string
    {
        if (count($this->requestId) == 0) {
            return null;
        }
        return $this->requestId['value'];
    }

    /**
     * Sets Request Id.
     * API Request id
     *
     * @maps RequestId
     */
    public function setRequestId(?string $requestId): void
    {
        $this->requestId['value'] = $requestId;
    }

    /**
     * Unsets Request Id.
     * API Request id
     */
    public function unsetRequestId(): void
    {
        $this->requestId = [];
    }

    /**
     * Returns P in Change Allowed by Cardholder.
     * PIN change allowed for card holder or not.
     */
    public function getPINChangeAllowedByCardholder(): ?bool
    {
        return $this->pINChangeAllowedByCardholder;
    }

    /**
     * Sets P in Change Allowed by Cardholder.
     * PIN change allowed for card holder or not.
     *
     * @maps PINChangeAllowedByCardholder
     */
    public function setPINChangeAllowedByCardholder(?bool $pINChangeAllowedByCardholder): void
    {
        $this->pINChangeAllowedByCardholder = $pINChangeAllowedByCardholder;
    }

    /**
     * Returns P in Change Allowed From Fleet PIN.
     * PIN change allowed from fleetpin or not.
     */
    public function getPINChangeAllowedFromFleetPIN(): ?bool
    {
        return $this->pINChangeAllowedFromFleetPIN;
    }

    /**
     * Sets P in Change Allowed From Fleet PIN.
     * PIN change allowed from fleetpin or not.
     *
     * @maps PINChangeAllowedFromFleetPIN
     */
    public function setPINChangeAllowedFromFleetPIN(?bool $pINChangeAllowedFromFleetPIN): void
    {
        $this->pINChangeAllowedFromFleetPIN = $pINChangeAllowedFromFleetPIN;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->accountId)) {
            $json['AccountId']                    = $this->accountId['value'];
        }
        if (!empty($this->accountName)) {
            $json['AccountName']                  = $this->accountName['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                = $this->accountNumber['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']             = $this->accountShortName['value'];
        }
        if (!empty($this->accountTradingName)) {
            $json['AccountTradingName']           = $this->accountTradingName['value'];
        }
        if (isset($this->allowFleetIdInput)) {
            $json['AllowFleetIdInput']            = $this->allowFleetIdInput;
        }
        if (!empty($this->band)) {
            $json['Band']                         = $this->band['value'];
        }
        if (isset($this->billingAddress)) {
            $json['BillingAddress']               = $this->billingAddress;
        }
        if (!empty($this->cardGroupPosition)) {
            $json['CardGroupPosition']            = $this->cardGroupPosition['value'];
        }
        if (isset($this->correspondenceAddress)) {
            $json['CorrespondenceAddress']        = $this->correspondenceAddress;
        }
        if (isset($this->deliveryAddresses)) {
            $json['DeliveryAddresses']            = $this->deliveryAddresses;
        }
        if (isset($this->fleetPin)) {
            $json['FleetPin']                     = $this->fleetPin;
        }
        if (!empty($this->fullName)) {
            $json['FullName']                     = $this->fullName['value'];
        }
        if (!empty($this->invoiceCustomerId)) {
            $json['InvoiceCustomerId']            = $this->invoiceCustomerId['value'];
        }
        if (!empty($this->invoiceCustomerShortName)) {
            $json['InvoiceCustomerShortName']     = $this->invoiceCustomerShortName['value'];
        }
        if (!empty($this->isInvoicePoint)) {
            $json['IsInvoicePoint']               = $this->isInvoicePoint['value'];
        }
        if (!empty($this->marketingSegmentation)) {
            $json['MarketingSegmentation']        = $this->marketingSegmentation['value'];
        }
        if (!empty($this->vATNumber)) {
            $json['VATNumber']                    = $this->vATNumber['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                      = $this->payerId['value'];
        }
        if (!empty($this->payerName)) {
            $json['PayerName']                    = $this->payerName['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                  = $this->payerNumber['value'];
        }
        if (!empty($this->selfSelectedPin)) {
            $json['SelfSelectedPin']              = $this->selfSelectedPin['value'];
        }
        if (!empty($this->status)) {
            $json['Status']                       = $this->status['value'];
        }
        if (!empty($this->defaultPINAdviceType)) {
            $json['DefaultPINAdviceType']         = $this->defaultPINAdviceType['value'];
        }
        if (isset($this->pINAdviceTypes)) {
            $json['PINAdviceTypes']               = $this->pINAdviceTypes;
        }
        if (isset($this->error)) {
            $json['Error']                        = $this->error;
        }
        if (!empty($this->requestId)) {
            $json['RequestId']                    = $this->requestId['value'];
        }
        if (isset($this->pINChangeAllowedByCardholder)) {
            $json['PINChangeAllowedByCardholder'] = $this->pINChangeAllowedByCardholder;
        }
        if (isset($this->pINChangeAllowedFromFleetPIN)) {
            $json['PINChangeAllowedFromFleetPIN'] = $this->pINChangeAllowedFromFleetPIN;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

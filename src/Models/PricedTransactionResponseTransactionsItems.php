<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class PricedTransactionResponseTransactionsItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $cardExpiry = [];

    /**
     * @var array
     */
    private $transactionDate = [];

    /**
     * @var array
     */
    private $transactionTime = [];

    /**
     * @var array
     */
    private $uTCOffset = [];

    /**
     * @var array
     */
    private $fleetIdInput = [];

    /**
     * @var array
     */
    private $odometerInput = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $vehicleRegistration = [];

    /**
     * @var array
     */
    private $invoiceCurrencyCode = [];

    /**
     * @var array
     */
    private $invoiceCurrencySymbol = [];

    /**
     * @var array
     */
    private $transactionCurrencyCode = [];

    /**
     * @var array
     */
    private $transactionCurrencySymbol = [];

    /**
     * @var array
     */
    private $transactionNetAmount = [];

    /**
     * @var array
     */
    private $transactionTax = [];

    /**
     * @var array
     */
    private $transactionGrossAmount = [];

    /**
     * @var array
     */
    private $invoiceNetAmount = [];

    /**
     * @var array
     */
    private $invoiceTax = [];

    /**
     * @var array
     */
    private $invoiceGrossAmount = [];

    /**
     * @var array
     */
    private $purchasedInCountry = [];

    /**
     * @var array
     */
    private $accountId = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $accountName = [];

    /**
     * @var array
     */
    private $accountShortName = [];

    /**
     * @var array
     */
    private $quantity = [];

    /**
     * @var array
     */
    private $fuelProduct = [];

    /**
     * @var array
     */
    private $unitPriceInTransactionCurrency = [];

    /**
     * @var array
     */
    private $unitPriceInInvoiceCurrency = [];

    /**
     * @var array
     */
    private $unitDiscountTransactionCurrency = [];

    /**
     * @var array
     */
    private $unitDiscountInvoiceCurrency = [];

    /**
     * @var array
     */
    private $isInvoiced = [];

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $invoiceDate = [];

    /**
     * @var array
     */
    private $siteCode = [];

    /**
     * @var array
     */
    private $siteName = [];

    /**
     * @var array
     */
    private $siteCountry = [];

    /**
     * @var array<PricedTransactionItemsLocationItems|null>|null
     */
    private $location;

    /**
     * @var array
     */
    private $cardGroupName = [];

    /**
     * @var array
     */
    private $receiptNumber = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $productGroupId = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $delCoExchangeRate = [];

    /**
     * @var array
     */
    private $colCoExchangeRate = [];

    /**
     * @var array
     */
    private $isShellSite = [];

    /**
     * @var array
     */
    private $network = [];

    /**
     * @var array
     */
    private $siteGroupId = [];

    /**
     * @var array
     */
    private $siteGroupName = [];

    /**
     * @var array
     */
    private $postingDate = [];

    /**
     * @var array
     */
    private $issuerCode = [];

    /**
     * @var array
     */
    private $purchasedInCountryCode = [];

    /**
     * @var array
     */
    private $customerCountryCode = [];

    /**
     * @var array
     */
    private $customerCountry = [];

    /**
     * @var array
     */
    private $releaseCode = [];

    /**
     * @var array
     */
    private $cardGroupId = [];

    /**
     * @var array
     */
    private $cardSequenceNumber = [];

    /**
     * @var array
     */
    private $checkDigit = [];

    /**
     * @var array
     */
    private $fleetIDDescription = [];

    /**
     * @var array
     */
    private $vATRate = [];

    /**
     * @var array
     */
    private $vATCategory = [];

    /**
     * @var array
     */
    private $vATCountry = [];

    /**
     * @var array
     */
    private $effectiveDiscountInTrxCurrency = [];

    /**
     * @var array
     */
    private $transactionType = [];

    /**
     * @var array
     */
    private $pINIndicator = [];

    /**
     * @var array
     */
    private $vATApplicable = [];

    /**
     * @var array
     */
    private $netInvoiceIndicator = [];

    /**
     * @var array
     */
    private $customerCurrencyCode = [];

    /**
     * @var array
     */
    private $customerCurrencySymbol = [];

    /**
     * @var array
     */
    private $effectiveUnitDiscountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $effectiveDiscountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $vATonNetAmountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $discountType = [];

    /**
     * @var array
     */
    private $transactionStatus = [];

    /**
     * @var array
     */
    private $salesItemId = [];

    /**
     * @var array
     */
    private $payerGroup = [];

    /**
     * @var array
     */
    private $payerGroupName = [];

    /**
     * @var array
     */
    private $refundFlag = [];

    /**
     * @var array
     */
    private $originalSalesItemId = [];

    /**
     * @var array
     */
    private $delcoName = [];

    /**
     * @var array
     */
    private $delcoCode = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $payerName = [];

    /**
     * @var array
     */
    private $cardExpiryPeriod = [];

    /**
     * @var array
     */
    private $authorisationCode = [];

    /**
     * @var array
     */
    private $transactionId = [];

    /**
     * @var array
     */
    private $transactionLine = [];

    /**
     * @var array
     */
    private $allowClearing = [];

    /**
     * @var array
     */
    private $cRMNumber = [];

    /**
     * @var array
     */
    private $disputeStatus = [];

    /**
     * @var array
     */
    private $rebateRate = [];

    /**
     * @var array
     */
    private $delCoToColCoExchangeRate = [];

    /**
     * @var array
     */
    private $netEuroAmount = [];

    /**
     * @var array
     */
    private $euroRebateAmount = [];

    /**
     * @var array
     */
    private $euroVATAmount = [];

    /**
     * @var array
     */
    private $parentCustomerNumber = [];

    /**
     * @var array
     */
    private $parentCustomerName = [];

    /**
     * @var array
     */
    private $parentCustomerId = [];

    /**
     * @var array
     */
    private $incomingSiteNumber = [];

    /**
     * @var array
     */
    private $incomingSiteDescription = [];

    /**
     * @var array
     */
    private $incomingCurrencyCode = [];

    /**
     * @var array
     */
    private $incomingProductCode = [];

    /**
     * @var array
     */
    private $creditDebitCode = [];

    /**
     * @var array
     */
    private $correctionFlag = [];

    /**
     * @var array
     */
    private $additional1 = [];

    /**
     * @var array
     */
    private $additional2 = [];

    /**
     * @var array
     */
    private $additional3 = [];

    /**
     * @var array
     */
    private $additional4 = [];

    /**
     * @var array
     */
    private $rebateonNetAmountInCustomerCurrency = [];

    /**
     * @var array
     */
    private $rebateonNetAmountInTransactionCurrency = [];

    /**
     * @var array
     */
    private $networkCode = [];

    /**
     * @var array
     */
    private $trnIdentifier = [];

    /**
     * @var array
     */
    private $cardType = [];

    /**
     * @var array
     */
    private $delcoListPriceUnitNet = [];

    /**
     * @var array
     */
    private $delcoRetailPriceUnitNet = [];

    /**
     * @var array
     */
    private $delcoRetailPriceUnitGross = [];

    /**
     * @var array
     */
    private $delcoRetailValueTotalNet = [];

    /**
     * @var array
     */
    private $delcoRetailValueTotalGross = [];

    /**
     * @var array
     */
    private $customerRetailPriceUnitGross = [];

    /**
     * @var array
     */
    private $customerRetailValueTotalGross = [];

    /**
     * @var array
     */
    private $customerRetailValueTotalNet = [];

    /**
     * @var array
     */
    private $transactionTypeDescription = [];

    /**
     * @var ErrorStatus|null
     */
    private $error;

    /**
     * @var string|null
     */
    private $requestId;

    /**
     * Returns Type.
     * TransactionType is the type of transaction.
     *
     * Example: SalesItem /FeeItem
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     * TransactionType is the type of transaction.
     *
     * Example: SalesItem /FeeItem
     *
     * @maps Type
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     * TransactionType is the type of transaction.
     *
     * Example: SalesItem /FeeItem
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Card Id.
     * Unique Card Id
     */
    public function getCardId(): ?int
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Unique Card Id
     *
     * @maps CardId
     */
    public function setCardId(?int $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Unique Card Id
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Card PAN.
     * Card PAN
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Card PAN
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Card PAN
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns Card Expiry.
     * Card Expiry Date
     */
    public function getCardExpiry(): ?string
    {
        if (count($this->cardExpiry) == 0) {
            return null;
        }
        return $this->cardExpiry['value'];
    }

    /**
     * Sets Card Expiry.
     * Card Expiry Date
     *
     * @maps CardExpiry
     */
    public function setCardExpiry(?string $cardExpiry): void
    {
        $this->cardExpiry['value'] = $cardExpiry;
    }

    /**
     * Unsets Card Expiry.
     * Card Expiry Date
     */
    public function unsetCardExpiry(): void
    {
        $this->cardExpiry = [];
    }

    /**
     * Returns Transaction Date.
     * Local Transaction Date  of where the transaction took place
     */
    public function getTransactionDate(): ?string
    {
        if (count($this->transactionDate) == 0) {
            return null;
        }
        return $this->transactionDate['value'];
    }

    /**
     * Sets Transaction Date.
     * Local Transaction Date  of where the transaction took place
     *
     * @maps TransactionDate
     */
    public function setTransactionDate(?string $transactionDate): void
    {
        $this->transactionDate['value'] = $transactionDate;
    }

    /**
     * Unsets Transaction Date.
     * Local Transaction Date  of where the transaction took place
     */
    public function unsetTransactionDate(): void
    {
        $this->transactionDate = [];
    }

    /**
     * Returns Transaction Time.
     * Local Transaction Time of where the transaction took place
     */
    public function getTransactionTime(): ?string
    {
        if (count($this->transactionTime) == 0) {
            return null;
        }
        return $this->transactionTime['value'];
    }

    /**
     * Sets Transaction Time.
     * Local Transaction Time of where the transaction took place
     *
     * @maps TransactionTime
     */
    public function setTransactionTime(?string $transactionTime): void
    {
        $this->transactionTime['value'] = $transactionTime;
    }

    /**
     * Unsets Transaction Time.
     * Local Transaction Time of where the transaction took place
     */
    public function unsetTransactionTime(): void
    {
        $this->transactionTime = [];
    }

    /**
     * Returns U TC Offset.
     * UTC Offset extracted from Sales Date time.
     *
     * Note: This may not be accurate for all TPN transactions
     *
     * Format: +/-HH:mm:ss (24 hours format)
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getUTCOffset(): ?string
    {
        if (count($this->uTCOffset) == 0) {
            return null;
        }
        return $this->uTCOffset['value'];
    }

    /**
     * Sets U TC Offset.
     * UTC Offset extracted from Sales Date time.
     *
     * Note: This may not be accurate for all TPN transactions
     *
     * Format: +/-HH:mm:ss (24 hours format)
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps UTCOffset
     */
    public function setUTCOffset(?string $uTCOffset): void
    {
        $this->uTCOffset['value'] = $uTCOffset;
    }

    /**
     * Unsets U TC Offset.
     * UTC Offset extracted from Sales Date time.
     *
     * Note: This may not be accurate for all TPN transactions
     *
     * Format: +/-HH:mm:ss (24 hours format)
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetUTCOffset(): void
    {
        $this->uTCOffset = [];
    }

    /**
     * Returns Fleet Id Input.
     * Fleet Id Input as entered by the drivers at the time of transaction
     *
     * Example: XYZ1234
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getFleetIdInput(): ?string
    {
        if (count($this->fleetIdInput) == 0) {
            return null;
        }
        return $this->fleetIdInput['value'];
    }

    /**
     * Sets Fleet Id Input.
     * Fleet Id Input as entered by the drivers at the time of transaction
     *
     * Example: XYZ1234
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps FleetIdInput
     */
    public function setFleetIdInput(?string $fleetIdInput): void
    {
        $this->fleetIdInput['value'] = $fleetIdInput;
    }

    /**
     * Unsets Fleet Id Input.
     * Fleet Id Input as entered by the drivers at the time of transaction
     *
     * Example: XYZ1234
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetFleetIdInput(): void
    {
        $this->fleetIdInput = [];
    }

    /**
     * Returns Odometer Input.
     * Odometer Input as entered by the drivers at the time of transaction
     *
     * Example: 12345
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getOdometerInput(): ?int
    {
        if (count($this->odometerInput) == 0) {
            return null;
        }
        return $this->odometerInput['value'];
    }

    /**
     * Sets Odometer Input.
     * Odometer Input as entered by the drivers at the time of transaction
     *
     * Example: 12345
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps OdometerInput
     */
    public function setOdometerInput(?int $odometerInput): void
    {
        $this->odometerInput['value'] = $odometerInput;
    }

    /**
     * Unsets Odometer Input.
     * Odometer Input as entered by the drivers at the time of transaction
     *
     * Example: 12345
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetOdometerInput(): void
    {
        $this->odometerInput = [];
    }

    /**
     * Returns Driver Name.
     * Driver Name embossed on the card
     *
     * Example:  ANDREW GILBERRY
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * Driver Name embossed on the card
     *
     * Example:  ANDREW GILBERRY
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * Driver Name embossed on the card
     *
     * Example:  ANDREW GILBERRY
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Vehicle Registration.
     * Vehicle Registration Number embossed on the card
     *
     * Example: MV65YLH
     */
    public function getVehicleRegistration(): ?string
    {
        if (count($this->vehicleRegistration) == 0) {
            return null;
        }
        return $this->vehicleRegistration['value'];
    }

    /**
     * Sets Vehicle Registration.
     * Vehicle Registration Number embossed on the card
     *
     * Example: MV65YLH
     *
     * @maps VehicleRegistration
     */
    public function setVehicleRegistration(?string $vehicleRegistration): void
    {
        $this->vehicleRegistration['value'] = $vehicleRegistration;
    }

    /**
     * Unsets Vehicle Registration.
     * Vehicle Registration Number embossed on the card
     *
     * Example: MV65YLH
     */
    public function unsetVehicleRegistration(): void
    {
        $this->vehicleRegistration = [];
    }

    /**
     * Returns Invoice Currency Code.
     * ISO currency code
     *
     * Example: GBP
     */
    public function getInvoiceCurrencyCode(): ?string
    {
        if (count($this->invoiceCurrencyCode) == 0) {
            return null;
        }
        return $this->invoiceCurrencyCode['value'];
    }

    /**
     * Sets Invoice Currency Code.
     * ISO currency code
     *
     * Example: GBP
     *
     * @maps InvoiceCurrencyCode
     */
    public function setInvoiceCurrencyCode(?string $invoiceCurrencyCode): void
    {
        $this->invoiceCurrencyCode['value'] = $invoiceCurrencyCode;
    }

    /**
     * Unsets Invoice Currency Code.
     * ISO currency code
     *
     * Example: GBP
     */
    public function unsetInvoiceCurrencyCode(): void
    {
        $this->invoiceCurrencyCode = [];
    }

    /**
     * Returns Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * Example: £, $
     */
    public function getInvoiceCurrencySymbol(): ?string
    {
        if (count($this->invoiceCurrencySymbol) == 0) {
            return null;
        }
        return $this->invoiceCurrencySymbol['value'];
    }

    /**
     * Sets Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * Example: £, $
     *
     * @maps InvoiceCurrencySymbol
     */
    public function setInvoiceCurrencySymbol(?string $invoiceCurrencySymbol): void
    {
        $this->invoiceCurrencySymbol['value'] = $invoiceCurrencySymbol;
    }

    /**
     * Unsets Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * Example: £, $
     */
    public function unsetInvoiceCurrencySymbol(): void
    {
        $this->invoiceCurrencySymbol = [];
    }

    /**
     * Returns Transaction Currency Code.
     * ISO currency code
     */
    public function getTransactionCurrencyCode(): ?string
    {
        if (count($this->transactionCurrencyCode) == 0) {
            return null;
        }
        return $this->transactionCurrencyCode['value'];
    }

    /**
     * Sets Transaction Currency Code.
     * ISO currency code
     *
     * @maps TransactionCurrencyCode
     */
    public function setTransactionCurrencyCode(?string $transactionCurrencyCode): void
    {
        $this->transactionCurrencyCode['value'] = $transactionCurrencyCode;
    }

    /**
     * Unsets Transaction Currency Code.
     * ISO currency code
     */
    public function unsetTransactionCurrencyCode(): void
    {
        $this->transactionCurrencyCode = [];
    }

    /**
     * Returns Transaction Currency Symbol.
     * Currency symbol of the Transaction Currency Code
     *
     * Example: £, $
     */
    public function getTransactionCurrencySymbol(): ?string
    {
        if (count($this->transactionCurrencySymbol) == 0) {
            return null;
        }
        return $this->transactionCurrencySymbol['value'];
    }

    /**
     * Sets Transaction Currency Symbol.
     * Currency symbol of the Transaction Currency Code
     *
     * Example: £, $
     *
     * @maps TransactionCurrencySymbol
     */
    public function setTransactionCurrencySymbol(?string $transactionCurrencySymbol): void
    {
        $this->transactionCurrencySymbol['value'] = $transactionCurrencySymbol;
    }

    /**
     * Unsets Transaction Currency Symbol.
     * Currency symbol of the Transaction Currency Code
     *
     * Example: £, $
     */
    public function unsetTransactionCurrencySymbol(): void
    {
        $this->transactionCurrencySymbol = [];
    }

    /**
     * Returns Transaction Net Amount.
     * Net Amount
     */
    public function getTransactionNetAmount(): ?float
    {
        if (count($this->transactionNetAmount) == 0) {
            return null;
        }
        return $this->transactionNetAmount['value'];
    }

    /**
     * Sets Transaction Net Amount.
     * Net Amount
     *
     * @maps TransactionNetAmount
     */
    public function setTransactionNetAmount(?float $transactionNetAmount): void
    {
        $this->transactionNetAmount['value'] = $transactionNetAmount;
    }

    /**
     * Unsets Transaction Net Amount.
     * Net Amount
     */
    public function unsetTransactionNetAmount(): void
    {
        $this->transactionNetAmount = [];
    }

    /**
     * Returns Transaction Tax.
     * Tax Amount
     */
    public function getTransactionTax(): ?float
    {
        if (count($this->transactionTax) == 0) {
            return null;
        }
        return $this->transactionTax['value'];
    }

    /**
     * Sets Transaction Tax.
     * Tax Amount
     *
     * @maps TransactionTax
     */
    public function setTransactionTax(?float $transactionTax): void
    {
        $this->transactionTax['value'] = $transactionTax;
    }

    /**
     * Unsets Transaction Tax.
     * Tax Amount
     */
    public function unsetTransactionTax(): void
    {
        $this->transactionTax = [];
    }

    /**
     * Returns Transaction Gross Amount.
     * Gross Amount
     */
    public function getTransactionGrossAmount(): ?float
    {
        if (count($this->transactionGrossAmount) == 0) {
            return null;
        }
        return $this->transactionGrossAmount['value'];
    }

    /**
     * Sets Transaction Gross Amount.
     * Gross Amount
     *
     * @maps TransactionGrossAmount
     */
    public function setTransactionGrossAmount(?float $transactionGrossAmount): void
    {
        $this->transactionGrossAmount['value'] = $transactionGrossAmount;
    }

    /**
     * Unsets Transaction Gross Amount.
     * Gross Amount
     */
    public function unsetTransactionGrossAmount(): void
    {
        $this->transactionGrossAmount = [];
    }

    /**
     * Returns Invoice Net Amount.
     * Invoiced Net Amount
     *
     * Note: For a fee item, this parameter will be populated with fee InvoiceNetAmount.
     */
    public function getInvoiceNetAmount(): ?float
    {
        if (count($this->invoiceNetAmount) == 0) {
            return null;
        }
        return $this->invoiceNetAmount['value'];
    }

    /**
     * Sets Invoice Net Amount.
     * Invoiced Net Amount
     *
     * Note: For a fee item, this parameter will be populated with fee InvoiceNetAmount.
     *
     * @maps InvoiceNetAmount
     */
    public function setInvoiceNetAmount(?float $invoiceNetAmount): void
    {
        $this->invoiceNetAmount['value'] = $invoiceNetAmount;
    }

    /**
     * Unsets Invoice Net Amount.
     * Invoiced Net Amount
     *
     * Note: For a fee item, this parameter will be populated with fee InvoiceNetAmount.
     */
    public function unsetInvoiceNetAmount(): void
    {
        $this->invoiceNetAmount = [];
    }

    /**
     * Returns Invoice Tax.
     * Invoiced Tax Amount
     */
    public function getInvoiceTax(): ?float
    {
        if (count($this->invoiceTax) == 0) {
            return null;
        }
        return $this->invoiceTax['value'];
    }

    /**
     * Sets Invoice Tax.
     * Invoiced Tax Amount
     *
     * @maps InvoiceTax
     */
    public function setInvoiceTax(?float $invoiceTax): void
    {
        $this->invoiceTax['value'] = $invoiceTax;
    }

    /**
     * Unsets Invoice Tax.
     * Invoiced Tax Amount
     */
    public function unsetInvoiceTax(): void
    {
        $this->invoiceTax = [];
    }

    /**
     * Returns Invoice Gross Amount.
     * Invoice Gross Amount
     *
     * Note: For a fee item, this parameter will be populated with fee InvoiceGrossAmount.
     */
    public function getInvoiceGrossAmount(): ?float
    {
        if (count($this->invoiceGrossAmount) == 0) {
            return null;
        }
        return $this->invoiceGrossAmount['value'];
    }

    /**
     * Sets Invoice Gross Amount.
     * Invoice Gross Amount
     *
     * Note: For a fee item, this parameter will be populated with fee InvoiceGrossAmount.
     *
     * @maps InvoiceGrossAmount
     */
    public function setInvoiceGrossAmount(?float $invoiceGrossAmount): void
    {
        $this->invoiceGrossAmount['value'] = $invoiceGrossAmount;
    }

    /**
     * Unsets Invoice Gross Amount.
     * Invoice Gross Amount
     *
     * Note: For a fee item, this parameter will be populated with fee InvoiceGrossAmount.
     */
    public function unsetInvoiceGrossAmount(): void
    {
        $this->invoiceGrossAmount = [];
    }

    /**
     * Returns Purchased in Country.
     * Country of Purchase
     */
    public function getPurchasedInCountry(): ?string
    {
        if (count($this->purchasedInCountry) == 0) {
            return null;
        }
        return $this->purchasedInCountry['value'];
    }

    /**
     * Sets Purchased in Country.
     * Country of Purchase
     *
     * @maps PurchasedInCountry
     */
    public function setPurchasedInCountry(?string $purchasedInCountry): void
    {
        $this->purchasedInCountry['value'] = $purchasedInCountry;
    }

    /**
     * Unsets Purchased in Country.
     * Country of Purchase
     */
    public function unsetPurchasedInCountry(): void
    {
        $this->purchasedInCountry = [];
    }

    /**
     * Returns Account Id.
     * Account Id
     *
     * Example: 29484
     */
    public function getAccountId(): ?int
    {
        if (count($this->accountId) == 0) {
            return null;
        }
        return $this->accountId['value'];
    }

    /**
     * Sets Account Id.
     * Account Id
     *
     * Example: 29484
     *
     * @maps AccountId
     */
    public function setAccountId(?int $accountId): void
    {
        $this->accountId['value'] = $accountId;
    }

    /**
     * Unsets Account Id.
     * Account Id
     *
     * Example: 29484
     */
    public function unsetAccountId(): void
    {
        $this->accountId = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Account Name.
     * Account Name
     */
    public function getAccountName(): ?string
    {
        if (count($this->accountName) == 0) {
            return null;
        }
        return $this->accountName['value'];
    }

    /**
     * Sets Account Name.
     * Account Name
     *
     * @maps AccountName
     */
    public function setAccountName(?string $accountName): void
    {
        $this->accountName['value'] = $accountName;
    }

    /**
     * Unsets Account Name.
     * Account Name
     */
    public function unsetAccountName(): void
    {
        $this->accountName = [];
    }

    /**
     * Returns Account Short Name.
     * Account Short Name
     */
    public function getAccountShortName(): ?string
    {
        if (count($this->accountShortName) == 0) {
            return null;
        }
        return $this->accountShortName['value'];
    }

    /**
     * Sets Account Short Name.
     * Account Short Name
     *
     * @maps AccountShortName
     */
    public function setAccountShortName(?string $accountShortName): void
    {
        $this->accountShortName['value'] = $accountShortName;
    }

    /**
     * Unsets Account Short Name.
     * Account Short Name
     */
    public function unsetAccountShortName(): void
    {
        $this->accountShortName = [];
    }

    /**
     * Returns Quantity.
     * Quantity/Volume
     */
    public function getQuantity(): ?int
    {
        if (count($this->quantity) == 0) {
            return null;
        }
        return $this->quantity['value'];
    }

    /**
     * Sets Quantity.
     * Quantity/Volume
     *
     * @maps Quantity
     */
    public function setQuantity(?int $quantity): void
    {
        $this->quantity['value'] = $quantity;
    }

    /**
     * Unsets Quantity.
     * Quantity/Volume
     */
    public function unsetQuantity(): void
    {
        $this->quantity = [];
    }

    /**
     * Returns Fuel Product.
     * True if the product on transaction is listed as a fuel product else return false
     */
    public function getFuelProduct(): ?bool
    {
        if (count($this->fuelProduct) == 0) {
            return null;
        }
        return $this->fuelProduct['value'];
    }

    /**
     * Sets Fuel Product.
     * True if the product on transaction is listed as a fuel product else return false
     *
     * @maps FuelProduct
     */
    public function setFuelProduct(?bool $fuelProduct): void
    {
        $this->fuelProduct['value'] = $fuelProduct;
    }

    /**
     * Unsets Fuel Product.
     * True if the product on transaction is listed as a fuel product else return false
     */
    public function unsetFuelProduct(): void
    {
        $this->fuelProduct = [];
    }

    /**
     * Returns Unit Price in Transaction Currency.
     * Product Unit Price in transaction currency
     */
    public function getUnitPriceInTransactionCurrency(): ?float
    {
        if (count($this->unitPriceInTransactionCurrency) == 0) {
            return null;
        }
        return $this->unitPriceInTransactionCurrency['value'];
    }

    /**
     * Sets Unit Price in Transaction Currency.
     * Product Unit Price in transaction currency
     *
     * @maps UnitPriceInTransactionCurrency
     */
    public function setUnitPriceInTransactionCurrency(?float $unitPriceInTransactionCurrency): void
    {
        $this->unitPriceInTransactionCurrency['value'] = $unitPriceInTransactionCurrency;
    }

    /**
     * Unsets Unit Price in Transaction Currency.
     * Product Unit Price in transaction currency
     */
    public function unsetUnitPriceInTransactionCurrency(): void
    {
        $this->unitPriceInTransactionCurrency = [];
    }

    /**
     * Returns Unit Price in Invoice Currency.
     * Product Unit Price in invoice currency
     */
    public function getUnitPriceInInvoiceCurrency(): ?float
    {
        if (count($this->unitPriceInInvoiceCurrency) == 0) {
            return null;
        }
        return $this->unitPriceInInvoiceCurrency['value'];
    }

    /**
     * Sets Unit Price in Invoice Currency.
     * Product Unit Price in invoice currency
     *
     * @maps UnitPriceInInvoiceCurrency
     */
    public function setUnitPriceInInvoiceCurrency(?float $unitPriceInInvoiceCurrency): void
    {
        $this->unitPriceInInvoiceCurrency['value'] = $unitPriceInInvoiceCurrency;
    }

    /**
     * Unsets Unit Price in Invoice Currency.
     * Product Unit Price in invoice currency
     */
    public function unsetUnitPriceInInvoiceCurrency(): void
    {
        $this->unitPriceInInvoiceCurrency = [];
    }

    /**
     * Returns Unit Discount Transaction Currency.
     * Unit Discount in transaction currency
     */
    public function getUnitDiscountTransactionCurrency(): ?float
    {
        if (count($this->unitDiscountTransactionCurrency) == 0) {
            return null;
        }
        return $this->unitDiscountTransactionCurrency['value'];
    }

    /**
     * Sets Unit Discount Transaction Currency.
     * Unit Discount in transaction currency
     *
     * @maps UnitDiscountTransactionCurrency
     */
    public function setUnitDiscountTransactionCurrency(?float $unitDiscountTransactionCurrency): void
    {
        $this->unitDiscountTransactionCurrency['value'] = $unitDiscountTransactionCurrency;
    }

    /**
     * Unsets Unit Discount Transaction Currency.
     * Unit Discount in transaction currency
     */
    public function unsetUnitDiscountTransactionCurrency(): void
    {
        $this->unitDiscountTransactionCurrency = [];
    }

    /**
     * Returns Unit Discount Invoice Currency.
     * Unit Discount in invoice currency
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getUnitDiscountInvoiceCurrency(): ?float
    {
        if (count($this->unitDiscountInvoiceCurrency) == 0) {
            return null;
        }
        return $this->unitDiscountInvoiceCurrency['value'];
    }

    /**
     * Sets Unit Discount Invoice Currency.
     * Unit Discount in invoice currency
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps UnitDiscountInvoiceCurrency
     */
    public function setUnitDiscountInvoiceCurrency(?float $unitDiscountInvoiceCurrency): void
    {
        $this->unitDiscountInvoiceCurrency['value'] = $unitDiscountInvoiceCurrency;
    }

    /**
     * Unsets Unit Discount Invoice Currency.
     * Unit Discount in invoice currency
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetUnitDiscountInvoiceCurrency(): void
    {
        $this->unitDiscountInvoiceCurrency = [];
    }

    /**
     * Returns Is Invoiced.
     * True when the transaction is already invoice, else return False
     */
    public function getIsInvoiced(): ?bool
    {
        if (count($this->isInvoiced) == 0) {
            return null;
        }
        return $this->isInvoiced['value'];
    }

    /**
     * Sets Is Invoiced.
     * True when the transaction is already invoice, else return False
     *
     * @maps IsInvoiced
     */
    public function setIsInvoiced(?bool $isInvoiced): void
    {
        $this->isInvoiced['value'] = $isInvoiced;
    }

    /**
     * Unsets Is Invoiced.
     * True when the transaction is already invoice, else return False
     */
    public function unsetIsInvoiced(): void
    {
        $this->isInvoiced = [];
    }

    /**
     * Returns Invoice Number.
     * Invoice Number if invoiced
     *
     * S04500493
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice Number if invoiced
     *
     * S04500493
     *
     * @maps InvoiceNumber
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice Number if invoiced
     *
     * S04500493
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Invoice Date.
     * Invoice Date
     *
     * Format: yyyyMMdd HH:mm:ss
     */
    public function getInvoiceDate(): ?string
    {
        if (count($this->invoiceDate) == 0) {
            return null;
        }
        return $this->invoiceDate['value'];
    }

    /**
     * Sets Invoice Date.
     * Invoice Date
     *
     * Format: yyyyMMdd HH:mm:ss
     *
     * @maps InvoiceDate
     */
    public function setInvoiceDate(?string $invoiceDate): void
    {
        $this->invoiceDate['value'] = $invoiceDate;
    }

    /**
     * Unsets Invoice Date.
     * Invoice Date
     *
     * Format: yyyyMMdd HH:mm:ss
     */
    public function unsetInvoiceDate(): void
    {
        $this->invoiceDate = [];
    }

    /**
     * Returns Site Code.
     * Site Code
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     */
    public function getSiteCode(): ?string
    {
        if (count($this->siteCode) == 0) {
            return null;
        }
        return $this->siteCode['value'];
    }

    /**
     * Sets Site Code.
     * Site Code
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     *
     * @maps SiteCode
     */
    public function setSiteCode(?string $siteCode): void
    {
        $this->siteCode['value'] = $siteCode;
    }

    /**
     * Unsets Site Code.
     * Site Code
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     */
    public function unsetSiteCode(): void
    {
        $this->siteCode = [];
    }

    /**
     * Returns Site Name.
     * Site Name
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     */
    public function getSiteName(): ?string
    {
        if (count($this->siteName) == 0) {
            return null;
        }
        return $this->siteName['value'];
    }

    /**
     * Sets Site Name.
     * Site Name
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     *
     * @maps SiteName
     */
    public function setSiteName(?string $siteName): void
    {
        $this->siteName['value'] = $siteName;
    }

    /**
     * Unsets Site Name.
     * Site Name
     *
     * Example:
     *
     * 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755
     *
     * 050002 - CHARNOCK RICHARD STHBOUND MWSA 0755
     */
    public function unsetSiteName(): void
    {
        $this->siteName = [];
    }

    /**
     * Returns Site Country.
     * Site Country
     *
     * Example: France, Germany
     *
     * Note: - The value could be null/blank for fees item.
     *
     * Geography Location entity for Site Location
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getSiteCountry(): ?string
    {
        if (count($this->siteCountry) == 0) {
            return null;
        }
        return $this->siteCountry['value'];
    }

    /**
     * Sets Site Country.
     * Site Country
     *
     * Example: France, Germany
     *
     * Note: - The value could be null/blank for fees item.
     *
     * Geography Location entity for Site Location
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps SiteCountry
     */
    public function setSiteCountry(?string $siteCountry): void
    {
        $this->siteCountry['value'] = $siteCountry;
    }

    /**
     * Unsets Site Country.
     * Site Country
     *
     * Example: France, Germany
     *
     * Note: - The value could be null/blank for fees item.
     *
     * Geography Location entity for Site Location
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetSiteCountry(): void
    {
        $this->siteCountry = [];
    }

    /**
     * Returns Location.
     * Geography Location entity for Site Location
     *
     * Note: - The value could be null/blank for fees item
     *
     * @return array<PricedTransactionItemsLocationItems|null>|null
     */
    public function getLocation(): ?array
    {
        return $this->location;
    }

    /**
     * Sets Location.
     * Geography Location entity for Site Location
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps Location
     *
     * @param array<PricedTransactionItemsLocationItems|null>|null $location
     */
    public function setLocation(?array $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns Card Group Name.
     * Card Group Name
     */
    public function getCardGroupName(): ?string
    {
        if (count($this->cardGroupName) == 0) {
            return null;
        }
        return $this->cardGroupName['value'];
    }

    /**
     * Sets Card Group Name.
     * Card Group Name
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName['value'] = $cardGroupName;
    }

    /**
     * Unsets Card Group Name.
     * Card Group Name
     */
    public function unsetCardGroupName(): void
    {
        $this->cardGroupName = [];
    }

    /**
     * Returns Receipt Number.
     * Receipt Number
     */
    public function getReceiptNumber(): ?string
    {
        if (count($this->receiptNumber) == 0) {
            return null;
        }
        return $this->receiptNumber['value'];
    }

    /**
     * Sets Receipt Number.
     * Receipt Number
     *
     * @maps ReceiptNumber
     */
    public function setReceiptNumber(?string $receiptNumber): void
    {
        $this->receiptNumber['value'] = $receiptNumber;
    }

    /**
     * Unsets Receipt Number.
     * Receipt Number
     */
    public function unsetReceiptNumber(): void
    {
        $this->receiptNumber = [];
    }

    /**
     * Returns Product Code.
     * Product Code
     *
     * 10 TMF Charges
     *
     * 11 Tunnel/Bridges
     *
     * 12 Motorway toll
     *
     * 13 Ferries
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code
     *
     * 10 TMF Charges
     *
     * 11 Tunnel/Bridges
     *
     * 12 Motorway toll
     *
     * 13 Ferries
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code
     *
     * 10 TMF Charges
     *
     * 11 Tunnel/Bridges
     *
     * 12 Motorway toll
     *
     * 13 Ferries
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * Product Name
     *
     * Unleaded - High octane
     *
     * Unleaded - Medium octane
     *
     * Unleaded - Low octane
     *
     * Unleaded Environmental
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * Product Name
     *
     * Unleaded - High octane
     *
     * Unleaded - Medium octane
     *
     * Unleaded - Low octane
     *
     * Unleaded Environmental
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * Product Name
     *
     * Unleaded - High octane
     *
     * Unleaded - Medium octane
     *
     * Unleaded - Low octane
     *
     * Unleaded Environmental
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Product Group Id.
     * Product Group Id
     *
     * Example:
     *
     * 1 Parent Product Group
     *
     * 2 All Fuels
     *
     * 3 Motor gasoline
     *
     * 4 2 stroke
     *
     * 5 Autogas
     *
     * 6 CNG
     */
    public function getProductGroupId(): ?int
    {
        if (count($this->productGroupId) == 0) {
            return null;
        }
        return $this->productGroupId['value'];
    }

    /**
     * Sets Product Group Id.
     * Product Group Id
     *
     * Example:
     *
     * 1 Parent Product Group
     *
     * 2 All Fuels
     *
     * 3 Motor gasoline
     *
     * 4 2 stroke
     *
     * 5 Autogas
     *
     * 6 CNG
     *
     * @maps ProductGroupId
     */
    public function setProductGroupId(?int $productGroupId): void
    {
        $this->productGroupId['value'] = $productGroupId;
    }

    /**
     * Unsets Product Group Id.
     * Product Group Id
     *
     * Example:
     *
     * 1 Parent Product Group
     *
     * 2 All Fuels
     *
     * 3 Motor gasoline
     *
     * 4 2 stroke
     *
     * 5 Autogas
     *
     * 6 CNG
     */
    public function unsetProductGroupId(): void
    {
        $this->productGroupId = [];
    }

    /**
     * Returns Product Group Name.
     * Product Group Name
     *
     * Example:
     *
     * 1 Parent Product Group
     *
     * 2 All Fuels
     *
     * 3 Motor gasoline
     *
     * 4 2 stroke
     *
     * 5 Autogas
     *
     * 6 CNG
     *
     * 7 Automotive Gas Oil
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Product Group Name
     *
     * Example:
     *
     * 1 Parent Product Group
     *
     * 2 All Fuels
     *
     * 3 Motor gasoline
     *
     * 4 2 stroke
     *
     * 5 Autogas
     *
     * 6 CNG
     *
     * 7 Automotive Gas Oil
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Product Group Name
     *
     * Example:
     *
     * 1 Parent Product Group
     *
     * 2 All Fuels
     *
     * 3 Motor gasoline
     *
     * 4 2 stroke
     *
     * 5 Autogas
     *
     * 6 CNG
     *
     * 7 Automotive Gas Oil
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Del Co Exchange Rate.
     * DelCo Exchange Rate (Site exchange rate)
     */
    public function getDelCoExchangeRate(): ?float
    {
        if (count($this->delCoExchangeRate) == 0) {
            return null;
        }
        return $this->delCoExchangeRate['value'];
    }

    /**
     * Sets Del Co Exchange Rate.
     * DelCo Exchange Rate (Site exchange rate)
     *
     * @maps DelCoExchangeRate
     */
    public function setDelCoExchangeRate(?float $delCoExchangeRate): void
    {
        $this->delCoExchangeRate['value'] = $delCoExchangeRate;
    }

    /**
     * Unsets Del Co Exchange Rate.
     * DelCo Exchange Rate (Site exchange rate)
     */
    public function unsetDelCoExchangeRate(): void
    {
        $this->delCoExchangeRate = [];
    }

    /**
     * Returns Col Co Exchange Rate.
     * ColCo Exchange Rate (Customer exchange rate)
     */
    public function getColCoExchangeRate(): ?float
    {
        if (count($this->colCoExchangeRate) == 0) {
            return null;
        }
        return $this->colCoExchangeRate['value'];
    }

    /**
     * Sets Col Co Exchange Rate.
     * ColCo Exchange Rate (Customer exchange rate)
     *
     * @maps ColCoExchangeRate
     */
    public function setColCoExchangeRate(?float $colCoExchangeRate): void
    {
        $this->colCoExchangeRate['value'] = $colCoExchangeRate;
    }

    /**
     * Unsets Col Co Exchange Rate.
     * ColCo Exchange Rate (Customer exchange rate)
     */
    public function unsetColCoExchangeRate(): void
    {
        $this->colCoExchangeRate = [];
    }

    /**
     * Returns Is Shell Site.
     * True when transaction occurred at a Shell site else return False
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getIsShellSite(): ?bool
    {
        if (count($this->isShellSite) == 0) {
            return null;
        }
        return $this->isShellSite['value'];
    }

    /**
     * Sets Is Shell Site.
     * True when transaction occurred at a Shell site else return False
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps IsShellSite
     */
    public function setIsShellSite(?bool $isShellSite): void
    {
        $this->isShellSite['value'] = $isShellSite;
    }

    /**
     * Unsets Is Shell Site.
     * True when transaction occurred at a Shell site else return False
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetIsShellSite(): void
    {
        $this->isShellSite = [];
    }

    /**
     * Returns Network.
     * Network as configured in GFN (Shell PH, ESSO, etc.,)
     *
     * 100013 STEINDORFER
     *
     * 100015 S.A. BELGIAN SHELL N.V.
     *
     * 100016 ESSO BE
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getNetwork(): ?string
    {
        if (count($this->network) == 0) {
            return null;
        }
        return $this->network['value'];
    }

    /**
     * Sets Network.
     * Network as configured in GFN (Shell PH, ESSO, etc.,)
     *
     * 100013 STEINDORFER
     *
     * 100015 S.A. BELGIAN SHELL N.V.
     *
     * 100016 ESSO BE
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps Network
     */
    public function setNetwork(?string $network): void
    {
        $this->network['value'] = $network;
    }

    /**
     * Unsets Network.
     * Network as configured in GFN (Shell PH, ESSO, etc.,)
     *
     * 100013 STEINDORFER
     *
     * 100015 S.A. BELGIAN SHELL N.V.
     *
     * 100016 ESSO BE
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetNetwork(): void
    {
        $this->network = [];
    }

    /**
     * Returns Site Group Id.
     * Site Group Id
     *
     * Example: 202
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getSiteGroupId(): ?int
    {
        if (count($this->siteGroupId) == 0) {
            return null;
        }
        return $this->siteGroupId['value'];
    }

    /**
     * Sets Site Group Id.
     * Site Group Id
     *
     * Example: 202
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps SiteGroupId
     */
    public function setSiteGroupId(?int $siteGroupId): void
    {
        $this->siteGroupId['value'] = $siteGroupId;
    }

    /**
     * Unsets Site Group Id.
     * Site Group Id
     *
     * Example: 202
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetSiteGroupId(): void
    {
        $this->siteGroupId = [];
    }

    /**
     * Returns Site Group Name.
     * Site Group Name
     *
     * Example: CZ 9100 ECONOMY NETWORK
     */
    public function getSiteGroupName(): ?string
    {
        if (count($this->siteGroupName) == 0) {
            return null;
        }
        return $this->siteGroupName['value'];
    }

    /**
     * Sets Site Group Name.
     * Site Group Name
     *
     * Example: CZ 9100 ECONOMY NETWORK
     *
     * @maps SiteGroupName
     */
    public function setSiteGroupName(?string $siteGroupName): void
    {
        $this->siteGroupName['value'] = $siteGroupName;
    }

    /**
     * Unsets Site Group Name.
     * Site Group Name
     *
     * Example: CZ 9100 ECONOMY NETWORK
     */
    public function unsetSiteGroupName(): void
    {
        $this->siteGroupName = [];
    }

    /**
     * Returns Posting Date.
     * Transaction Posting Date
     *
     * Format: yyyyMMdd HHmmss
     */
    public function getPostingDate(): ?string
    {
        if (count($this->postingDate) == 0) {
            return null;
        }
        return $this->postingDate['value'];
    }

    /**
     * Sets Posting Date.
     * Transaction Posting Date
     *
     * Format: yyyyMMdd HHmmss
     *
     * @maps PostingDate
     */
    public function setPostingDate(?string $postingDate): void
    {
        $this->postingDate['value'] = $postingDate;
    }

    /**
     * Unsets Posting Date.
     * Transaction Posting Date
     *
     * Format: yyyyMMdd HHmmss
     */
    public function unsetPostingDate(): void
    {
        $this->postingDate = [];
    }

    /**
     * Returns Issuer Code.
     * First digits of the Card PAN
     *
     * 7002 = Fleet
     *
     * 7077 = CRT
     */
    public function getIssuerCode(): ?string
    {
        if (count($this->issuerCode) == 0) {
            return null;
        }
        return $this->issuerCode['value'];
    }

    /**
     * Sets Issuer Code.
     * First digits of the Card PAN
     *
     * 7002 = Fleet
     *
     * 7077 = CRT
     *
     * @maps IssuerCode
     */
    public function setIssuerCode(?string $issuerCode): void
    {
        $this->issuerCode['value'] = $issuerCode;
    }

    /**
     * Unsets Issuer Code.
     * First digits of the Card PAN
     *
     * 7002 = Fleet
     *
     * 7077 = CRT
     */
    public function unsetIssuerCode(): void
    {
        $this->issuerCode = [];
    }

    /**
     * Returns Purchased in Country Code.
     * ISO code of the country where the transaction took place
     *
     * Example: “NL”
     */
    public function getPurchasedInCountryCode(): ?string
    {
        if (count($this->purchasedInCountryCode) == 0) {
            return null;
        }
        return $this->purchasedInCountryCode['value'];
    }

    /**
     * Sets Purchased in Country Code.
     * ISO code of the country where the transaction took place
     *
     * Example: “NL”
     *
     * @maps PurchasedInCountryCode
     */
    public function setPurchasedInCountryCode(?string $purchasedInCountryCode): void
    {
        $this->purchasedInCountryCode['value'] = $purchasedInCountryCode;
    }

    /**
     * Unsets Purchased in Country Code.
     * ISO code of the country where the transaction took place
     *
     * Example: “NL”
     */
    public function unsetPurchasedInCountryCode(): void
    {
        $this->purchasedInCountryCode = [];
    }

    /**
     * Returns Customer Country Code.
     * ISO code of the  Customer Country
     */
    public function getCustomerCountryCode(): ?string
    {
        if (count($this->customerCountryCode) == 0) {
            return null;
        }
        return $this->customerCountryCode['value'];
    }

    /**
     * Sets Customer Country Code.
     * ISO code of the  Customer Country
     *
     * @maps CustomerCountryCode
     */
    public function setCustomerCountryCode(?string $customerCountryCode): void
    {
        $this->customerCountryCode['value'] = $customerCountryCode;
    }

    /**
     * Unsets Customer Country Code.
     * ISO code of the  Customer Country
     */
    public function unsetCustomerCountryCode(): void
    {
        $this->customerCountryCode = [];
    }

    /**
     * Returns Customer Country.
     * Name of the Customer Country
     */
    public function getCustomerCountry(): ?string
    {
        if (count($this->customerCountry) == 0) {
            return null;
        }
        return $this->customerCountry['value'];
    }

    /**
     * Sets Customer Country.
     * Name of the Customer Country
     *
     * @maps CustomerCountry
     */
    public function setCustomerCountry(?string $customerCountry): void
    {
        $this->customerCountry['value'] = $customerCountry;
    }

    /**
     * Unsets Customer Country.
     * Name of the Customer Country
     */
    public function unsetCustomerCountry(): void
    {
        $this->customerCountry = [];
    }

    /**
     * Returns Release Code.
     * Release code, 7th Digit of the Card PAN
     */
    public function getReleaseCode(): ?string
    {
        if (count($this->releaseCode) == 0) {
            return null;
        }
        return $this->releaseCode['value'];
    }

    /**
     * Sets Release Code.
     * Release code, 7th Digit of the Card PAN
     *
     * @maps ReleaseCode
     */
    public function setReleaseCode(?string $releaseCode): void
    {
        $this->releaseCode['value'] = $releaseCode;
    }

    /**
     * Unsets Release Code.
     * Release code, 7th Digit of the Card PAN
     */
    public function unsetReleaseCode(): void
    {
        $this->releaseCode = [];
    }

    /**
     * Returns Card Group Id.
     * Card group ID
     */
    public function getCardGroupId(): ?string
    {
        if (count($this->cardGroupId) == 0) {
            return null;
        }
        return $this->cardGroupId['value'];
    }

    /**
     * Sets Card Group Id.
     * Card group ID
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?string $cardGroupId): void
    {
        $this->cardGroupId['value'] = $cardGroupId;
    }

    /**
     * Unsets Card Group Id.
     * Card group ID
     */
    public function unsetCardGroupId(): void
    {
        $this->cardGroupId = [];
    }

    /**
     * Returns Card Sequence Number.
     * 3 digits, Card sequence number and Check digit
     */
    public function getCardSequenceNumber(): ?string
    {
        if (count($this->cardSequenceNumber) == 0) {
            return null;
        }
        return $this->cardSequenceNumber['value'];
    }

    /**
     * Sets Card Sequence Number.
     * 3 digits, Card sequence number and Check digit
     *
     * @maps CardSequenceNumber
     */
    public function setCardSequenceNumber(?string $cardSequenceNumber): void
    {
        $this->cardSequenceNumber['value'] = $cardSequenceNumber;
    }

    /**
     * Unsets Card Sequence Number.
     * 3 digits, Card sequence number and Check digit
     */
    public function unsetCardSequenceNumber(): void
    {
        $this->cardSequenceNumber = [];
    }

    /**
     * Returns Check Digit.
     * Check digit, Last number of the card pan
     */
    public function getCheckDigit(): ?string
    {
        if (count($this->checkDigit) == 0) {
            return null;
        }
        return $this->checkDigit['value'];
    }

    /**
     * Sets Check Digit.
     * Check digit, Last number of the card pan
     *
     * @maps CheckDigit
     */
    public function setCheckDigit(?string $checkDigit): void
    {
        $this->checkDigit['value'] = $checkDigit;
    }

    /**
     * Unsets Check Digit.
     * Check digit, Last number of the card pan
     */
    public function unsetCheckDigit(): void
    {
        $this->checkDigit = [];
    }

    /**
     * Returns Fleet ID Description.
     * FleetId/CRN description in Card Platform configured at the account level
     */
    public function getFleetIDDescription(): ?string
    {
        if (count($this->fleetIDDescription) == 0) {
            return null;
        }
        return $this->fleetIDDescription['value'];
    }

    /**
     * Sets Fleet ID Description.
     * FleetId/CRN description in Card Platform configured at the account level
     *
     * @maps FleetIDDescription
     */
    public function setFleetIDDescription(?string $fleetIDDescription): void
    {
        $this->fleetIDDescription['value'] = $fleetIDDescription;
    }

    /**
     * Unsets Fleet ID Description.
     * FleetId/CRN description in Card Platform configured at the account level
     */
    public function unsetFleetIDDescription(): void
    {
        $this->fleetIDDescription = [];
    }

    /**
     * Returns V at Rate.
     * VAT Percentage
     *
     * 0.20 for 20%
     */
    public function getVATRate(): ?float
    {
        if (count($this->vATRate) == 0) {
            return null;
        }
        return $this->vATRate['value'];
    }

    /**
     * Sets V at Rate.
     * VAT Percentage
     *
     * 0.20 for 20%
     *
     * @maps VATRate
     */
    public function setVATRate(?float $vATRate): void
    {
        $this->vATRate['value'] = $vATRate;
    }

    /**
     * Unsets V at Rate.
     * VAT Percentage
     *
     * 0.20 for 20%
     */
    public function unsetVATRate(): void
    {
        $this->vATRate = [];
    }

    /**
     * Returns V at Category.
     * VAT Category Id-Description
     *
     * 1-Zero Rated
     *
     * 2-A1 PH-O 12% Sales Domestic
     *
     * 3-VAT exempt
     */
    public function getVATCategory(): ?string
    {
        if (count($this->vATCategory) == 0) {
            return null;
        }
        return $this->vATCategory['value'];
    }

    /**
     * Sets V at Category.
     * VAT Category Id-Description
     *
     * 1-Zero Rated
     *
     * 2-A1 PH-O 12% Sales Domestic
     *
     * 3-VAT exempt
     *
     * @maps VATCategory
     */
    public function setVATCategory(?string $vATCategory): void
    {
        $this->vATCategory['value'] = $vATCategory;
    }

    /**
     * Unsets V at Category.
     * VAT Category Id-Description
     *
     * 1-Zero Rated
     *
     * 2-A1 PH-O 12% Sales Domestic
     *
     * 3-VAT exempt
     */
    public function unsetVATCategory(): void
    {
        $this->vATCategory = [];
    }

    /**
     * Returns V at Country.
     * VAT Country
     */
    public function getVATCountry(): ?string
    {
        if (count($this->vATCountry) == 0) {
            return null;
        }
        return $this->vATCountry['value'];
    }

    /**
     * Sets V at Country.
     * VAT Country
     *
     * @maps VATCountry
     */
    public function setVATCountry(?string $vATCountry): void
    {
        $this->vATCountry['value'] = $vATCountry;
    }

    /**
     * Unsets V at Country.
     * VAT Country
     */
    public function unsetVATCountry(): void
    {
        $this->vATCountry = [];
    }

    /**
     * Returns Effective Discount in Trx Currency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     *
     * Example: 0.0000
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getEffectiveDiscountInTrxCurrency(): ?float
    {
        if (count($this->effectiveDiscountInTrxCurrency) == 0) {
            return null;
        }
        return $this->effectiveDiscountInTrxCurrency['value'];
    }

    /**
     * Sets Effective Discount in Trx Currency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     *
     * Example: 0.0000
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps EffectiveDiscountInTrxCurrency
     */
    public function setEffectiveDiscountInTrxCurrency(?float $effectiveDiscountInTrxCurrency): void
    {
        $this->effectiveDiscountInTrxCurrency['value'] = $effectiveDiscountInTrxCurrency;
    }

    /**
     * Unsets Effective Discount in Trx Currency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     *
     * Example: 0.0000
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetEffectiveDiscountInTrxCurrency(): void
    {
        $this->effectiveDiscountInTrxCurrency = [];
    }

    /**
     * Returns Transaction Type.
     * Transaction Type
     *
     * Example: Purchase when Card is Present else Blank
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getTransactionType(): ?string
    {
        if (count($this->transactionType) == 0) {
            return null;
        }
        return $this->transactionType['value'];
    }

    /**
     * Sets Transaction Type.
     * Transaction Type
     *
     * Example: Purchase when Card is Present else Blank
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps TransactionType
     */
    public function setTransactionType(?string $transactionType): void
    {
        $this->transactionType['value'] = $transactionType;
    }

    /**
     * Unsets Transaction Type.
     * Transaction Type
     *
     * Example: Purchase when Card is Present else Blank
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetTransactionType(): void
    {
        $this->transactionType = [];
    }

    /**
     * Returns P in Indicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     *
     * Example: “PIN Used'” or “No PIN” or “Unknown”
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getPINIndicator(): ?string
    {
        if (count($this->pINIndicator) == 0) {
            return null;
        }
        return $this->pINIndicator['value'];
    }

    /**
     * Sets P in Indicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     *
     * Example: “PIN Used'” or “No PIN” or “Unknown”
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps PINIndicator
     */
    public function setPINIndicator(?string $pINIndicator): void
    {
        $this->pINIndicator['value'] = $pINIndicator;
    }

    /**
     * Unsets P in Indicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     *
     * Example: “PIN Used'” or “No PIN” or “Unknown”
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetPINIndicator(): void
    {
        $this->pINIndicator = [];
    }

    /**
     * Returns V at Applicable.
     * Is VAT Applicable for this transaction
     */
    public function getVATApplicable(): ?string
    {
        if (count($this->vATApplicable) == 0) {
            return null;
        }
        return $this->vATApplicable['value'];
    }

    /**
     * Sets V at Applicable.
     * Is VAT Applicable for this transaction
     *
     * @maps VATApplicable
     */
    public function setVATApplicable(?string $vATApplicable): void
    {
        $this->vATApplicable['value'] = $vATApplicable;
    }

    /**
     * Unsets V at Applicable.
     * Is VAT Applicable for this transaction
     */
    public function unsetVATApplicable(): void
    {
        $this->vATApplicable = [];
    }

    /**
     * Returns Net Invoice Indicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT?
     *
     * Example: “Y” or “N”
     */
    public function getNetInvoiceIndicator(): ?string
    {
        if (count($this->netInvoiceIndicator) == 0) {
            return null;
        }
        return $this->netInvoiceIndicator['value'];
    }

    /**
     * Sets Net Invoice Indicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT?
     *
     * Example: “Y” or “N”
     *
     * @maps NetInvoiceIndicator
     */
    public function setNetInvoiceIndicator(?string $netInvoiceIndicator): void
    {
        $this->netInvoiceIndicator['value'] = $netInvoiceIndicator;
    }

    /**
     * Unsets Net Invoice Indicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT?
     *
     * Example: “Y” or “N”
     */
    public function unsetNetInvoiceIndicator(): void
    {
        $this->netInvoiceIndicator = [];
    }

    /**
     * Returns Customer Currency Code.
     * Customer currency code
     */
    public function getCustomerCurrencyCode(): ?string
    {
        if (count($this->customerCurrencyCode) == 0) {
            return null;
        }
        return $this->customerCurrencyCode['value'];
    }

    /**
     * Sets Customer Currency Code.
     * Customer currency code
     *
     * @maps CustomerCurrencyCode
     */
    public function setCustomerCurrencyCode(?string $customerCurrencyCode): void
    {
        $this->customerCurrencyCode['value'] = $customerCurrencyCode;
    }

    /**
     * Unsets Customer Currency Code.
     * Customer currency code
     */
    public function unsetCustomerCurrencyCode(): void
    {
        $this->customerCurrencyCode = [];
    }

    /**
     * Returns Customer Currency Symbol.
     * Customer currency Symbol
     */
    public function getCustomerCurrencySymbol(): ?string
    {
        if (count($this->customerCurrencySymbol) == 0) {
            return null;
        }
        return $this->customerCurrencySymbol['value'];
    }

    /**
     * Sets Customer Currency Symbol.
     * Customer currency Symbol
     *
     * @maps CustomerCurrencySymbol
     */
    public function setCustomerCurrencySymbol(?string $customerCurrencySymbol): void
    {
        $this->customerCurrencySymbol['value'] = $customerCurrencySymbol;
    }

    /**
     * Unsets Customer Currency Symbol.
     * Customer currency Symbol
     */
    public function unsetCustomerCurrencySymbol(): void
    {
        $this->customerCurrencySymbol = [];
    }

    /**
     * Returns Effective Unit Discount in Customer Currency.
     * Effective Unit Discount (excluding VAT in Customer currency)
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getEffectiveUnitDiscountInCustomerCurrency(): ?float
    {
        if (count($this->effectiveUnitDiscountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->effectiveUnitDiscountInCustomerCurrency['value'];
    }

    /**
     * Sets Effective Unit Discount in Customer Currency.
     * Effective Unit Discount (excluding VAT in Customer currency)
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps EffectiveUnitDiscountInCustomerCurrency
     */
    public function setEffectiveUnitDiscountInCustomerCurrency(?float $effectiveUnitDiscountInCustomerCurrency): void
    {
        $this->effectiveUnitDiscountInCustomerCurrency['value'] = $effectiveUnitDiscountInCustomerCurrency;
    }

    /**
     * Unsets Effective Unit Discount in Customer Currency.
     * Effective Unit Discount (excluding VAT in Customer currency)
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetEffectiveUnitDiscountInCustomerCurrency(): void
    {
        $this->effectiveUnitDiscountInCustomerCurrency = [];
    }

    /**
     * Returns Effective Discount in Customer Currency.
     * Effective Discount (excluding VAT in Customer currency)
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getEffectiveDiscountInCustomerCurrency(): ?float
    {
        if (count($this->effectiveDiscountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->effectiveDiscountInCustomerCurrency['value'];
    }

    /**
     * Sets Effective Discount in Customer Currency.
     * Effective Discount (excluding VAT in Customer currency)
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps EffectiveDiscountInCustomerCurrency
     */
    public function setEffectiveDiscountInCustomerCurrency(?float $effectiveDiscountInCustomerCurrency): void
    {
        $this->effectiveDiscountInCustomerCurrency['value'] = $effectiveDiscountInCustomerCurrency;
    }

    /**
     * Unsets Effective Discount in Customer Currency.
     * Effective Discount (excluding VAT in Customer currency)
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetEffectiveDiscountInCustomerCurrency(): void
    {
        $this->effectiveDiscountInCustomerCurrency = [];
    }

    /**
     * Returns V a Ton Net Amount in Customer Currency.
     * VAT on Net Amount (in Customer currency)
     */
    public function getVATonNetAmountInCustomerCurrency(): ?float
    {
        if (count($this->vATonNetAmountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->vATonNetAmountInCustomerCurrency['value'];
    }

    /**
     * Sets V a Ton Net Amount in Customer Currency.
     * VAT on Net Amount (in Customer currency)
     *
     * @maps VATonNetAmountInCustomerCurrency
     */
    public function setVATonNetAmountInCustomerCurrency(?float $vATonNetAmountInCustomerCurrency): void
    {
        $this->vATonNetAmountInCustomerCurrency['value'] = $vATonNetAmountInCustomerCurrency;
    }

    /**
     * Unsets V a Ton Net Amount in Customer Currency.
     * VAT on Net Amount (in Customer currency)
     */
    public function unsetVATonNetAmountInCustomerCurrency(): void
    {
        $this->vATonNetAmountInCustomerCurrency = [];
    }

    /**
     * Returns Discount Type.
     * Discount Type
     *
     * Example: 1-None
     *
     * 2-Pence per unit
     *
     * 3-Percentage
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getDiscountType(): ?string
    {
        if (count($this->discountType) == 0) {
            return null;
        }
        return $this->discountType['value'];
    }

    /**
     * Sets Discount Type.
     * Discount Type
     *
     * Example: 1-None
     *
     * 2-Pence per unit
     *
     * 3-Percentage
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps DiscountType
     */
    public function setDiscountType(?string $discountType): void
    {
        $this->discountType['value'] = $discountType;
    }

    /**
     * Unsets Discount Type.
     * Discount Type
     *
     * Example: 1-None
     *
     * 2-Pence per unit
     *
     * 3-Percentage
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetDiscountType(): void
    {
        $this->discountType = [];
    }

    /**
     * Returns Transaction Status.
     * Transaction status "U" or "I"
     *
     * “U” stands for Uninvoiced
     *
     * “I” stands for Invoiced
     */
    public function getTransactionStatus(): ?string
    {
        if (count($this->transactionStatus) == 0) {
            return null;
        }
        return $this->transactionStatus['value'];
    }

    /**
     * Sets Transaction Status.
     * Transaction status "U" or "I"
     *
     * “U” stands for Uninvoiced
     *
     * “I” stands for Invoiced
     *
     * @maps TransactionStatus
     */
    public function setTransactionStatus(?string $transactionStatus): void
    {
        $this->transactionStatus['value'] = $transactionStatus;
    }

    /**
     * Unsets Transaction Status.
     * Transaction status "U" or "I"
     *
     * “U” stands for Uninvoiced
     *
     * “I” stands for Invoiced
     */
    public function unsetTransactionStatus(): void
    {
        $this->transactionStatus = [];
    }

    /**
     * Returns Sales Item Id.
     * Unique Sales Item Identifier
     *
     * Example: 18315958002
     *
     * Note: For a fee item, this parameter will be populated with SalesItemId.
     */
    public function getSalesItemId(): ?int
    {
        if (count($this->salesItemId) == 0) {
            return null;
        }
        return $this->salesItemId['value'];
    }

    /**
     * Sets Sales Item Id.
     * Unique Sales Item Identifier
     *
     * Example: 18315958002
     *
     * Note: For a fee item, this parameter will be populated with SalesItemId.
     *
     * @maps SalesItemId
     */
    public function setSalesItemId(?int $salesItemId): void
    {
        $this->salesItemId['value'] = $salesItemId;
    }

    /**
     * Unsets Sales Item Id.
     * Unique Sales Item Identifier
     *
     * Example: 18315958002
     *
     * Note: For a fee item, this parameter will be populated with SalesItemId.
     */
    public function unsetSalesItemId(): void
    {
        $this->salesItemId = [];
    }

    /**
     * Returns Payer Group.
     * Payer Group applicable for the Large Customer NL+8 digit code
     */
    public function getPayerGroup(): ?string
    {
        if (count($this->payerGroup) == 0) {
            return null;
        }
        return $this->payerGroup['value'];
    }

    /**
     * Sets Payer Group.
     * Payer Group applicable for the Large Customer NL+8 digit code
     *
     * @maps PayerGroup
     */
    public function setPayerGroup(?string $payerGroup): void
    {
        $this->payerGroup['value'] = $payerGroup;
    }

    /**
     * Unsets Payer Group.
     * Payer Group applicable for the Large Customer NL+8 digit code
     */
    public function unsetPayerGroup(): void
    {
        $this->payerGroup = [];
    }

    /**
     * Returns Payer Group Name.
     * Payer Group Name
     */
    public function getPayerGroupName(): ?string
    {
        if (count($this->payerGroupName) == 0) {
            return null;
        }
        return $this->payerGroupName['value'];
    }

    /**
     * Sets Payer Group Name.
     * Payer Group Name
     *
     * @maps PayerGroupName
     */
    public function setPayerGroupName(?string $payerGroupName): void
    {
        $this->payerGroupName['value'] = $payerGroupName;
    }

    /**
     * Unsets Payer Group Name.
     * Payer Group Name
     */
    public function unsetPayerGroupName(): void
    {
        $this->payerGroupName = [];
    }

    /**
     * Returns Refund Flag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     */
    public function getRefundFlag(): ?string
    {
        if (count($this->refundFlag) == 0) {
            return null;
        }
        return $this->refundFlag['value'];
    }

    /**
     * Sets Refund Flag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     *
     * @maps RefundFlag
     */
    public function setRefundFlag(?string $refundFlag): void
    {
        $this->refundFlag['value'] = $refundFlag;
    }

    /**
     * Unsets Refund Flag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     */
    public function unsetRefundFlag(): void
    {
        $this->refundFlag = [];
    }

    /**
     * Returns Original Sales Item Id.
     * Shows Sales Item Id of the original item that was refunded
     */
    public function getOriginalSalesItemId(): ?string
    {
        if (count($this->originalSalesItemId) == 0) {
            return null;
        }
        return $this->originalSalesItemId['value'];
    }

    /**
     * Sets Original Sales Item Id.
     * Shows Sales Item Id of the original item that was refunded
     *
     * @maps OriginalSalesItemId
     */
    public function setOriginalSalesItemId(?string $originalSalesItemId): void
    {
        $this->originalSalesItemId['value'] = $originalSalesItemId;
    }

    /**
     * Unsets Original Sales Item Id.
     * Shows Sales Item Id of the original item that was refunded
     */
    public function unsetOriginalSalesItemId(): void
    {
        $this->originalSalesItemId = [];
    }

    /**
     * Returns Delco Name.
     * Delco Name
     */
    public function getDelcoName(): ?string
    {
        if (count($this->delcoName) == 0) {
            return null;
        }
        return $this->delcoName['value'];
    }

    /**
     * Sets Delco Name.
     * Delco Name
     *
     * @maps DelcoName
     */
    public function setDelcoName(?string $delcoName): void
    {
        $this->delcoName['value'] = $delcoName;
    }

    /**
     * Unsets Delco Name.
     * Delco Name
     */
    public function unsetDelcoName(): void
    {
        $this->delcoName = [];
    }

    /**
     * Returns Delco Code.
     * Delco Code
     */
    public function getDelcoCode(): ?string
    {
        if (count($this->delcoCode) == 0) {
            return null;
        }
        return $this->delcoCode['value'];
    }

    /**
     * Sets Delco Code.
     * Delco Code
     *
     * @maps DelcoCode
     */
    public function setDelcoCode(?string $delcoCode): void
    {
        $this->delcoCode['value'] = $delcoCode;
    }

    /**
     * Unsets Delco Code.
     * Delco Code
     */
    public function unsetDelcoCode(): void
    {
        $this->delcoCode = [];
    }

    /**
     * Returns Payer Number.
     * Payer number (Country code+8 digits)
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer number (Country code+8 digits)
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer number (Country code+8 digits)
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Payer Name.
     * Payer name
     *
     * Example: V.M. LE COMTE
     */
    public function getPayerName(): ?string
    {
        if (count($this->payerName) == 0) {
            return null;
        }
        return $this->payerName['value'];
    }

    /**
     * Sets Payer Name.
     * Payer name
     *
     * Example: V.M. LE COMTE
     *
     * @maps PayerName
     */
    public function setPayerName(?string $payerName): void
    {
        $this->payerName['value'] = $payerName;
    }

    /**
     * Unsets Payer Name.
     * Payer name
     *
     * Example: V.M. LE COMTE
     */
    public function unsetPayerName(): void
    {
        $this->payerName = [];
    }

    /**
     * Returns Card Expiry Period.
     * Year/Month of the Card Expiry captured on the transaction
     */
    public function getCardExpiryPeriod(): ?string
    {
        if (count($this->cardExpiryPeriod) == 0) {
            return null;
        }
        return $this->cardExpiryPeriod['value'];
    }

    /**
     * Sets Card Expiry Period.
     * Year/Month of the Card Expiry captured on the transaction
     *
     * @maps CardExpiryPeriod
     */
    public function setCardExpiryPeriod(?string $cardExpiryPeriod): void
    {
        $this->cardExpiryPeriod['value'] = $cardExpiryPeriod;
    }

    /**
     * Unsets Card Expiry Period.
     * Year/Month of the Card Expiry captured on the transaction
     */
    public function unsetCardExpiryPeriod(): void
    {
        $this->cardExpiryPeriod = [];
    }

    /**
     * Returns Authorisation Code.
     * Authorisation code of the transaction
     *
     * Example: 011256
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getAuthorisationCode(): ?string
    {
        if (count($this->authorisationCode) == 0) {
            return null;
        }
        return $this->authorisationCode['value'];
    }

    /**
     * Sets Authorisation Code.
     * Authorisation code of the transaction
     *
     * Example: 011256
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps AuthorisationCode
     */
    public function setAuthorisationCode(?string $authorisationCode): void
    {
        $this->authorisationCode['value'] = $authorisationCode;
    }

    /**
     * Unsets Authorisation Code.
     * Authorisation code of the transaction
     *
     * Example: 011256
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetAuthorisationCode(): void
    {
        $this->authorisationCode = [];
    }

    /**
     * Returns Transaction Id.
     * Unique id of the transaction that may include one or more salesitems
     */
    public function getTransactionId(): ?string
    {
        if (count($this->transactionId) == 0) {
            return null;
        }
        return $this->transactionId['value'];
    }

    /**
     * Sets Transaction Id.
     * Unique id of the transaction that may include one or more salesitems
     *
     * @maps TransactionId
     */
    public function setTransactionId(?string $transactionId): void
    {
        $this->transactionId['value'] = $transactionId;
    }

    /**
     * Unsets Transaction Id.
     * Unique id of the transaction that may include one or more salesitems
     */
    public function unsetTransactionId(): void
    {
        $this->transactionId = [];
    }

    /**
     * Returns Transaction Line.
     * Transaction line item number
     */
    public function getTransactionLine(): ?string
    {
        if (count($this->transactionLine) == 0) {
            return null;
        }
        return $this->transactionLine['value'];
    }

    /**
     * Sets Transaction Line.
     * Transaction line item number
     *
     * @maps TransactionLine
     */
    public function setTransactionLine(?string $transactionLine): void
    {
        $this->transactionLine['value'] = $transactionLine;
    }

    /**
     * Unsets Transaction Line.
     * Transaction line item number
     */
    public function unsetTransactionLine(): void
    {
        $this->transactionLine = [];
    }

    /**
     * Returns Allow Clearing.
     * Is the Sales Item allowed for clearing? i.e. not written off
     *
     * Example: “Y” or “N”
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getAllowClearing(): ?string
    {
        if (count($this->allowClearing) == 0) {
            return null;
        }
        return $this->allowClearing['value'];
    }

    /**
     * Sets Allow Clearing.
     * Is the Sales Item allowed for clearing? i.e. not written off
     *
     * Example: “Y” or “N”
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps AllowClearing
     */
    public function setAllowClearing(?string $allowClearing): void
    {
        $this->allowClearing['value'] = $allowClearing;
    }

    /**
     * Unsets Allow Clearing.
     * Is the Sales Item allowed for clearing? i.e. not written off
     *
     * Example: “Y” or “N”
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetAllowClearing(): void
    {
        $this->allowClearing = [];
    }

    /**
     * Returns C RM Number.
     * CRM Case number if the sales item is in dispute
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getCRMNumber(): ?string
    {
        if (count($this->cRMNumber) == 0) {
            return null;
        }
        return $this->cRMNumber['value'];
    }

    /**
     * Sets C RM Number.
     * CRM Case number if the sales item is in dispute
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps CRMNumber
     */
    public function setCRMNumber(?string $cRMNumber): void
    {
        $this->cRMNumber['value'] = $cRMNumber;
    }

    /**
     * Unsets C RM Number.
     * CRM Case number if the sales item is in dispute
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetCRMNumber(): void
    {
        $this->cRMNumber = [];
    }

    /**
     * Returns Dispute Status.
     * Sales Item Dispute Status if disputed
     *
     * 0 No Dispute
     *
     * 1 In Dispute
     *
     * 2 Re-Instated
     *
     * 3 Adjusted
     *
     * 4 Written Off by Colco
     *
     * 5 Written Off by Delco
     *
     * 6 Charged Back to Site
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getDisputeStatus(): ?string
    {
        if (count($this->disputeStatus) == 0) {
            return null;
        }
        return $this->disputeStatus['value'];
    }

    /**
     * Sets Dispute Status.
     * Sales Item Dispute Status if disputed
     *
     * 0 No Dispute
     *
     * 1 In Dispute
     *
     * 2 Re-Instated
     *
     * 3 Adjusted
     *
     * 4 Written Off by Colco
     *
     * 5 Written Off by Delco
     *
     * 6 Charged Back to Site
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps DisputeStatus
     */
    public function setDisputeStatus(?string $disputeStatus): void
    {
        $this->disputeStatus['value'] = $disputeStatus;
    }

    /**
     * Unsets Dispute Status.
     * Sales Item Dispute Status if disputed
     *
     * 0 No Dispute
     *
     * 1 In Dispute
     *
     * 2 Re-Instated
     *
     * 3 Adjusted
     *
     * 4 Written Off by Colco
     *
     * 5 Written Off by Delco
     *
     * 6 Charged Back to Site
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetDisputeStatus(): void
    {
        $this->disputeStatus = [];
    }

    /**
     * Returns Rebate Rate.
     * Unit discount in customer currency.
     *
     * Example: 28.279000
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getRebateRate(): ?float
    {
        if (count($this->rebateRate) == 0) {
            return null;
        }
        return $this->rebateRate['value'];
    }

    /**
     * Sets Rebate Rate.
     * Unit discount in customer currency.
     *
     * Example: 28.279000
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps RebateRate
     */
    public function setRebateRate(?float $rebateRate): void
    {
        $this->rebateRate['value'] = $rebateRate;
    }

    /**
     * Unsets Rebate Rate.
     * Unit discount in customer currency.
     *
     * Example: 28.279000
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetRebateRate(): void
    {
        $this->rebateRate = [];
    }

    /**
     * Returns Del Co to Col Co Exchange Rate.
     * Exchange rate from transaction currency to customer currency.
     *
     * Example: 1
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getDelCoToColCoExchangeRate(): ?float
    {
        if (count($this->delCoToColCoExchangeRate) == 0) {
            return null;
        }
        return $this->delCoToColCoExchangeRate['value'];
    }

    /**
     * Sets Del Co to Col Co Exchange Rate.
     * Exchange rate from transaction currency to customer currency.
     *
     * Example: 1
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps DelCoToColCoExchangeRate
     */
    public function setDelCoToColCoExchangeRate(?float $delCoToColCoExchangeRate): void
    {
        $this->delCoToColCoExchangeRate['value'] = $delCoToColCoExchangeRate;
    }

    /**
     * Unsets Del Co to Col Co Exchange Rate.
     * Exchange rate from transaction currency to customer currency.
     *
     * Example: 1
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetDelCoToColCoExchangeRate(): void
    {
        $this->delCoToColCoExchangeRate = [];
    }

    /**
     * Returns Net Euro Amount.
     * Net euro amount.
     *
     * Example: 37.93
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getNetEuroAmount(): ?float
    {
        if (count($this->netEuroAmount) == 0) {
            return null;
        }
        return $this->netEuroAmount['value'];
    }

    /**
     * Sets Net Euro Amount.
     * Net euro amount.
     *
     * Example: 37.93
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps NetEuroAmount
     */
    public function setNetEuroAmount(?float $netEuroAmount): void
    {
        $this->netEuroAmount['value'] = $netEuroAmount;
    }

    /**
     * Unsets Net Euro Amount.
     * Net euro amount.
     *
     * Example: 37.93
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetNetEuroAmount(): void
    {
        $this->netEuroAmount = [];
    }

    /**
     * Returns Euro Rebate Amount.
     * Euro rebate amount.
     *
     * Example: 0
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getEuroRebateAmount(): ?float
    {
        if (count($this->euroRebateAmount) == 0) {
            return null;
        }
        return $this->euroRebateAmount['value'];
    }

    /**
     * Sets Euro Rebate Amount.
     * Euro rebate amount.
     *
     * Example: 0
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps EuroRebateAmount
     */
    public function setEuroRebateAmount(?float $euroRebateAmount): void
    {
        $this->euroRebateAmount['value'] = $euroRebateAmount;
    }

    /**
     * Unsets Euro Rebate Amount.
     * Euro rebate amount.
     *
     * Example: 0
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetEuroRebateAmount(): void
    {
        $this->euroRebateAmount = [];
    }

    /**
     * Returns Euro VAT Amount.
     * Euro VAT amount.
     *
     * Example: 7.96
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getEuroVATAmount(): ?float
    {
        if (count($this->euroVATAmount) == 0) {
            return null;
        }
        return $this->euroVATAmount['value'];
    }

    /**
     * Sets Euro VAT Amount.
     * Euro VAT amount.
     *
     * Example: 7.96
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps EuroVATAmount
     */
    public function setEuroVATAmount(?float $euroVATAmount): void
    {
        $this->euroVATAmount['value'] = $euroVATAmount;
    }

    /**
     * Unsets Euro VAT Amount.
     * Euro VAT amount.
     *
     * Example: 7.96
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetEuroVATAmount(): void
    {
        $this->euroVATAmount = [];
    }

    /**
     * Returns Parent Customer Number.
     * Parent customer number
     */
    public function getParentCustomerNumber(): ?string
    {
        if (count($this->parentCustomerNumber) == 0) {
            return null;
        }
        return $this->parentCustomerNumber['value'];
    }

    /**
     * Sets Parent Customer Number.
     * Parent customer number
     *
     * @maps ParentCustomerNumber
     */
    public function setParentCustomerNumber(?string $parentCustomerNumber): void
    {
        $this->parentCustomerNumber['value'] = $parentCustomerNumber;
    }

    /**
     * Unsets Parent Customer Number.
     * Parent customer number
     */
    public function unsetParentCustomerNumber(): void
    {
        $this->parentCustomerNumber = [];
    }

    /**
     * Returns Parent Customer Name.
     * Parent customer name.
     */
    public function getParentCustomerName(): ?string
    {
        if (count($this->parentCustomerName) == 0) {
            return null;
        }
        return $this->parentCustomerName['value'];
    }

    /**
     * Sets Parent Customer Name.
     * Parent customer name.
     *
     * @maps ParentCustomerName
     */
    public function setParentCustomerName(?string $parentCustomerName): void
    {
        $this->parentCustomerName['value'] = $parentCustomerName;
    }

    /**
     * Unsets Parent Customer Name.
     * Parent customer name.
     */
    public function unsetParentCustomerName(): void
    {
        $this->parentCustomerName = [];
    }

    /**
     * Returns Parent Customer Id.
     * Parent customer id.
     */
    public function getParentCustomerId(): ?int
    {
        if (count($this->parentCustomerId) == 0) {
            return null;
        }
        return $this->parentCustomerId['value'];
    }

    /**
     * Sets Parent Customer Id.
     * Parent customer id.
     *
     * @maps ParentCustomerId
     */
    public function setParentCustomerId(?int $parentCustomerId): void
    {
        $this->parentCustomerId['value'] = $parentCustomerId;
    }

    /**
     * Unsets Parent Customer Id.
     * Parent customer id.
     */
    public function unsetParentCustomerId(): void
    {
        $this->parentCustomerId = [];
    }

    /**
     * Returns Incoming Site Number.
     * Incoming Site Number
     *
     * Example: 100021
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getIncomingSiteNumber(): ?string
    {
        if (count($this->incomingSiteNumber) == 0) {
            return null;
        }
        return $this->incomingSiteNumber['value'];
    }

    /**
     * Sets Incoming Site Number.
     * Incoming Site Number
     *
     * Example: 100021
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps IncomingSiteNumber
     */
    public function setIncomingSiteNumber(?string $incomingSiteNumber): void
    {
        $this->incomingSiteNumber['value'] = $incomingSiteNumber;
    }

    /**
     * Unsets Incoming Site Number.
     * Incoming Site Number
     *
     * Example: 100021
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetIncomingSiteNumber(): void
    {
        $this->incomingSiteNumber = [];
    }

    /**
     * Returns Incoming Site Description.
     * Incoming Site Description
     *
     * Example: HN3 INTI_02-82.02
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getIncomingSiteDescription(): ?string
    {
        if (count($this->incomingSiteDescription) == 0) {
            return null;
        }
        return $this->incomingSiteDescription['value'];
    }

    /**
     * Sets Incoming Site Description.
     * Incoming Site Description
     *
     * Example: HN3 INTI_02-82.02
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps IncomingSiteDescription
     */
    public function setIncomingSiteDescription(?string $incomingSiteDescription): void
    {
        $this->incomingSiteDescription['value'] = $incomingSiteDescription;
    }

    /**
     * Unsets Incoming Site Description.
     * Incoming Site Description
     *
     * Example: HN3 INTI_02-82.02
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetIncomingSiteDescription(): void
    {
        $this->incomingSiteDescription = [];
    }

    /**
     * Returns Incoming Currency Code.
     * Incoming Currency Code
     *
     * Example: GBP
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getIncomingCurrencyCode(): ?string
    {
        if (count($this->incomingCurrencyCode) == 0) {
            return null;
        }
        return $this->incomingCurrencyCode['value'];
    }

    /**
     * Sets Incoming Currency Code.
     * Incoming Currency Code
     *
     * Example: GBP
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps IncomingCurrencyCode
     */
    public function setIncomingCurrencyCode(?string $incomingCurrencyCode): void
    {
        $this->incomingCurrencyCode['value'] = $incomingCurrencyCode;
    }

    /**
     * Unsets Incoming Currency Code.
     * Incoming Currency Code
     *
     * Example: GBP
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetIncomingCurrencyCode(): void
    {
        $this->incomingCurrencyCode = [];
    }

    /**
     * Returns Incoming Product Code.
     * Incoming Product Code
     *
     * Example: 30
     */
    public function getIncomingProductCode(): ?string
    {
        if (count($this->incomingProductCode) == 0) {
            return null;
        }
        return $this->incomingProductCode['value'];
    }

    /**
     * Sets Incoming Product Code.
     * Incoming Product Code
     *
     * Example: 30
     *
     * @maps IncomingProductCode
     */
    public function setIncomingProductCode(?string $incomingProductCode): void
    {
        $this->incomingProductCode['value'] = $incomingProductCode;
    }

    /**
     * Unsets Incoming Product Code.
     * Incoming Product Code
     *
     * Example: 30
     */
    public function unsetIncomingProductCode(): void
    {
        $this->incomingProductCode = [];
    }

    /**
     * Returns Credit Debit Code.
     * Credit Debit Code
     *
     * Example: “D” or “C”
     *
     * The value could be null/blank for fees item.
     */
    public function getCreditDebitCode(): ?string
    {
        if (count($this->creditDebitCode) == 0) {
            return null;
        }
        return $this->creditDebitCode['value'];
    }

    /**
     * Sets Credit Debit Code.
     * Credit Debit Code
     *
     * Example: “D” or “C”
     *
     * The value could be null/blank for fees item.
     *
     * @maps CreditDebitCode
     */
    public function setCreditDebitCode(?string $creditDebitCode): void
    {
        $this->creditDebitCode['value'] = $creditDebitCode;
    }

    /**
     * Unsets Credit Debit Code.
     * Credit Debit Code
     *
     * Example: “D” or “C”
     *
     * The value could be null/blank for fees item.
     */
    public function unsetCreditDebitCode(): void
    {
        $this->creditDebitCode = [];
    }

    /**
     * Returns Correction Flag.
     * Correction Flag
     *
     * Example: “Y” or “N”
     *
     * The value could be null/blank for fees item.
     */
    public function getCorrectionFlag(): ?string
    {
        if (count($this->correctionFlag) == 0) {
            return null;
        }
        return $this->correctionFlag['value'];
    }

    /**
     * Sets Correction Flag.
     * Correction Flag
     *
     * Example: “Y” or “N”
     *
     * The value could be null/blank for fees item.
     *
     * @maps CorrectionFlag
     */
    public function setCorrectionFlag(?string $correctionFlag): void
    {
        $this->correctionFlag['value'] = $correctionFlag;
    }

    /**
     * Unsets Correction Flag.
     * Correction Flag
     *
     * Example: “Y” or “N”
     *
     * The value could be null/blank for fees item.
     */
    public function unsetCorrectionFlag(): void
    {
        $this->correctionFlag = [];
    }

    /**
     * Returns Additional 1.
     * Additional1
     */
    public function getAdditional1(): ?string
    {
        if (count($this->additional1) == 0) {
            return null;
        }
        return $this->additional1['value'];
    }

    /**
     * Sets Additional 1.
     * Additional1
     *
     * @maps Additional1
     */
    public function setAdditional1(?string $additional1): void
    {
        $this->additional1['value'] = $additional1;
    }

    /**
     * Unsets Additional 1.
     * Additional1
     */
    public function unsetAdditional1(): void
    {
        $this->additional1 = [];
    }

    /**
     * Returns Additional 2.
     * Additional2
     */
    public function getAdditional2(): ?string
    {
        if (count($this->additional2) == 0) {
            return null;
        }
        return $this->additional2['value'];
    }

    /**
     * Sets Additional 2.
     * Additional2
     *
     * @maps Additional2
     */
    public function setAdditional2(?string $additional2): void
    {
        $this->additional2['value'] = $additional2;
    }

    /**
     * Unsets Additional 2.
     * Additional2
     */
    public function unsetAdditional2(): void
    {
        $this->additional2 = [];
    }

    /**
     * Returns Additional 3.
     * Additional3
     */
    public function getAdditional3(): ?string
    {
        if (count($this->additional3) == 0) {
            return null;
        }
        return $this->additional3['value'];
    }

    /**
     * Sets Additional 3.
     * Additional3
     *
     * @maps Additional3
     */
    public function setAdditional3(?string $additional3): void
    {
        $this->additional3['value'] = $additional3;
    }

    /**
     * Unsets Additional 3.
     * Additional3
     */
    public function unsetAdditional3(): void
    {
        $this->additional3 = [];
    }

    /**
     * Returns Additional 4.
     * Additional4
     */
    public function getAdditional4(): ?string
    {
        if (count($this->additional4) == 0) {
            return null;
        }
        return $this->additional4['value'];
    }

    /**
     * Sets Additional 4.
     * Additional4
     *
     * @maps Additional4
     */
    public function setAdditional4(?string $additional4): void
    {
        $this->additional4['value'] = $additional4;
    }

    /**
     * Unsets Additional 4.
     * Additional4
     */
    public function unsetAdditional4(): void
    {
        $this->additional4 = [];
    }

    /**
     * Returns Rebateon Net Amount in Customer Currency.
     * Rebate on Net Amount In Customer Currency
     *
     * Example: -0.735000000000
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getRebateonNetAmountInCustomerCurrency(): ?float
    {
        if (count($this->rebateonNetAmountInCustomerCurrency) == 0) {
            return null;
        }
        return $this->rebateonNetAmountInCustomerCurrency['value'];
    }

    /**
     * Sets Rebateon Net Amount in Customer Currency.
     * Rebate on Net Amount In Customer Currency
     *
     * Example: -0.735000000000
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps RebateonNetAmountInCustomerCurrency
     */
    public function setRebateonNetAmountInCustomerCurrency(?float $rebateonNetAmountInCustomerCurrency): void
    {
        $this->rebateonNetAmountInCustomerCurrency['value'] = $rebateonNetAmountInCustomerCurrency;
    }

    /**
     * Unsets Rebateon Net Amount in Customer Currency.
     * Rebate on Net Amount In Customer Currency
     *
     * Example: -0.735000000000
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetRebateonNetAmountInCustomerCurrency(): void
    {
        $this->rebateonNetAmountInCustomerCurrency = [];
    }

    /**
     * Returns Rebateon Net Amount in Transaction Currency.
     * Rebate on Net Amount In Transaction Currency
     *
     * Example: -0.735000000000
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function getRebateonNetAmountInTransactionCurrency(): ?float
    {
        if (count($this->rebateonNetAmountInTransactionCurrency) == 0) {
            return null;
        }
        return $this->rebateonNetAmountInTransactionCurrency['value'];
    }

    /**
     * Sets Rebateon Net Amount in Transaction Currency.
     * Rebate on Net Amount In Transaction Currency
     *
     * Example: -0.735000000000
     *
     * Note: - The value could be null/blank for fees item.
     *
     * @maps RebateonNetAmountInTransactionCurrency
     */
    public function setRebateonNetAmountInTransactionCurrency(?float $rebateonNetAmountInTransactionCurrency): void
    {
        $this->rebateonNetAmountInTransactionCurrency['value'] = $rebateonNetAmountInTransactionCurrency;
    }

    /**
     * Unsets Rebateon Net Amount in Transaction Currency.
     * Rebate on Net Amount In Transaction Currency
     *
     * Example: -0.735000000000
     *
     * Note: - The value could be null/blank for fees item.
     */
    public function unsetRebateonNetAmountInTransactionCurrency(): void
    {
        $this->rebateonNetAmountInTransactionCurrency = [];
    }

    /**
     * Returns Network Code.
     * Network Code
     *
     * Example: AVEE PTUAZONW CUBFAO COSFS
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getNetworkCode(): ?string
    {
        if (count($this->networkCode) == 0) {
            return null;
        }
        return $this->networkCode['value'];
    }

    /**
     * Sets Network Code.
     * Network Code
     *
     * Example: AVEE PTUAZONW CUBFAO COSFS
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps NetworkCode
     */
    public function setNetworkCode(?string $networkCode): void
    {
        $this->networkCode['value'] = $networkCode;
    }

    /**
     * Unsets Network Code.
     * Network Code
     *
     * Example: AVEE PTUAZONW CUBFAO COSFS
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetNetworkCode(): void
    {
        $this->networkCode = [];
    }

    /**
     * Returns Trn Identifier.
     * Transaction Identifier
     */
    public function getTrnIdentifier(): ?string
    {
        if (count($this->trnIdentifier) == 0) {
            return null;
        }
        return $this->trnIdentifier['value'];
    }

    /**
     * Sets Trn Identifier.
     * Transaction Identifier
     *
     * @maps TrnIdentifier
     */
    public function setTrnIdentifier(?string $trnIdentifier): void
    {
        $this->trnIdentifier['value'] = $trnIdentifier;
    }

    /**
     * Unsets Trn Identifier.
     * Transaction Identifier
     */
    public function unsetTrnIdentifier(): void
    {
        $this->trnIdentifier = [];
    }

    /**
     * Returns Card Type.
     * Card Type
     */
    public function getCardType(): ?string
    {
        if (count($this->cardType) == 0) {
            return null;
        }
        return $this->cardType['value'];
    }

    /**
     * Sets Card Type.
     * Card Type
     *
     * @maps CardType
     */
    public function setCardType(?string $cardType): void
    {
        $this->cardType['value'] = $cardType;
    }

    /**
     * Unsets Card Type.
     * Card Type
     */
    public function unsetCardType(): void
    {
        $this->cardType = [];
    }

    /**
     * Returns Delco List Price Unit Net.
     * Delco List Price Unit Net
     *
     * Example: 30.500000
     */
    public function getDelcoListPriceUnitNet(): ?float
    {
        if (count($this->delcoListPriceUnitNet) == 0) {
            return null;
        }
        return $this->delcoListPriceUnitNet['value'];
    }

    /**
     * Sets Delco List Price Unit Net.
     * Delco List Price Unit Net
     *
     * Example: 30.500000
     *
     * @maps DelcoListPriceUnitNet
     */
    public function setDelcoListPriceUnitNet(?float $delcoListPriceUnitNet): void
    {
        $this->delcoListPriceUnitNet['value'] = $delcoListPriceUnitNet;
    }

    /**
     * Unsets Delco List Price Unit Net.
     * Delco List Price Unit Net
     *
     * Example: 30.500000
     */
    public function unsetDelcoListPriceUnitNet(): void
    {
        $this->delcoListPriceUnitNet = [];
    }

    /**
     * Returns Delco Retail Price Unit Net.
     * Retail Net Price (or pump net price) per Unit in transaction currency
     *
     * Example: 1.921000
     */
    public function getDelcoRetailPriceUnitNet(): ?float
    {
        if (count($this->delcoRetailPriceUnitNet) == 0) {
            return null;
        }
        return $this->delcoRetailPriceUnitNet['value'];
    }

    /**
     * Sets Delco Retail Price Unit Net.
     * Retail Net Price (or pump net price) per Unit in transaction currency
     *
     * Example: 1.921000
     *
     * @maps DelcoRetailPriceUnitNet
     */
    public function setDelcoRetailPriceUnitNet(?float $delcoRetailPriceUnitNet): void
    {
        $this->delcoRetailPriceUnitNet['value'] = $delcoRetailPriceUnitNet;
    }

    /**
     * Unsets Delco Retail Price Unit Net.
     * Retail Net Price (or pump net price) per Unit in transaction currency
     *
     * Example: 1.921000
     */
    public function unsetDelcoRetailPriceUnitNet(): void
    {
        $this->delcoRetailPriceUnitNet = [];
    }

    /**
     * Returns Delco Retail Price Unit Gross.
     * Retail gross price (or pump gross price) per unit in transaction currency
     */
    public function getDelcoRetailPriceUnitGross(): ?float
    {
        if (count($this->delcoRetailPriceUnitGross) == 0) {
            return null;
        }
        return $this->delcoRetailPriceUnitGross['value'];
    }

    /**
     * Sets Delco Retail Price Unit Gross.
     * Retail gross price (or pump gross price) per unit in transaction currency
     *
     * @maps DelcoRetailPriceUnitGross
     */
    public function setDelcoRetailPriceUnitGross(?float $delcoRetailPriceUnitGross): void
    {
        $this->delcoRetailPriceUnitGross['value'] = $delcoRetailPriceUnitGross;
    }

    /**
     * Unsets Delco Retail Price Unit Gross.
     * Retail gross price (or pump gross price) per unit in transaction currency
     */
    public function unsetDelcoRetailPriceUnitGross(): void
    {
        $this->delcoRetailPriceUnitGross = [];
    }

    /**
     * Returns Delco Retail Value Total Net.
     * Retail net price (or net pump price) in transaction currency
     */
    public function getDelcoRetailValueTotalNet(): ?float
    {
        if (count($this->delcoRetailValueTotalNet) == 0) {
            return null;
        }
        return $this->delcoRetailValueTotalNet['value'];
    }

    /**
     * Sets Delco Retail Value Total Net.
     * Retail net price (or net pump price) in transaction currency
     *
     * @maps DelcoRetailValueTotalNet
     */
    public function setDelcoRetailValueTotalNet(?float $delcoRetailValueTotalNet): void
    {
        $this->delcoRetailValueTotalNet['value'] = $delcoRetailValueTotalNet;
    }

    /**
     * Unsets Delco Retail Value Total Net.
     * Retail net price (or net pump price) in transaction currency
     */
    public function unsetDelcoRetailValueTotalNet(): void
    {
        $this->delcoRetailValueTotalNet = [];
    }

    /**
     * Returns Delco Retail Value Total Gross.
     * Retail gross price (or gross pump price) in transaction currency
     */
    public function getDelcoRetailValueTotalGross(): ?float
    {
        if (count($this->delcoRetailValueTotalGross) == 0) {
            return null;
        }
        return $this->delcoRetailValueTotalGross['value'];
    }

    /**
     * Sets Delco Retail Value Total Gross.
     * Retail gross price (or gross pump price) in transaction currency
     *
     * @maps DelcoRetailValueTotalGross
     */
    public function setDelcoRetailValueTotalGross(?float $delcoRetailValueTotalGross): void
    {
        $this->delcoRetailValueTotalGross['value'] = $delcoRetailValueTotalGross;
    }

    /**
     * Unsets Delco Retail Value Total Gross.
     * Retail gross price (or gross pump price) in transaction currency
     */
    public function unsetDelcoRetailValueTotalGross(): void
    {
        $this->delcoRetailValueTotalGross = [];
    }

    /**
     * Returns Customer Retail Price Unit Gross.
     * Retail gross price (or pump gross price) per unit in customer currency
     */
    public function getCustomerRetailPriceUnitGross(): ?float
    {
        if (count($this->customerRetailPriceUnitGross) == 0) {
            return null;
        }
        return $this->customerRetailPriceUnitGross['value'];
    }

    /**
     * Sets Customer Retail Price Unit Gross.
     * Retail gross price (or pump gross price) per unit in customer currency
     *
     * @maps CustomerRetailPriceUnitGross
     */
    public function setCustomerRetailPriceUnitGross(?float $customerRetailPriceUnitGross): void
    {
        $this->customerRetailPriceUnitGross['value'] = $customerRetailPriceUnitGross;
    }

    /**
     * Unsets Customer Retail Price Unit Gross.
     * Retail gross price (or pump gross price) per unit in customer currency
     */
    public function unsetCustomerRetailPriceUnitGross(): void
    {
        $this->customerRetailPriceUnitGross = [];
    }

    /**
     * Returns Customer Retail Value Total Gross.
     * Retail gross price (or gross pump price) in customer currency
     */
    public function getCustomerRetailValueTotalGross(): ?float
    {
        if (count($this->customerRetailValueTotalGross) == 0) {
            return null;
        }
        return $this->customerRetailValueTotalGross['value'];
    }

    /**
     * Sets Customer Retail Value Total Gross.
     * Retail gross price (or gross pump price) in customer currency
     *
     * @maps CustomerRetailValueTotalGross
     */
    public function setCustomerRetailValueTotalGross(?float $customerRetailValueTotalGross): void
    {
        $this->customerRetailValueTotalGross['value'] = $customerRetailValueTotalGross;
    }

    /**
     * Unsets Customer Retail Value Total Gross.
     * Retail gross price (or gross pump price) in customer currency
     */
    public function unsetCustomerRetailValueTotalGross(): void
    {
        $this->customerRetailValueTotalGross = [];
    }

    /**
     * Returns Customer Retail Value Total Net.
     * Retail gross price (or gross pump price) in customer currency
     *
     * Retail net price (or net pump price) in customer currency
     */
    public function getCustomerRetailValueTotalNet(): ?float
    {
        if (count($this->customerRetailValueTotalNet) == 0) {
            return null;
        }
        return $this->customerRetailValueTotalNet['value'];
    }

    /**
     * Sets Customer Retail Value Total Net.
     * Retail gross price (or gross pump price) in customer currency
     *
     * Retail net price (or net pump price) in customer currency
     *
     * @maps CustomerRetailValueTotalNet
     */
    public function setCustomerRetailValueTotalNet(?float $customerRetailValueTotalNet): void
    {
        $this->customerRetailValueTotalNet['value'] = $customerRetailValueTotalNet;
    }

    /**
     * Unsets Customer Retail Value Total Net.
     * Retail gross price (or gross pump price) in customer currency
     *
     * Retail net price (or net pump price) in customer currency
     */
    public function unsetCustomerRetailValueTotalNet(): void
    {
        $this->customerRetailValueTotalNet = [];
    }

    /**
     * Returns Transaction Type Description.
     * Transaction Type Description
     *
     * Note: - The value could be null/blank for fees item
     */
    public function getTransactionTypeDescription(): ?string
    {
        if (count($this->transactionTypeDescription) == 0) {
            return null;
        }
        return $this->transactionTypeDescription['value'];
    }

    /**
     * Sets Transaction Type Description.
     * Transaction Type Description
     *
     * Note: - The value could be null/blank for fees item
     *
     * @maps TransactionTypeDescription
     */
    public function setTransactionTypeDescription(?string $transactionTypeDescription): void
    {
        $this->transactionTypeDescription['value'] = $transactionTypeDescription;
    }

    /**
     * Unsets Transaction Type Description.
     * Transaction Type Description
     *
     * Note: - The value could be null/blank for fees item
     */
    public function unsetTransactionTypeDescription(): void
    {
        $this->transactionTypeDescription = [];
    }

    /**
     * Returns Error.
     */
    public function getError(): ?ErrorStatus
    {
        return $this->error;
    }

    /**
     * Sets Error.
     *
     * @maps Error
     */
    public function setError(?ErrorStatus $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Request Id.
     * API Request Id
     */
    public function getRequestId(): ?string
    {
        return $this->requestId;
    }

    /**
     * Sets Request Id.
     * API Request Id
     *
     * @maps RequestId
     */
    public function setRequestId(?string $requestId): void
    {
        $this->requestId = $requestId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->type)) {
            $json['Type']                                    = $this->type['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                                  = $this->cardId['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']                                 = $this->cardPAN['value'];
        }
        if (!empty($this->cardExpiry)) {
            $json['CardExpiry']                              = $this->cardExpiry['value'];
        }
        if (!empty($this->transactionDate)) {
            $json['TransactionDate']                         = $this->transactionDate['value'];
        }
        if (!empty($this->transactionTime)) {
            $json['TransactionTime']                         = $this->transactionTime['value'];
        }
        if (!empty($this->uTCOffset)) {
            $json['UTCOffset']                               = $this->uTCOffset['value'];
        }
        if (!empty($this->fleetIdInput)) {
            $json['FleetIdInput']                            = $this->fleetIdInput['value'];
        }
        if (!empty($this->odometerInput)) {
            $json['OdometerInput']                           = $this->odometerInput['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                              = $this->driverName['value'];
        }
        if (!empty($this->vehicleRegistration)) {
            $json['VehicleRegistration']                     = $this->vehicleRegistration['value'];
        }
        if (!empty($this->invoiceCurrencyCode)) {
            $json['InvoiceCurrencyCode']                     = $this->invoiceCurrencyCode['value'];
        }
        if (!empty($this->invoiceCurrencySymbol)) {
            $json['InvoiceCurrencySymbol']                   = $this->invoiceCurrencySymbol['value'];
        }
        if (!empty($this->transactionCurrencyCode)) {
            $json['TransactionCurrencyCode']                 = $this->transactionCurrencyCode['value'];
        }
        if (!empty($this->transactionCurrencySymbol)) {
            $json['TransactionCurrencySymbol']               = $this->transactionCurrencySymbol['value'];
        }
        if (!empty($this->transactionNetAmount)) {
            $json['TransactionNetAmount']                    = $this->transactionNetAmount['value'];
        }
        if (!empty($this->transactionTax)) {
            $json['TransactionTax']                          = $this->transactionTax['value'];
        }
        if (!empty($this->transactionGrossAmount)) {
            $json['TransactionGrossAmount']                  = $this->transactionGrossAmount['value'];
        }
        if (!empty($this->invoiceNetAmount)) {
            $json['InvoiceNetAmount']                        = $this->invoiceNetAmount['value'];
        }
        if (!empty($this->invoiceTax)) {
            $json['InvoiceTax']                              = $this->invoiceTax['value'];
        }
        if (!empty($this->invoiceGrossAmount)) {
            $json['InvoiceGrossAmount']                      = $this->invoiceGrossAmount['value'];
        }
        if (!empty($this->purchasedInCountry)) {
            $json['PurchasedInCountry']                      = $this->purchasedInCountry['value'];
        }
        if (!empty($this->accountId)) {
            $json['AccountId']                               = $this->accountId['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                           = $this->accountNumber['value'];
        }
        if (!empty($this->accountName)) {
            $json['AccountName']                             = $this->accountName['value'];
        }
        if (!empty($this->accountShortName)) {
            $json['AccountShortName']                        = $this->accountShortName['value'];
        }
        if (!empty($this->quantity)) {
            $json['Quantity']                                = $this->quantity['value'];
        }
        if (!empty($this->fuelProduct)) {
            $json['FuelProduct']                             = $this->fuelProduct['value'];
        }
        if (!empty($this->unitPriceInTransactionCurrency)) {
            $json['UnitPriceInTransactionCurrency']          = $this->unitPriceInTransactionCurrency['value'];
        }
        if (!empty($this->unitPriceInInvoiceCurrency)) {
            $json['UnitPriceInInvoiceCurrency']              = $this->unitPriceInInvoiceCurrency['value'];
        }
        if (!empty($this->unitDiscountTransactionCurrency)) {
            $json['UnitDiscountTransactionCurrency']         = $this->unitDiscountTransactionCurrency['value'];
        }
        if (!empty($this->unitDiscountInvoiceCurrency)) {
            $json['UnitDiscountInvoiceCurrency']             = $this->unitDiscountInvoiceCurrency['value'];
        }
        if (!empty($this->isInvoiced)) {
            $json['IsInvoiced']                              = $this->isInvoiced['value'];
        }
        if (!empty($this->invoiceNumber)) {
            $json['InvoiceNumber']                           = $this->invoiceNumber['value'];
        }
        if (!empty($this->invoiceDate)) {
            $json['InvoiceDate']                             = $this->invoiceDate['value'];
        }
        if (!empty($this->siteCode)) {
            $json['SiteCode']                                = $this->siteCode['value'];
        }
        if (!empty($this->siteName)) {
            $json['SiteName']                                = $this->siteName['value'];
        }
        if (!empty($this->siteCountry)) {
            $json['SiteCountry']                             = $this->siteCountry['value'];
        }
        if (isset($this->location)) {
            $json['Location']                                = $this->location;
        }
        if (!empty($this->cardGroupName)) {
            $json['CardGroupName']                           = $this->cardGroupName['value'];
        }
        if (!empty($this->receiptNumber)) {
            $json['ReceiptNumber']                           = $this->receiptNumber['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']                             = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']                             = $this->productName['value'];
        }
        if (!empty($this->productGroupId)) {
            $json['ProductGroupId']                          = $this->productGroupId['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']                        = $this->productGroupName['value'];
        }
        if (!empty($this->delCoExchangeRate)) {
            $json['DelCoExchangeRate']                       = $this->delCoExchangeRate['value'];
        }
        if (!empty($this->colCoExchangeRate)) {
            $json['ColCoExchangeRate']                       = $this->colCoExchangeRate['value'];
        }
        if (!empty($this->isShellSite)) {
            $json['IsShellSite']                             = $this->isShellSite['value'];
        }
        if (!empty($this->network)) {
            $json['Network']                                 = $this->network['value'];
        }
        if (!empty($this->siteGroupId)) {
            $json['SiteGroupId']                             = $this->siteGroupId['value'];
        }
        if (!empty($this->siteGroupName)) {
            $json['SiteGroupName']                           = $this->siteGroupName['value'];
        }
        if (!empty($this->postingDate)) {
            $json['PostingDate']                             = $this->postingDate['value'];
        }
        if (!empty($this->issuerCode)) {
            $json['IssuerCode']                              = $this->issuerCode['value'];
        }
        if (!empty($this->purchasedInCountryCode)) {
            $json['PurchasedInCountryCode']                  = $this->purchasedInCountryCode['value'];
        }
        if (!empty($this->customerCountryCode)) {
            $json['CustomerCountryCode']                     = $this->customerCountryCode['value'];
        }
        if (!empty($this->customerCountry)) {
            $json['CustomerCountry']                         = $this->customerCountry['value'];
        }
        if (!empty($this->releaseCode)) {
            $json['ReleaseCode']                             = $this->releaseCode['value'];
        }
        if (!empty($this->cardGroupId)) {
            $json['CardGroupId']                             = $this->cardGroupId['value'];
        }
        if (!empty($this->cardSequenceNumber)) {
            $json['CardSequenceNumber']                      = $this->cardSequenceNumber['value'];
        }
        if (!empty($this->checkDigit)) {
            $json['CheckDigit']                              = $this->checkDigit['value'];
        }
        if (!empty($this->fleetIDDescription)) {
            $json['FleetIDDescription']                      = $this->fleetIDDescription['value'];
        }
        if (!empty($this->vATRate)) {
            $json['VATRate']                                 = $this->vATRate['value'];
        }
        if (!empty($this->vATCategory)) {
            $json['VATCategory']                             = $this->vATCategory['value'];
        }
        if (!empty($this->vATCountry)) {
            $json['VATCountry']                              = $this->vATCountry['value'];
        }
        if (!empty($this->effectiveDiscountInTrxCurrency)) {
            $json['EffectiveDiscountInTrxCurrency']          = $this->effectiveDiscountInTrxCurrency['value'];
        }
        if (!empty($this->transactionType)) {
            $json['TransactionType']                         = $this->transactionType['value'];
        }
        if (!empty($this->pINIndicator)) {
            $json['PINIndicator']                            = $this->pINIndicator['value'];
        }
        if (!empty($this->vATApplicable)) {
            $json['VATApplicable']                           = $this->vATApplicable['value'];
        }
        if (!empty($this->netInvoiceIndicator)) {
            $json['NetInvoiceIndicator']                     = $this->netInvoiceIndicator['value'];
        }
        if (!empty($this->customerCurrencyCode)) {
            $json['CustomerCurrencyCode']                    = $this->customerCurrencyCode['value'];
        }
        if (!empty($this->customerCurrencySymbol)) {
            $json['CustomerCurrencySymbol']                  = $this->customerCurrencySymbol['value'];
        }
        if (!empty($this->effectiveUnitDiscountInCustomerCurrency)) {
            $json['EffectiveUnitDiscountInCustomerCurrency'] = $this->effectiveUnitDiscountInCustomerCurrency['value'];
        }
        if (!empty($this->effectiveDiscountInCustomerCurrency)) {
            $json['EffectiveDiscountInCustomerCurrency']     = $this->effectiveDiscountInCustomerCurrency['value'];
        }
        if (!empty($this->vATonNetAmountInCustomerCurrency)) {
            $json['VATonNetAmountInCustomerCurrency']        = $this->vATonNetAmountInCustomerCurrency['value'];
        }
        if (!empty($this->discountType)) {
            $json['DiscountType']                            = $this->discountType['value'];
        }
        if (!empty($this->transactionStatus)) {
            $json['TransactionStatus']                       = $this->transactionStatus['value'];
        }
        if (!empty($this->salesItemId)) {
            $json['SalesItemId']                             = $this->salesItemId['value'];
        }
        if (!empty($this->payerGroup)) {
            $json['PayerGroup']                              = $this->payerGroup['value'];
        }
        if (!empty($this->payerGroupName)) {
            $json['PayerGroupName']                          = $this->payerGroupName['value'];
        }
        if (!empty($this->refundFlag)) {
            $json['RefundFlag']                              = $this->refundFlag['value'];
        }
        if (!empty($this->originalSalesItemId)) {
            $json['OriginalSalesItemId']                     = $this->originalSalesItemId['value'];
        }
        if (!empty($this->delcoName)) {
            $json['DelcoName']                               = $this->delcoName['value'];
        }
        if (!empty($this->delcoCode)) {
            $json['DelcoCode']                               = $this->delcoCode['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                             = $this->payerNumber['value'];
        }
        if (!empty($this->payerName)) {
            $json['PayerName']                               = $this->payerName['value'];
        }
        if (!empty($this->cardExpiryPeriod)) {
            $json['CardExpiryPeriod']                        = $this->cardExpiryPeriod['value'];
        }
        if (!empty($this->authorisationCode)) {
            $json['AuthorisationCode']                       = $this->authorisationCode['value'];
        }
        if (!empty($this->transactionId)) {
            $json['TransactionId']                           = $this->transactionId['value'];
        }
        if (!empty($this->transactionLine)) {
            $json['TransactionLine']                         = $this->transactionLine['value'];
        }
        if (!empty($this->allowClearing)) {
            $json['AllowClearing']                           = $this->allowClearing['value'];
        }
        if (!empty($this->cRMNumber)) {
            $json['CRMNumber']                               = $this->cRMNumber['value'];
        }
        if (!empty($this->disputeStatus)) {
            $json['DisputeStatus']                           = $this->disputeStatus['value'];
        }
        if (!empty($this->rebateRate)) {
            $json['RebateRate']                              = $this->rebateRate['value'];
        }
        if (!empty($this->delCoToColCoExchangeRate)) {
            $json['DelCoToColCoExchangeRate']                = $this->delCoToColCoExchangeRate['value'];
        }
        if (!empty($this->netEuroAmount)) {
            $json['NetEuroAmount']                           = $this->netEuroAmount['value'];
        }
        if (!empty($this->euroRebateAmount)) {
            $json['EuroRebateAmount']                        = $this->euroRebateAmount['value'];
        }
        if (!empty($this->euroVATAmount)) {
            $json['EuroVATAmount']                           = $this->euroVATAmount['value'];
        }
        if (!empty($this->parentCustomerNumber)) {
            $json['ParentCustomerNumber']                    = $this->parentCustomerNumber['value'];
        }
        if (!empty($this->parentCustomerName)) {
            $json['ParentCustomerName']                      = $this->parentCustomerName['value'];
        }
        if (!empty($this->parentCustomerId)) {
            $json['ParentCustomerId']                        = $this->parentCustomerId['value'];
        }
        if (!empty($this->incomingSiteNumber)) {
            $json['IncomingSiteNumber']                      = $this->incomingSiteNumber['value'];
        }
        if (!empty($this->incomingSiteDescription)) {
            $json['IncomingSiteDescription']                 = $this->incomingSiteDescription['value'];
        }
        if (!empty($this->incomingCurrencyCode)) {
            $json['IncomingCurrencyCode']                    = $this->incomingCurrencyCode['value'];
        }
        if (!empty($this->incomingProductCode)) {
            $json['IncomingProductCode']                     = $this->incomingProductCode['value'];
        }
        if (!empty($this->creditDebitCode)) {
            $json['CreditDebitCode']                         = $this->creditDebitCode['value'];
        }
        if (!empty($this->correctionFlag)) {
            $json['CorrectionFlag']                          = $this->correctionFlag['value'];
        }
        if (!empty($this->additional1)) {
            $json['Additional1']                             = $this->additional1['value'];
        }
        if (!empty($this->additional2)) {
            $json['Additional2']                             = $this->additional2['value'];
        }
        if (!empty($this->additional3)) {
            $json['Additional3']                             = $this->additional3['value'];
        }
        if (!empty($this->additional4)) {
            $json['Additional4']                             = $this->additional4['value'];
        }
        if (!empty($this->rebateonNetAmountInCustomerCurrency)) {
            $json['RebateonNetAmountInCustomerCurrency']     = $this->rebateonNetAmountInCustomerCurrency['value'];
        }
        if (!empty($this->rebateonNetAmountInTransactionCurrency)) {
            $json['RebateonNetAmountInTransactionCurrency']  = $this->rebateonNetAmountInTransactionCurrency['value'];
        }
        if (!empty($this->networkCode)) {
            $json['NetworkCode']                             = $this->networkCode['value'];
        }
        if (!empty($this->trnIdentifier)) {
            $json['TrnIdentifier']                           = $this->trnIdentifier['value'];
        }
        if (!empty($this->cardType)) {
            $json['CardType']                                = $this->cardType['value'];
        }
        if (!empty($this->delcoListPriceUnitNet)) {
            $json['DelcoListPriceUnitNet']                   = $this->delcoListPriceUnitNet['value'];
        }
        if (!empty($this->delcoRetailPriceUnitNet)) {
            $json['DelcoRetailPriceUnitNet']                 = $this->delcoRetailPriceUnitNet['value'];
        }
        if (!empty($this->delcoRetailPriceUnitGross)) {
            $json['DelcoRetailPriceUnitGross']               = $this->delcoRetailPriceUnitGross['value'];
        }
        if (!empty($this->delcoRetailValueTotalNet)) {
            $json['DelcoRetailValueTotalNet']                = $this->delcoRetailValueTotalNet['value'];
        }
        if (!empty($this->delcoRetailValueTotalGross)) {
            $json['DelcoRetailValueTotalGross']              = $this->delcoRetailValueTotalGross['value'];
        }
        if (!empty($this->customerRetailPriceUnitGross)) {
            $json['CustomerRetailPriceUnitGross']            = $this->customerRetailPriceUnitGross['value'];
        }
        if (!empty($this->customerRetailValueTotalGross)) {
            $json['CustomerRetailValueTotalGross']           = $this->customerRetailValueTotalGross['value'];
        }
        if (!empty($this->customerRetailValueTotalNet)) {
            $json['CustomerRetailValueTotalNet']             = $this->customerRetailValueTotalNet['value'];
        }
        if (!empty($this->transactionTypeDescription)) {
            $json['TransactionTypeDescription']              = $this->transactionTypeDescription['value'];
        }
        if (isset($this->error)) {
            $json['Error']                                   = $this->error;
        }
        if (isset($this->requestId)) {
            $json['RequestId']                               = $this->requestId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

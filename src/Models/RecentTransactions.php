<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use ShellDataReportingAPIsLib\Utils\DateTimeHelper;
use stdClass;

class RecentTransactions implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $accountNumber = [];

    /**
     * @var array
     */
    private $cardIssueNumber = [];

    /**
     * @var array
     */
    private $collectingCompanyCurrencyCode = [];

    /**
     * @var array
     */
    private $custDataCustomerEntered = [];

    /**
     * @var array
     */
    private $custDataDriverId = [];

    /**
     * @var array
     */
    private $custDataFleetDescription = [];

    /**
     * @var array
     */
    private $fleetIdInput = [];

    /**
     * @var array
     */
    private $amount = [];

    /**
     * @var array
     */
    private $euroshellSiteNumber = [];

    /**
     * @var array
     */
    private $incomingProductCode = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $siteCode = [];

    /**
     * @var array
     */
    private $hostingCollectingCompanyName = [];

    /**
     * @var array
     */
    private $hostingCollectingCompanyNumber = [];

    /**
     * @var array
     */
    private $iccdataTranTypeCode = [];

    /**
     * @var array
     */
    private $transactionType = [];

    /**
     * @var array
     */
    private $latitude = [];

    /**
     * @var array
     */
    private $longitude = [];

    /**
     * @var array
     */
    private $merchantCategory = [];

    /**
     * @var array
     */
    private $merchantCategoryDescription = [];

    /**
     * @var array
     */
    private $purchasedInCountry = [];

    /**
     * @var array
     */
    private $merchantId = [];

    /**
     * @var array
     */
    private $siteName = [];

    /**
     * @var array
     */
    private $network = [];

    /**
     * @var array
     */
    private $delcoCode = [];

    /**
     * @var array
     */
    private $odometerInput = [];

    /**
     * @var array
     */
    private $odometerReadingKm = [];

    /**
     * @var array
     */
    private $odometerReadingMiles = [];

    /**
     * @var array
     */
    private $cardPAN = [];

    /**
     * @var array
     */
    private $pINIndicator = [];

    /**
     * @var array
     */
    private $pOIReceiptNumber = [];

    /**
     * @var array
     */
    private $productsCodeAdditional = [];

    /**
     * @var array
     */
    private $productsTaxCode = [];

    /**
     * @var array
     */
    private $fuelVolume = [];

    /**
     * @var array
     */
    private $sfgwCardDateOfExpiry = [];

    /**
     * @var array
     */
    private $siteCurrencyISOCode = [];

    /**
     * @var array
     */
    private $cardId = [];

    /**
     * @var array
     */
    private $transactionDate = [];

    /**
     * @var array
     */
    private $transactionDateTime = [];

    /**
     * @var array
     */
    private $transactionId = [];

    /**
     * @var array
     */
    private $transactionStatus = [];

    /**
     * @var array
     */
    private $unitOfMeasure = [];

    /**
     * @var array
     */
    private $vehicleRegistrationNumber = [];

    /**
     * @var array
     */
    private $networkDelcoName = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $fuelProduct = [];

    /**
     * @var array
     */
    private $accountCustomerName = [];

    /**
     * @var array
     */
    private $payerName = [];

    /**
     * @var array
     */
    private $transactionTime = [];

    /**
     * @var array
     */
    private $transactionCurrency = [];

    /**
     * @var array
     */
    private $unitPrice = [];

    /**
     * @var array
     */
    private $authorisedFlag = [];

    /**
     * @var array
     */
    private $transactionTimeGMT = [];

    /**
     * @var array
     */
    private $reasonCode = [];

    /**
     * @var array
     */
    private $issuerActionCode = [];

    /**
     * @var array
     */
    private $issuerActionCodeDescription = [];

    /**
     * @var array
     */
    private $declinedReason = [];

    /**
     * @var array
     */
    private $cardStatusReasonDescription = [];

    /**
     * @var array
     */
    private $transactionCountry = [];

    /**
     * @var array
     */
    private $issuingCollectingCompanyName = [];

    /**
     * @var array
     */
    private $cardIssuerName = [];

    /**
     * @var array
     */
    private $driverName = [];

    /**
     * @var array
     */
    private $bearerDescription = [];

    /**
     * @var array
     */
    private $cardCategoryDescription = [];

    /**
     * @var array
     */
    private $cardTypeDescription = [];

    /**
     * @var array
     */
    private $cardTokenTypeDescription = [];

    /**
     * @var array
     */
    private $embossType = [];

    /**
     * @var array
     */
    private $eVPrintedNumber = [];

    /**
     * @var array
     */
    private $isRFID = [];

    /**
     * Returns Col Co Code.
     * ColCoCode
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * ColCoCode
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * ColCoCode
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Number.
     * PayerNumber
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * PayerNumber
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * PayerNumber
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Account Number.
     * Account Number
     */
    public function getAccountNumber(): ?string
    {
        if (count($this->accountNumber) == 0) {
            return null;
        }
        return $this->accountNumber['value'];
    }

    /**
     * Sets Account Number.
     * Account Number
     *
     * @maps AccountNumber
     */
    public function setAccountNumber(?string $accountNumber): void
    {
        $this->accountNumber['value'] = $accountNumber;
    }

    /**
     * Unsets Account Number.
     * Account Number
     */
    public function unsetAccountNumber(): void
    {
        $this->accountNumber = [];
    }

    /**
     * Returns Card Issue Number.
     * Card Issue Number
     */
    public function getCardIssueNumber(): ?string
    {
        if (count($this->cardIssueNumber) == 0) {
            return null;
        }
        return $this->cardIssueNumber['value'];
    }

    /**
     * Sets Card Issue Number.
     * Card Issue Number
     *
     * @maps CardIssueNumber
     */
    public function setCardIssueNumber(?string $cardIssueNumber): void
    {
        $this->cardIssueNumber['value'] = $cardIssueNumber;
    }

    /**
     * Unsets Card Issue Number.
     * Card Issue Number
     */
    public function unsetCardIssueNumber(): void
    {
        $this->cardIssueNumber = [];
    }

    /**
     * Returns Collecting Company Currency Code.
     * Collecting Company Currency IsoCode
     */
    public function getCollectingCompanyCurrencyCode(): ?string
    {
        if (count($this->collectingCompanyCurrencyCode) == 0) {
            return null;
        }
        return $this->collectingCompanyCurrencyCode['value'];
    }

    /**
     * Sets Collecting Company Currency Code.
     * Collecting Company Currency IsoCode
     *
     * @maps CollectingCompanyCurrencyCode
     */
    public function setCollectingCompanyCurrencyCode(?string $collectingCompanyCurrencyCode): void
    {
        $this->collectingCompanyCurrencyCode['value'] = $collectingCompanyCurrencyCode;
    }

    /**
     * Unsets Collecting Company Currency Code.
     * Collecting Company Currency IsoCode
     */
    public function unsetCollectingCompanyCurrencyCode(): void
    {
        $this->collectingCompanyCurrencyCode = [];
    }

    /**
     * Returns Cust Data Customer Entered.
     * Customer entered data for reference.
     */
    public function getCustDataCustomerEntered(): ?string
    {
        if (count($this->custDataCustomerEntered) == 0) {
            return null;
        }
        return $this->custDataCustomerEntered['value'];
    }

    /**
     * Sets Cust Data Customer Entered.
     * Customer entered data for reference.
     *
     * @maps CustDataCustomerEntered
     */
    public function setCustDataCustomerEntered(?string $custDataCustomerEntered): void
    {
        $this->custDataCustomerEntered['value'] = $custDataCustomerEntered;
    }

    /**
     * Unsets Cust Data Customer Entered.
     * Customer entered data for reference.
     */
    public function unsetCustDataCustomerEntered(): void
    {
        $this->custDataCustomerEntered = [];
    }

    /**
     * Returns Cust Data Driver Id.
     * Customer Data DriverId
     */
    public function getCustDataDriverId(): ?string
    {
        if (count($this->custDataDriverId) == 0) {
            return null;
        }
        return $this->custDataDriverId['value'];
    }

    /**
     * Sets Cust Data Driver Id.
     * Customer Data DriverId
     *
     * @maps CustDataDriverId
     */
    public function setCustDataDriverId(?string $custDataDriverId): void
    {
        $this->custDataDriverId['value'] = $custDataDriverId;
    }

    /**
     * Unsets Cust Data Driver Id.
     * Customer Data DriverId
     */
    public function unsetCustDataDriverId(): void
    {
        $this->custDataDriverId = [];
    }

    /**
     * Returns Cust Data Fleet Description.
     * Cust Data Fleet Description
     */
    public function getCustDataFleetDescription(): ?string
    {
        if (count($this->custDataFleetDescription) == 0) {
            return null;
        }
        return $this->custDataFleetDescription['value'];
    }

    /**
     * Sets Cust Data Fleet Description.
     * Cust Data Fleet Description
     *
     * @maps CustDataFleetDescription
     */
    public function setCustDataFleetDescription(?string $custDataFleetDescription): void
    {
        $this->custDataFleetDescription['value'] = $custDataFleetDescription;
    }

    /**
     * Unsets Cust Data Fleet Description.
     * Cust Data Fleet Description
     */
    public function unsetCustDataFleetDescription(): void
    {
        $this->custDataFleetDescription = [];
    }

    /**
     * Returns Fleet Id Input.
     * Fleet Id Input
     */
    public function getFleetIdInput(): ?string
    {
        if (count($this->fleetIdInput) == 0) {
            return null;
        }
        return $this->fleetIdInput['value'];
    }

    /**
     * Sets Fleet Id Input.
     * Fleet Id Input
     *
     * @maps FleetIdInput
     */
    public function setFleetIdInput(?string $fleetIdInput): void
    {
        $this->fleetIdInput['value'] = $fleetIdInput;
    }

    /**
     * Unsets Fleet Id Input.
     * Fleet Id Input
     */
    public function unsetFleetIdInput(): void
    {
        $this->fleetIdInput = [];
    }

    /**
     * Returns Amount.
     * Amount
     */
    public function getAmount(): ?float
    {
        if (count($this->amount) == 0) {
            return null;
        }
        return $this->amount['value'];
    }

    /**
     * Sets Amount.
     * Amount
     *
     * @maps Amount
     */
    public function setAmount(?float $amount): void
    {
        $this->amount['value'] = $amount;
    }

    /**
     * Unsets Amount.
     * Amount
     */
    public function unsetAmount(): void
    {
        $this->amount = [];
    }

    /**
     * Returns Euroshell Site Number.
     * EuroshellSiteNumber
     */
    public function getEuroshellSiteNumber(): ?string
    {
        if (count($this->euroshellSiteNumber) == 0) {
            return null;
        }
        return $this->euroshellSiteNumber['value'];
    }

    /**
     * Sets Euroshell Site Number.
     * EuroshellSiteNumber
     *
     * @maps EuroshellSiteNumber
     */
    public function setEuroshellSiteNumber(?string $euroshellSiteNumber): void
    {
        $this->euroshellSiteNumber['value'] = $euroshellSiteNumber;
    }

    /**
     * Unsets Euroshell Site Number.
     * EuroshellSiteNumber
     */
    public function unsetEuroshellSiteNumber(): void
    {
        $this->euroshellSiteNumber = [];
    }

    /**
     * Returns Incoming Product Code.
     * IncomingProductCode
     */
    public function getIncomingProductCode(): ?string
    {
        if (count($this->incomingProductCode) == 0) {
            return null;
        }
        return $this->incomingProductCode['value'];
    }

    /**
     * Sets Incoming Product Code.
     * IncomingProductCode
     *
     * @maps IncomingProductCode
     */
    public function setIncomingProductCode(?string $incomingProductCode): void
    {
        $this->incomingProductCode['value'] = $incomingProductCode;
    }

    /**
     * Unsets Incoming Product Code.
     * IncomingProductCode
     */
    public function unsetIncomingProductCode(): void
    {
        $this->incomingProductCode = [];
    }

    /**
     * Returns Product Code.
     * ProductCode
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * ProductCode
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * ProductCode
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * ProductName
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * ProductName
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * ProductName
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Site Code.
     * SiteCode
     */
    public function getSiteCode(): ?int
    {
        if (count($this->siteCode) == 0) {
            return null;
        }
        return $this->siteCode['value'];
    }

    /**
     * Sets Site Code.
     * SiteCode
     *
     * @maps SiteCode
     */
    public function setSiteCode(?int $siteCode): void
    {
        $this->siteCode['value'] = $siteCode;
    }

    /**
     * Unsets Site Code.
     * SiteCode
     */
    public function unsetSiteCode(): void
    {
        $this->siteCode = [];
    }

    /**
     * Returns Hosting Collecting Company Name.
     * HostingCollectingCompanyName
     */
    public function getHostingCollectingCompanyName(): ?string
    {
        if (count($this->hostingCollectingCompanyName) == 0) {
            return null;
        }
        return $this->hostingCollectingCompanyName['value'];
    }

    /**
     * Sets Hosting Collecting Company Name.
     * HostingCollectingCompanyName
     *
     * @maps HostingCollectingCompanyName
     */
    public function setHostingCollectingCompanyName(?string $hostingCollectingCompanyName): void
    {
        $this->hostingCollectingCompanyName['value'] = $hostingCollectingCompanyName;
    }

    /**
     * Unsets Hosting Collecting Company Name.
     * HostingCollectingCompanyName
     */
    public function unsetHostingCollectingCompanyName(): void
    {
        $this->hostingCollectingCompanyName = [];
    }

    /**
     * Returns Hosting Collecting Company Number.
     * HostingCollectingCompanyNumber
     */
    public function getHostingCollectingCompanyNumber(): ?string
    {
        if (count($this->hostingCollectingCompanyNumber) == 0) {
            return null;
        }
        return $this->hostingCollectingCompanyNumber['value'];
    }

    /**
     * Sets Hosting Collecting Company Number.
     * HostingCollectingCompanyNumber
     *
     * @maps HostingCollectingCompanyNumber
     */
    public function setHostingCollectingCompanyNumber(?string $hostingCollectingCompanyNumber): void
    {
        $this->hostingCollectingCompanyNumber['value'] = $hostingCollectingCompanyNumber;
    }

    /**
     * Unsets Hosting Collecting Company Number.
     * HostingCollectingCompanyNumber
     */
    public function unsetHostingCollectingCompanyNumber(): void
    {
        $this->hostingCollectingCompanyNumber = [];
    }

    /**
     * Returns Iccdata Tran Type Code.
     * Transaction type code
     */
    public function getIccdataTranTypeCode(): ?string
    {
        if (count($this->iccdataTranTypeCode) == 0) {
            return null;
        }
        return $this->iccdataTranTypeCode['value'];
    }

    /**
     * Sets Iccdata Tran Type Code.
     * Transaction type code
     *
     * @maps IccdataTranTypeCode
     */
    public function setIccdataTranTypeCode(?string $iccdataTranTypeCode): void
    {
        $this->iccdataTranTypeCode['value'] = $iccdataTranTypeCode;
    }

    /**
     * Unsets Iccdata Tran Type Code.
     * Transaction type code
     */
    public function unsetIccdataTranTypeCode(): void
    {
        $this->iccdataTranTypeCode = [];
    }

    /**
     * Returns Transaction Type.
     * Transaction type description.
     */
    public function getTransactionType(): ?string
    {
        if (count($this->transactionType) == 0) {
            return null;
        }
        return $this->transactionType['value'];
    }

    /**
     * Sets Transaction Type.
     * Transaction type description.
     *
     * @maps TransactionType
     */
    public function setTransactionType(?string $transactionType): void
    {
        $this->transactionType['value'] = $transactionType;
    }

    /**
     * Unsets Transaction Type.
     * Transaction type description.
     */
    public function unsetTransactionType(): void
    {
        $this->transactionType = [];
    }

    /**
     * Returns Latitude.
     * Latitude of the Coordinate 3.11573
     */
    public function getLatitude(): ?string
    {
        if (count($this->latitude) == 0) {
            return null;
        }
        return $this->latitude['value'];
    }

    /**
     * Sets Latitude.
     * Latitude of the Coordinate 3.11573
     *
     * @maps Latitude
     */
    public function setLatitude(?string $latitude): void
    {
        $this->latitude['value'] = $latitude;
    }

    /**
     * Unsets Latitude.
     * Latitude of the Coordinate 3.11573
     */
    public function unsetLatitude(): void
    {
        $this->latitude = [];
    }

    /**
     * Returns Longitude.
     * Longitude of the Coordinate
     */
    public function getLongitude(): ?string
    {
        if (count($this->longitude) == 0) {
            return null;
        }
        return $this->longitude['value'];
    }

    /**
     * Sets Longitude.
     * Longitude of the Coordinate
     *
     * @maps Longitude
     */
    public function setLongitude(?string $longitude): void
    {
        $this->longitude['value'] = $longitude;
    }

    /**
     * Unsets Longitude.
     * Longitude of the Coordinate
     */
    public function unsetLongitude(): void
    {
        $this->longitude = [];
    }

    /**
     * Returns Merchant Category.
     * Merchant category
     */
    public function getMerchantCategory(): ?string
    {
        if (count($this->merchantCategory) == 0) {
            return null;
        }
        return $this->merchantCategory['value'];
    }

    /**
     * Sets Merchant Category.
     * Merchant category
     *
     * @maps MerchantCategory
     */
    public function setMerchantCategory(?string $merchantCategory): void
    {
        $this->merchantCategory['value'] = $merchantCategory;
    }

    /**
     * Unsets Merchant Category.
     * Merchant category
     */
    public function unsetMerchantCategory(): void
    {
        $this->merchantCategory = [];
    }

    /**
     * Returns Merchant Category Description.
     * Merchant category description
     */
    public function getMerchantCategoryDescription(): ?string
    {
        if (count($this->merchantCategoryDescription) == 0) {
            return null;
        }
        return $this->merchantCategoryDescription['value'];
    }

    /**
     * Sets Merchant Category Description.
     * Merchant category description
     *
     * @maps MerchantCategoryDescription
     */
    public function setMerchantCategoryDescription(?string $merchantCategoryDescription): void
    {
        $this->merchantCategoryDescription['value'] = $merchantCategoryDescription;
    }

    /**
     * Unsets Merchant Category Description.
     * Merchant category description
     */
    public function unsetMerchantCategoryDescription(): void
    {
        $this->merchantCategoryDescription = [];
    }

    /**
     * Returns Purchased in Country.
     * Purchased in country
     */
    public function getPurchasedInCountry(): ?string
    {
        if (count($this->purchasedInCountry) == 0) {
            return null;
        }
        return $this->purchasedInCountry['value'];
    }

    /**
     * Sets Purchased in Country.
     * Purchased in country
     *
     * @maps PurchasedInCountry
     */
    public function setPurchasedInCountry(?string $purchasedInCountry): void
    {
        $this->purchasedInCountry['value'] = $purchasedInCountry;
    }

    /**
     * Unsets Purchased in Country.
     * Purchased in country
     */
    public function unsetPurchasedInCountry(): void
    {
        $this->purchasedInCountry = [];
    }

    /**
     * Returns Merchant Id.
     * Merchant Id
     */
    public function getMerchantId(): ?string
    {
        if (count($this->merchantId) == 0) {
            return null;
        }
        return $this->merchantId['value'];
    }

    /**
     * Sets Merchant Id.
     * Merchant Id
     *
     * @maps MerchantId
     */
    public function setMerchantId(?string $merchantId): void
    {
        $this->merchantId['value'] = $merchantId;
    }

    /**
     * Unsets Merchant Id.
     * Merchant Id
     */
    public function unsetMerchantId(): void
    {
        $this->merchantId = [];
    }

    /**
     * Returns Site Name.
     * Site name
     */
    public function getSiteName(): ?string
    {
        if (count($this->siteName) == 0) {
            return null;
        }
        return $this->siteName['value'];
    }

    /**
     * Sets Site Name.
     * Site name
     *
     * @maps SiteName
     */
    public function setSiteName(?string $siteName): void
    {
        $this->siteName['value'] = $siteName;
    }

    /**
     * Unsets Site Name.
     * Site name
     */
    public function unsetSiteName(): void
    {
        $this->siteName = [];
    }

    /**
     * Returns Network.
     * Network
     */
    public function getNetwork(): ?string
    {
        if (count($this->network) == 0) {
            return null;
        }
        return $this->network['value'];
    }

    /**
     * Sets Network.
     * Network
     *
     * @maps Network
     */
    public function setNetwork(?string $network): void
    {
        $this->network['value'] = $network;
    }

    /**
     * Unsets Network.
     * Network
     */
    public function unsetNetwork(): void
    {
        $this->network = [];
    }

    /**
     * Returns Delco Code.
     * Three character DelcoCode
     */
    public function getDelcoCode(): ?string
    {
        if (count($this->delcoCode) == 0) {
            return null;
        }
        return $this->delcoCode['value'];
    }

    /**
     * Sets Delco Code.
     * Three character DelcoCode
     *
     * @maps DelcoCode
     */
    public function setDelcoCode(?string $delcoCode): void
    {
        $this->delcoCode['value'] = $delcoCode;
    }

    /**
     * Unsets Delco Code.
     * Three character DelcoCode
     */
    public function unsetDelcoCode(): void
    {
        $this->delcoCode = [];
    }

    /**
     * Returns Odometer Input.
     * Odometer input
     */
    public function getOdometerInput(): ?string
    {
        if (count($this->odometerInput) == 0) {
            return null;
        }
        return $this->odometerInput['value'];
    }

    /**
     * Sets Odometer Input.
     * Odometer input
     *
     * @maps OdometerInput
     */
    public function setOdometerInput(?string $odometerInput): void
    {
        $this->odometerInput['value'] = $odometerInput;
    }

    /**
     * Unsets Odometer Input.
     * Odometer input
     */
    public function unsetOdometerInput(): void
    {
        $this->odometerInput = [];
    }

    /**
     * Returns Odometer Reading Km.
     * Odometer reading in Kms
     */
    public function getOdometerReadingKm(): ?string
    {
        if (count($this->odometerReadingKm) == 0) {
            return null;
        }
        return $this->odometerReadingKm['value'];
    }

    /**
     * Sets Odometer Reading Km.
     * Odometer reading in Kms
     *
     * @maps OdometerReadingKm
     */
    public function setOdometerReadingKm(?string $odometerReadingKm): void
    {
        $this->odometerReadingKm['value'] = $odometerReadingKm;
    }

    /**
     * Unsets Odometer Reading Km.
     * Odometer reading in Kms
     */
    public function unsetOdometerReadingKm(): void
    {
        $this->odometerReadingKm = [];
    }

    /**
     * Returns Odometer Reading Miles.
     * Odometer reading in miles
     */
    public function getOdometerReadingMiles(): ?string
    {
        if (count($this->odometerReadingMiles) == 0) {
            return null;
        }
        return $this->odometerReadingMiles['value'];
    }

    /**
     * Sets Odometer Reading Miles.
     * Odometer reading in miles
     *
     * @maps OdometerReadingMiles
     */
    public function setOdometerReadingMiles(?string $odometerReadingMiles): void
    {
        $this->odometerReadingMiles['value'] = $odometerReadingMiles;
    }

    /**
     * Unsets Odometer Reading Miles.
     * Odometer reading in miles
     */
    public function unsetOdometerReadingMiles(): void
    {
        $this->odometerReadingMiles = [];
    }

    /**
     * Returns Card PAN.
     * Masked Card PAN
     */
    public function getCardPAN(): ?string
    {
        if (count($this->cardPAN) == 0) {
            return null;
        }
        return $this->cardPAN['value'];
    }

    /**
     * Sets Card PAN.
     * Masked Card PAN
     *
     * @maps CardPAN
     */
    public function setCardPAN(?string $cardPAN): void
    {
        $this->cardPAN['value'] = $cardPAN;
    }

    /**
     * Unsets Card PAN.
     * Masked Card PAN
     */
    public function unsetCardPAN(): void
    {
        $this->cardPAN = [];
    }

    /**
     * Returns P in Indicator.
     * PIN indicator
     */
    public function getPINIndicator(): ?string
    {
        if (count($this->pINIndicator) == 0) {
            return null;
        }
        return $this->pINIndicator['value'];
    }

    /**
     * Sets P in Indicator.
     * PIN indicator
     *
     * @maps PINIndicator
     */
    public function setPINIndicator(?string $pINIndicator): void
    {
        $this->pINIndicator['value'] = $pINIndicator;
    }

    /**
     * Unsets P in Indicator.
     * PIN indicator
     */
    public function unsetPINIndicator(): void
    {
        $this->pINIndicator = [];
    }

    /**
     * Returns P OI Receipt Number.
     * POIReceiptNumber
     */
    public function getPOIReceiptNumber(): ?string
    {
        if (count($this->pOIReceiptNumber) == 0) {
            return null;
        }
        return $this->pOIReceiptNumber['value'];
    }

    /**
     * Sets P OI Receipt Number.
     * POIReceiptNumber
     *
     * @maps POIReceiptNumber
     */
    public function setPOIReceiptNumber(?string $pOIReceiptNumber): void
    {
        $this->pOIReceiptNumber['value'] = $pOIReceiptNumber;
    }

    /**
     * Unsets P OI Receipt Number.
     * POIReceiptNumber
     */
    public function unsetPOIReceiptNumber(): void
    {
        $this->pOIReceiptNumber = [];
    }

    /**
     * Returns Products Code Additional.
     * Additinal Products Code
     */
    public function getProductsCodeAdditional(): ?string
    {
        if (count($this->productsCodeAdditional) == 0) {
            return null;
        }
        return $this->productsCodeAdditional['value'];
    }

    /**
     * Sets Products Code Additional.
     * Additinal Products Code
     *
     * @maps ProductsCodeAdditional
     */
    public function setProductsCodeAdditional(?string $productsCodeAdditional): void
    {
        $this->productsCodeAdditional['value'] = $productsCodeAdditional;
    }

    /**
     * Unsets Products Code Additional.
     * Additinal Products Code
     */
    public function unsetProductsCodeAdditional(): void
    {
        $this->productsCodeAdditional = [];
    }

    /**
     * Returns Products Tax Code.
     * Products tax code
     */
    public function getProductsTaxCode(): ?string
    {
        if (count($this->productsTaxCode) == 0) {
            return null;
        }
        return $this->productsTaxCode['value'];
    }

    /**
     * Sets Products Tax Code.
     * Products tax code
     *
     * @maps ProductsTaxCode
     */
    public function setProductsTaxCode(?string $productsTaxCode): void
    {
        $this->productsTaxCode['value'] = $productsTaxCode;
    }

    /**
     * Unsets Products Tax Code.
     * Products tax code
     */
    public function unsetProductsTaxCode(): void
    {
        $this->productsTaxCode = [];
    }

    /**
     * Returns Fuel Volume.
     * Fuel volume
     */
    public function getFuelVolume(): ?float
    {
        if (count($this->fuelVolume) == 0) {
            return null;
        }
        return $this->fuelVolume['value'];
    }

    /**
     * Sets Fuel Volume.
     * Fuel volume
     *
     * @maps FuelVolume
     */
    public function setFuelVolume(?float $fuelVolume): void
    {
        $this->fuelVolume['value'] = $fuelVolume;
    }

    /**
     * Unsets Fuel Volume.
     * Fuel volume
     */
    public function unsetFuelVolume(): void
    {
        $this->fuelVolume = [];
    }

    /**
     * Returns Sfgw Card Date of Expiry.
     * SfgwCard expiry date
     */
    public function getSfgwCardDateOfExpiry(): ?string
    {
        if (count($this->sfgwCardDateOfExpiry) == 0) {
            return null;
        }
        return $this->sfgwCardDateOfExpiry['value'];
    }

    /**
     * Sets Sfgw Card Date of Expiry.
     * SfgwCard expiry date
     *
     * @maps SfgwCardDateOfExpiry
     */
    public function setSfgwCardDateOfExpiry(?string $sfgwCardDateOfExpiry): void
    {
        $this->sfgwCardDateOfExpiry['value'] = $sfgwCardDateOfExpiry;
    }

    /**
     * Unsets Sfgw Card Date of Expiry.
     * SfgwCard expiry date
     */
    public function unsetSfgwCardDateOfExpiry(): void
    {
        $this->sfgwCardDateOfExpiry = [];
    }

    /**
     * Returns Site Currency ISO Code.
     * Three character Site currency ISO code
     */
    public function getSiteCurrencyISOCode(): ?string
    {
        if (count($this->siteCurrencyISOCode) == 0) {
            return null;
        }
        return $this->siteCurrencyISOCode['value'];
    }

    /**
     * Sets Site Currency ISO Code.
     * Three character Site currency ISO code
     *
     * @maps SiteCurrencyISOCode
     */
    public function setSiteCurrencyISOCode(?string $siteCurrencyISOCode): void
    {
        $this->siteCurrencyISOCode['value'] = $siteCurrencyISOCode;
    }

    /**
     * Unsets Site Currency ISO Code.
     * Three character Site currency ISO code
     */
    public function unsetSiteCurrencyISOCode(): void
    {
        $this->siteCurrencyISOCode = [];
    }

    /**
     * Returns Card Id.
     * Card ID
     */
    public function getCardId(): ?string
    {
        if (count($this->cardId) == 0) {
            return null;
        }
        return $this->cardId['value'];
    }

    /**
     * Sets Card Id.
     * Card ID
     *
     * @maps CardId
     */
    public function setCardId(?string $cardId): void
    {
        $this->cardId['value'] = $cardId;
    }

    /**
     * Unsets Card Id.
     * Card ID
     */
    public function unsetCardId(): void
    {
        $this->cardId = [];
    }

    /**
     * Returns Transaction Date.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public function getTransactionDate(): ?\DateTime
    {
        if (count($this->transactionDate) == 0) {
            return null;
        }
        return $this->transactionDate['value'];
    }

    /**
     * Sets Transaction Date.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     *
     * @maps TransactionDate
     * @factory \ShellDataReportingAPIsLib\Utils\DateTimeHelper::fromSimpleDate
     */
    public function setTransactionDate(?\DateTime $transactionDate): void
    {
        $this->transactionDate['value'] = $transactionDate;
    }

    /**
     * Unsets Transaction Date.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public function unsetTransactionDate(): void
    {
        $this->transactionDate = [];
    }

    /**
     * Returns Transaction Date Time.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public function getTransactionDateTime(): ?string
    {
        if (count($this->transactionDateTime) == 0) {
            return null;
        }
        return $this->transactionDateTime['value'];
    }

    /**
     * Sets Transaction Date Time.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     *
     * @maps TransactionDateTime
     */
    public function setTransactionDateTime(?string $transactionDateTime): void
    {
        $this->transactionDateTime['value'] = $transactionDateTime;
    }

    /**
     * Unsets Transaction Date Time.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public function unsetTransactionDateTime(): void
    {
        $this->transactionDateTime = [];
    }

    /**
     * Returns Transaction Id.
     * TransactionId
     */
    public function getTransactionId(): ?string
    {
        if (count($this->transactionId) == 0) {
            return null;
        }
        return $this->transactionId['value'];
    }

    /**
     * Sets Transaction Id.
     * TransactionId
     *
     * @maps TransactionId
     */
    public function setTransactionId(?string $transactionId): void
    {
        $this->transactionId['value'] = $transactionId;
    }

    /**
     * Unsets Transaction Id.
     * TransactionId
     */
    public function unsetTransactionId(): void
    {
        $this->transactionId = [];
    }

    /**
     * Returns Transaction Status.
     * Type of the connector in the EVSE unit.
     */
    public function getTransactionStatus(): ?string
    {
        if (count($this->transactionStatus) == 0) {
            return null;
        }
        return $this->transactionStatus['value'];
    }

    /**
     * Sets Transaction Status.
     * Type of the connector in the EVSE unit.
     *
     * @maps TransactionStatus
     */
    public function setTransactionStatus(?string $transactionStatus): void
    {
        $this->transactionStatus['value'] = $transactionStatus;
    }

    /**
     * Unsets Transaction Status.
     * Type of the connector in the EVSE unit.
     */
    public function unsetTransactionStatus(): void
    {
        $this->transactionStatus = [];
    }

    /**
     * Returns Unit of Measure.
     * Unit of measure
     */
    public function getUnitOfMeasure(): ?string
    {
        if (count($this->unitOfMeasure) == 0) {
            return null;
        }
        return $this->unitOfMeasure['value'];
    }

    /**
     * Sets Unit of Measure.
     * Unit of measure
     *
     * @maps UnitOfMeasure
     */
    public function setUnitOfMeasure(?string $unitOfMeasure): void
    {
        $this->unitOfMeasure['value'] = $unitOfMeasure;
    }

    /**
     * Unsets Unit of Measure.
     * Unit of measure
     */
    public function unsetUnitOfMeasure(): void
    {
        $this->unitOfMeasure = [];
    }

    /**
     * Returns Vehicle Registration Number.
     * VehicleRegistrationNumber
     */
    public function getVehicleRegistrationNumber(): ?string
    {
        if (count($this->vehicleRegistrationNumber) == 0) {
            return null;
        }
        return $this->vehicleRegistrationNumber['value'];
    }

    /**
     * Sets Vehicle Registration Number.
     * VehicleRegistrationNumber
     *
     * @maps VehicleRegistrationNumber
     */
    public function setVehicleRegistrationNumber(?string $vehicleRegistrationNumber): void
    {
        $this->vehicleRegistrationNumber['value'] = $vehicleRegistrationNumber;
    }

    /**
     * Unsets Vehicle Registration Number.
     * VehicleRegistrationNumber
     */
    public function unsetVehicleRegistrationNumber(): void
    {
        $this->vehicleRegistrationNumber = [];
    }

    /**
     * Returns Network Delco Name.
     * Network Delco name
     */
    public function getNetworkDelcoName(): ?string
    {
        if (count($this->networkDelcoName) == 0) {
            return null;
        }
        return $this->networkDelcoName['value'];
    }

    /**
     * Sets Network Delco Name.
     * Network Delco name
     *
     * @maps NetworkDelcoName
     */
    public function setNetworkDelcoName(?string $networkDelcoName): void
    {
        $this->networkDelcoName['value'] = $networkDelcoName;
    }

    /**
     * Unsets Network Delco Name.
     * Network Delco name
     */
    public function unsetNetworkDelcoName(): void
    {
        $this->networkDelcoName = [];
    }

    /**
     * Returns Product Group Name.
     * ProductGroupName
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * ProductGroupName
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * ProductGroupName
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Fuel Product.
     * FuelProduct
     */
    public function getFuelProduct(): ?string
    {
        if (count($this->fuelProduct) == 0) {
            return null;
        }
        return $this->fuelProduct['value'];
    }

    /**
     * Sets Fuel Product.
     * FuelProduct
     *
     * @maps FuelProduct
     */
    public function setFuelProduct(?string $fuelProduct): void
    {
        $this->fuelProduct['value'] = $fuelProduct;
    }

    /**
     * Unsets Fuel Product.
     * FuelProduct
     */
    public function unsetFuelProduct(): void
    {
        $this->fuelProduct = [];
    }

    /**
     * Returns Account Customer Name.
     * AccountCustomerName
     */
    public function getAccountCustomerName(): ?string
    {
        if (count($this->accountCustomerName) == 0) {
            return null;
        }
        return $this->accountCustomerName['value'];
    }

    /**
     * Sets Account Customer Name.
     * AccountCustomerName
     *
     * @maps AccountCustomerName
     */
    public function setAccountCustomerName(?string $accountCustomerName): void
    {
        $this->accountCustomerName['value'] = $accountCustomerName;
    }

    /**
     * Unsets Account Customer Name.
     * AccountCustomerName
     */
    public function unsetAccountCustomerName(): void
    {
        $this->accountCustomerName = [];
    }

    /**
     * Returns Payer Name.
     * PayerName
     */
    public function getPayerName(): ?string
    {
        if (count($this->payerName) == 0) {
            return null;
        }
        return $this->payerName['value'];
    }

    /**
     * Sets Payer Name.
     * PayerName
     *
     * @maps PayerName
     */
    public function setPayerName(?string $payerName): void
    {
        $this->payerName['value'] = $payerName;
    }

    /**
     * Unsets Payer Name.
     * PayerName
     */
    public function unsetPayerName(): void
    {
        $this->payerName = [];
    }

    /**
     * Returns Transaction Time.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public function getTransactionTime(): ?string
    {
        if (count($this->transactionTime) == 0) {
            return null;
        }
        return $this->transactionTime['value'];
    }

    /**
     * Sets Transaction Time.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     *
     * @maps TransactionTime
     */
    public function setTransactionTime(?string $transactionTime): void
    {
        $this->transactionTime['value'] = $transactionTime;
    }

    /**
     * Unsets Transaction Time.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public function unsetTransactionTime(): void
    {
        $this->transactionTime = [];
    }

    /**
     * Returns Transaction Currency.
     * TransactionCurrencySymbol
     */
    public function getTransactionCurrency(): ?string
    {
        if (count($this->transactionCurrency) == 0) {
            return null;
        }
        return $this->transactionCurrency['value'];
    }

    /**
     * Sets Transaction Currency.
     * TransactionCurrencySymbol
     *
     * @maps TransactionCurrency
     */
    public function setTransactionCurrency(?string $transactionCurrency): void
    {
        $this->transactionCurrency['value'] = $transactionCurrency;
    }

    /**
     * Unsets Transaction Currency.
     * TransactionCurrencySymbol
     */
    public function unsetTransactionCurrency(): void
    {
        $this->transactionCurrency = [];
    }

    /**
     * Returns Unit Price.
     * UnitPrice
     */
    public function getUnitPrice(): ?float
    {
        if (count($this->unitPrice) == 0) {
            return null;
        }
        return $this->unitPrice['value'];
    }

    /**
     * Sets Unit Price.
     * UnitPrice
     *
     * @maps UnitPrice
     */
    public function setUnitPrice(?float $unitPrice): void
    {
        $this->unitPrice['value'] = $unitPrice;
    }

    /**
     * Unsets Unit Price.
     * UnitPrice
     */
    public function unsetUnitPrice(): void
    {
        $this->unitPrice = [];
    }

    /**
     * Returns Authorised Flag.
     * AuthorisedFlag
     */
    public function getAuthorisedFlag(): ?string
    {
        if (count($this->authorisedFlag) == 0) {
            return null;
        }
        return $this->authorisedFlag['value'];
    }

    /**
     * Sets Authorised Flag.
     * AuthorisedFlag
     *
     * @maps AuthorisedFlag
     */
    public function setAuthorisedFlag(?string $authorisedFlag): void
    {
        $this->authorisedFlag['value'] = $authorisedFlag;
    }

    /**
     * Unsets Authorised Flag.
     * AuthorisedFlag
     */
    public function unsetAuthorisedFlag(): void
    {
        $this->authorisedFlag = [];
    }

    /**
     * Returns Transaction Time GMT.
     * TransactionTimeGMT update of the EVSE
     */
    public function getTransactionTimeGMT(): ?string
    {
        if (count($this->transactionTimeGMT) == 0) {
            return null;
        }
        return $this->transactionTimeGMT['value'];
    }

    /**
     * Sets Transaction Time GMT.
     * TransactionTimeGMT update of the EVSE
     *
     * @maps TransactionTimeGMT
     */
    public function setTransactionTimeGMT(?string $transactionTimeGMT): void
    {
        $this->transactionTimeGMT['value'] = $transactionTimeGMT;
    }

    /**
     * Unsets Transaction Time GMT.
     * TransactionTimeGMT update of the EVSE
     */
    public function unsetTransactionTimeGMT(): void
    {
        $this->transactionTimeGMT = [];
    }

    /**
     * Returns Reason Code.
     * ReasonCode
     */
    public function getReasonCode(): ?string
    {
        if (count($this->reasonCode) == 0) {
            return null;
        }
        return $this->reasonCode['value'];
    }

    /**
     * Sets Reason Code.
     * ReasonCode
     *
     * @maps ReasonCode
     */
    public function setReasonCode(?string $reasonCode): void
    {
        $this->reasonCode['value'] = $reasonCode;
    }

    /**
     * Unsets Reason Code.
     * ReasonCode
     */
    public function unsetReasonCode(): void
    {
        $this->reasonCode = [];
    }

    /**
     * Returns Issuer Action Code.
     * IssuerActionCode
     */
    public function getIssuerActionCode(): ?string
    {
        if (count($this->issuerActionCode) == 0) {
            return null;
        }
        return $this->issuerActionCode['value'];
    }

    /**
     * Sets Issuer Action Code.
     * IssuerActionCode
     *
     * @maps IssuerActionCode
     */
    public function setIssuerActionCode(?string $issuerActionCode): void
    {
        $this->issuerActionCode['value'] = $issuerActionCode;
    }

    /**
     * Unsets Issuer Action Code.
     * IssuerActionCode
     */
    public function unsetIssuerActionCode(): void
    {
        $this->issuerActionCode = [];
    }

    /**
     * Returns Issuer Action Code Description.
     * IssuerActionCodeDescription.
     */
    public function getIssuerActionCodeDescription(): ?string
    {
        if (count($this->issuerActionCodeDescription) == 0) {
            return null;
        }
        return $this->issuerActionCodeDescription['value'];
    }

    /**
     * Sets Issuer Action Code Description.
     * IssuerActionCodeDescription.
     *
     * @maps IssuerActionCodeDescription
     */
    public function setIssuerActionCodeDescription(?string $issuerActionCodeDescription): void
    {
        $this->issuerActionCodeDescription['value'] = $issuerActionCodeDescription;
    }

    /**
     * Unsets Issuer Action Code Description.
     * IssuerActionCodeDescription.
     */
    public function unsetIssuerActionCodeDescription(): void
    {
        $this->issuerActionCodeDescription = [];
    }

    /**
     * Returns Declined Reason.
     * DeclinedReason.
     */
    public function getDeclinedReason(): ?string
    {
        if (count($this->declinedReason) == 0) {
            return null;
        }
        return $this->declinedReason['value'];
    }

    /**
     * Sets Declined Reason.
     * DeclinedReason.
     *
     * @maps DeclinedReason
     */
    public function setDeclinedReason(?string $declinedReason): void
    {
        $this->declinedReason['value'] = $declinedReason;
    }

    /**
     * Unsets Declined Reason.
     * DeclinedReason.
     */
    public function unsetDeclinedReason(): void
    {
        $this->declinedReason = [];
    }

    /**
     * Returns Card Status Reason Description.
     * CardStatusReasonDescription.
     */
    public function getCardStatusReasonDescription(): ?string
    {
        if (count($this->cardStatusReasonDescription) == 0) {
            return null;
        }
        return $this->cardStatusReasonDescription['value'];
    }

    /**
     * Sets Card Status Reason Description.
     * CardStatusReasonDescription.
     *
     * @maps CardStatusReasonDescription
     */
    public function setCardStatusReasonDescription(?string $cardStatusReasonDescription): void
    {
        $this->cardStatusReasonDescription['value'] = $cardStatusReasonDescription;
    }

    /**
     * Unsets Card Status Reason Description.
     * CardStatusReasonDescription.
     */
    public function unsetCardStatusReasonDescription(): void
    {
        $this->cardStatusReasonDescription = [];
    }

    /**
     * Returns Transaction Country.
     * TransactionCountry
     */
    public function getTransactionCountry(): ?string
    {
        if (count($this->transactionCountry) == 0) {
            return null;
        }
        return $this->transactionCountry['value'];
    }

    /**
     * Sets Transaction Country.
     * TransactionCountry
     *
     * @maps TransactionCountry
     */
    public function setTransactionCountry(?string $transactionCountry): void
    {
        $this->transactionCountry['value'] = $transactionCountry;
    }

    /**
     * Unsets Transaction Country.
     * TransactionCountry
     */
    public function unsetTransactionCountry(): void
    {
        $this->transactionCountry = [];
    }

    /**
     * Returns Issuing Collecting Company Name.
     * IssuingCollectingCompanyName.
     */
    public function getIssuingCollectingCompanyName(): ?string
    {
        if (count($this->issuingCollectingCompanyName) == 0) {
            return null;
        }
        return $this->issuingCollectingCompanyName['value'];
    }

    /**
     * Sets Issuing Collecting Company Name.
     * IssuingCollectingCompanyName.
     *
     * @maps IssuingCollectingCompanyName
     */
    public function setIssuingCollectingCompanyName(?string $issuingCollectingCompanyName): void
    {
        $this->issuingCollectingCompanyName['value'] = $issuingCollectingCompanyName;
    }

    /**
     * Unsets Issuing Collecting Company Name.
     * IssuingCollectingCompanyName.
     */
    public function unsetIssuingCollectingCompanyName(): void
    {
        $this->issuingCollectingCompanyName = [];
    }

    /**
     * Returns Card Issuer Name.
     * CardIssuerName.
     */
    public function getCardIssuerName(): ?string
    {
        if (count($this->cardIssuerName) == 0) {
            return null;
        }
        return $this->cardIssuerName['value'];
    }

    /**
     * Sets Card Issuer Name.
     * CardIssuerName.
     *
     * @maps CardIssuerName
     */
    public function setCardIssuerName(?string $cardIssuerName): void
    {
        $this->cardIssuerName['value'] = $cardIssuerName;
    }

    /**
     * Unsets Card Issuer Name.
     * CardIssuerName.
     */
    public function unsetCardIssuerName(): void
    {
        $this->cardIssuerName = [];
    }

    /**
     * Returns Driver Name.
     * DriverName.
     */
    public function getDriverName(): ?string
    {
        if (count($this->driverName) == 0) {
            return null;
        }
        return $this->driverName['value'];
    }

    /**
     * Sets Driver Name.
     * DriverName.
     *
     * @maps DriverName
     */
    public function setDriverName(?string $driverName): void
    {
        $this->driverName['value'] = $driverName;
    }

    /**
     * Unsets Driver Name.
     * DriverName.
     */
    public function unsetDriverName(): void
    {
        $this->driverName = [];
    }

    /**
     * Returns Bearer Description.
     * BearerDescription.
     */
    public function getBearerDescription(): ?string
    {
        if (count($this->bearerDescription) == 0) {
            return null;
        }
        return $this->bearerDescription['value'];
    }

    /**
     * Sets Bearer Description.
     * BearerDescription.
     *
     * @maps BearerDescription
     */
    public function setBearerDescription(?string $bearerDescription): void
    {
        $this->bearerDescription['value'] = $bearerDescription;
    }

    /**
     * Unsets Bearer Description.
     * BearerDescription.
     */
    public function unsetBearerDescription(): void
    {
        $this->bearerDescription = [];
    }

    /**
     * Returns Card Category Description.
     * CardCategoryDescription.
     */
    public function getCardCategoryDescription(): ?string
    {
        if (count($this->cardCategoryDescription) == 0) {
            return null;
        }
        return $this->cardCategoryDescription['value'];
    }

    /**
     * Sets Card Category Description.
     * CardCategoryDescription.
     *
     * @maps CardCategoryDescription
     */
    public function setCardCategoryDescription(?string $cardCategoryDescription): void
    {
        $this->cardCategoryDescription['value'] = $cardCategoryDescription;
    }

    /**
     * Unsets Card Category Description.
     * CardCategoryDescription.
     */
    public function unsetCardCategoryDescription(): void
    {
        $this->cardCategoryDescription = [];
    }

    /**
     * Returns Card Type Description.
     * CardTypeDescription.
     */
    public function getCardTypeDescription(): ?string
    {
        if (count($this->cardTypeDescription) == 0) {
            return null;
        }
        return $this->cardTypeDescription['value'];
    }

    /**
     * Sets Card Type Description.
     * CardTypeDescription.
     *
     * @maps CardTypeDescription
     */
    public function setCardTypeDescription(?string $cardTypeDescription): void
    {
        $this->cardTypeDescription['value'] = $cardTypeDescription;
    }

    /**
     * Unsets Card Type Description.
     * CardTypeDescription.
     */
    public function unsetCardTypeDescription(): void
    {
        $this->cardTypeDescription = [];
    }

    /**
     * Returns Card Token Type Description.
     * CardTokenTypeDescription.
     */
    public function getCardTokenTypeDescription(): ?string
    {
        if (count($this->cardTokenTypeDescription) == 0) {
            return null;
        }
        return $this->cardTokenTypeDescription['value'];
    }

    /**
     * Sets Card Token Type Description.
     * CardTokenTypeDescription.
     *
     * @maps CardTokenTypeDescription
     */
    public function setCardTokenTypeDescription(?string $cardTokenTypeDescription): void
    {
        $this->cardTokenTypeDescription['value'] = $cardTokenTypeDescription;
    }

    /**
     * Unsets Card Token Type Description.
     * CardTokenTypeDescription.
     */
    public function unsetCardTokenTypeDescription(): void
    {
        $this->cardTokenTypeDescription = [];
    }

    /**
     * Returns Emboss Type.
     * EmbossType.
     */
    public function getEmbossType(): ?string
    {
        if (count($this->embossType) == 0) {
            return null;
        }
        return $this->embossType['value'];
    }

    /**
     * Sets Emboss Type.
     * EmbossType.
     *
     * @maps EmbossType
     */
    public function setEmbossType(?string $embossType): void
    {
        $this->embossType['value'] = $embossType;
    }

    /**
     * Unsets Emboss Type.
     * EmbossType.
     */
    public function unsetEmbossType(): void
    {
        $this->embossType = [];
    }

    /**
     * Returns E V Printed Number.
     * The EVPrintedNumber which can be found on the Shell EV Card
     */
    public function getEVPrintedNumber(): ?string
    {
        if (count($this->eVPrintedNumber) == 0) {
            return null;
        }
        return $this->eVPrintedNumber['value'];
    }

    /**
     * Sets E V Printed Number.
     * The EVPrintedNumber which can be found on the Shell EV Card
     *
     * @maps EVPrintedNumber
     */
    public function setEVPrintedNumber(?string $eVPrintedNumber): void
    {
        $this->eVPrintedNumber['value'] = $eVPrintedNumber;
    }

    /**
     * Unsets E V Printed Number.
     * The EVPrintedNumber which can be found on the Shell EV Card
     */
    public function unsetEVPrintedNumber(): void
    {
        $this->eVPrintedNumber = [];
    }

    /**
     * Returns Is RFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     */
    public function getIsRFID(): ?bool
    {
        if (count($this->isRFID) == 0) {
            return null;
        }
        return $this->isRFID['value'];
    }

    /**
     * Sets Is RFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     *
     * @maps IsRFID
     */
    public function setIsRFID(?bool $isRFID): void
    {
        $this->isRFID['value'] = $isRFID;
    }

    /**
     * Unsets Is RFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     */
    public function unsetIsRFID(): void
    {
        $this->isRFID = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                      = $this->colCoCode['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                    = $this->payerNumber['value'];
        }
        if (!empty($this->accountNumber)) {
            $json['AccountNumber']                  = $this->accountNumber['value'];
        }
        if (!empty($this->cardIssueNumber)) {
            $json['CardIssueNumber']                = $this->cardIssueNumber['value'];
        }
        if (!empty($this->collectingCompanyCurrencyCode)) {
            $json['CollectingCompanyCurrencyCode']  = $this->collectingCompanyCurrencyCode['value'];
        }
        if (!empty($this->custDataCustomerEntered)) {
            $json['CustDataCustomerEntered']        = $this->custDataCustomerEntered['value'];
        }
        if (!empty($this->custDataDriverId)) {
            $json['CustDataDriverId']               = $this->custDataDriverId['value'];
        }
        if (!empty($this->custDataFleetDescription)) {
            $json['CustDataFleetDescription']       = $this->custDataFleetDescription['value'];
        }
        if (!empty($this->fleetIdInput)) {
            $json['FleetIdInput']                   = $this->fleetIdInput['value'];
        }
        if (!empty($this->amount)) {
            $json['Amount']                         = $this->amount['value'];
        }
        if (!empty($this->euroshellSiteNumber)) {
            $json['EuroshellSiteNumber']            = $this->euroshellSiteNumber['value'];
        }
        if (!empty($this->incomingProductCode)) {
            $json['IncomingProductCode']            = $this->incomingProductCode['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']                    = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']                    = $this->productName['value'];
        }
        if (!empty($this->siteCode)) {
            $json['SiteCode']                       = $this->siteCode['value'];
        }
        if (!empty($this->hostingCollectingCompanyName)) {
            $json['HostingCollectingCompanyName']   = $this->hostingCollectingCompanyName['value'];
        }
        if (!empty($this->hostingCollectingCompanyNumber)) {
            $json['HostingCollectingCompanyNumber'] = $this->hostingCollectingCompanyNumber['value'];
        }
        if (!empty($this->iccdataTranTypeCode)) {
            $json['IccdataTranTypeCode']            = $this->iccdataTranTypeCode['value'];
        }
        if (!empty($this->transactionType)) {
            $json['TransactionType']                = $this->transactionType['value'];
        }
        if (!empty($this->latitude)) {
            $json['Latitude']                       = $this->latitude['value'];
        }
        if (!empty($this->longitude)) {
            $json['Longitude']                      = $this->longitude['value'];
        }
        if (!empty($this->merchantCategory)) {
            $json['MerchantCategory']               = $this->merchantCategory['value'];
        }
        if (!empty($this->merchantCategoryDescription)) {
            $json['MerchantCategoryDescription']    = $this->merchantCategoryDescription['value'];
        }
        if (!empty($this->purchasedInCountry)) {
            $json['PurchasedInCountry']             = $this->purchasedInCountry['value'];
        }
        if (!empty($this->merchantId)) {
            $json['MerchantId']                     = $this->merchantId['value'];
        }
        if (!empty($this->siteName)) {
            $json['SiteName']                       = $this->siteName['value'];
        }
        if (!empty($this->network)) {
            $json['Network']                        = $this->network['value'];
        }
        if (!empty($this->delcoCode)) {
            $json['DelcoCode']                      = $this->delcoCode['value'];
        }
        if (!empty($this->odometerInput)) {
            $json['OdometerInput']                  = $this->odometerInput['value'];
        }
        if (!empty($this->odometerReadingKm)) {
            $json['OdometerReadingKm']              = $this->odometerReadingKm['value'];
        }
        if (!empty($this->odometerReadingMiles)) {
            $json['OdometerReadingMiles']           = $this->odometerReadingMiles['value'];
        }
        if (!empty($this->cardPAN)) {
            $json['CardPAN']                        = $this->cardPAN['value'];
        }
        if (!empty($this->pINIndicator)) {
            $json['PINIndicator']                   = $this->pINIndicator['value'];
        }
        if (!empty($this->pOIReceiptNumber)) {
            $json['POIReceiptNumber']               = $this->pOIReceiptNumber['value'];
        }
        if (!empty($this->productsCodeAdditional)) {
            $json['ProductsCodeAdditional']         = $this->productsCodeAdditional['value'];
        }
        if (!empty($this->productsTaxCode)) {
            $json['ProductsTaxCode']                = $this->productsTaxCode['value'];
        }
        if (!empty($this->fuelVolume)) {
            $json['FuelVolume']                     = $this->fuelVolume['value'];
        }
        if (!empty($this->sfgwCardDateOfExpiry)) {
            $json['SfgwCardDateOfExpiry']           = $this->sfgwCardDateOfExpiry['value'];
        }
        if (!empty($this->siteCurrencyISOCode)) {
            $json['SiteCurrencyISOCode']            = $this->siteCurrencyISOCode['value'];
        }
        if (!empty($this->cardId)) {
            $json['CardId']                         = $this->cardId['value'];
        }
        if (!empty($this->transactionDate)) {
            $json['TransactionDate']                = DateTimeHelper::toSimpleDate($this->transactionDate['value']);
        }
        if (!empty($this->transactionDateTime)) {
            $json['TransactionDateTime']            = $this->transactionDateTime['value'];
        }
        if (!empty($this->transactionId)) {
            $json['TransactionId']                  = $this->transactionId['value'];
        }
        if (!empty($this->transactionStatus)) {
            $json['TransactionStatus']              = $this->transactionStatus['value'];
        }
        if (!empty($this->unitOfMeasure)) {
            $json['UnitOfMeasure']                  = $this->unitOfMeasure['value'];
        }
        if (!empty($this->vehicleRegistrationNumber)) {
            $json['VehicleRegistrationNumber']      = $this->vehicleRegistrationNumber['value'];
        }
        if (!empty($this->networkDelcoName)) {
            $json['NetworkDelcoName']               = $this->networkDelcoName['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']               = $this->productGroupName['value'];
        }
        if (!empty($this->fuelProduct)) {
            $json['FuelProduct']                    = $this->fuelProduct['value'];
        }
        if (!empty($this->accountCustomerName)) {
            $json['AccountCustomerName']            = $this->accountCustomerName['value'];
        }
        if (!empty($this->payerName)) {
            $json['PayerName']                      = $this->payerName['value'];
        }
        if (!empty($this->transactionTime)) {
            $json['TransactionTime']                = $this->transactionTime['value'];
        }
        if (!empty($this->transactionCurrency)) {
            $json['TransactionCurrency']            = $this->transactionCurrency['value'];
        }
        if (!empty($this->unitPrice)) {
            $json['UnitPrice']                      = $this->unitPrice['value'];
        }
        if (!empty($this->authorisedFlag)) {
            $json['AuthorisedFlag']                 = $this->authorisedFlag['value'];
        }
        if (!empty($this->transactionTimeGMT)) {
            $json['TransactionTimeGMT']             = $this->transactionTimeGMT['value'];
        }
        if (!empty($this->reasonCode)) {
            $json['ReasonCode']                     = $this->reasonCode['value'];
        }
        if (!empty($this->issuerActionCode)) {
            $json['IssuerActionCode']               = $this->issuerActionCode['value'];
        }
        if (!empty($this->issuerActionCodeDescription)) {
            $json['IssuerActionCodeDescription']    = $this->issuerActionCodeDescription['value'];
        }
        if (!empty($this->declinedReason)) {
            $json['DeclinedReason']                 = $this->declinedReason['value'];
        }
        if (!empty($this->cardStatusReasonDescription)) {
            $json['CardStatusReasonDescription']    = $this->cardStatusReasonDescription['value'];
        }
        if (!empty($this->transactionCountry)) {
            $json['TransactionCountry']             = $this->transactionCountry['value'];
        }
        if (!empty($this->issuingCollectingCompanyName)) {
            $json['IssuingCollectingCompanyName']   = $this->issuingCollectingCompanyName['value'];
        }
        if (!empty($this->cardIssuerName)) {
            $json['CardIssuerName']                 = $this->cardIssuerName['value'];
        }
        if (!empty($this->driverName)) {
            $json['DriverName']                     = $this->driverName['value'];
        }
        if (!empty($this->bearerDescription)) {
            $json['BearerDescription']              = $this->bearerDescription['value'];
        }
        if (!empty($this->cardCategoryDescription)) {
            $json['CardCategoryDescription']        = $this->cardCategoryDescription['value'];
        }
        if (!empty($this->cardTypeDescription)) {
            $json['CardTypeDescription']            = $this->cardTypeDescription['value'];
        }
        if (!empty($this->cardTokenTypeDescription)) {
            $json['CardTokenTypeDescription']       = $this->cardTokenTypeDescription['value'];
        }
        if (!empty($this->embossType)) {
            $json['EmbossType']                     = $this->embossType['value'];
        }
        if (!empty($this->eVPrintedNumber)) {
            $json['EVPrintedNumber']                = $this->eVPrintedNumber['value'];
        }
        if (!empty($this->isRFID)) {
            $json['IsRFID']                         = $this->isRFID['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

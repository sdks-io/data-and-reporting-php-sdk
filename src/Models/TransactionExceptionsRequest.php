<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class TransactionExceptionsRequest implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoId;

    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var int|null
     */
    private $payerId;

    /**
     * @var string|null
     */
    private $payerNumber;

    /**
     * @var Accounts[]|null
     */
    private $accounts;

    /**
     * @var string
     */
    private $transactionsFromDate;

    /**
     * @var string
     */
    private $transactionsToDate;

    /**
     * @var float|null
     */
    private $value;

    /**
     * @var int
     */
    private $condition;

    /**
     * @var ExceptionProduct[]|null
     */
    private $products;

    /**
     * @var int|null
     */
    private $exceptionPeriod;

    /**
     * @var int
     */
    private $outputType;

    /**
     * @var bool|null
     */
    private $fuelOnly;

    /**
     * @var int[]|null
     */
    private $siteGroupIds;

    /**
     * @var bool|null
     */
    private $useFieldId;

    /**
     * @param string $transactionsFromDate
     * @param string $transactionsToDate
     * @param int $condition
     * @param int $outputType
     */
    public function __construct(
        string $transactionsFromDate,
        string $transactionsToDate,
        int $condition,
        int $outputType
    ) {
        $this->transactionsFromDate = $transactionsFromDate;
        $this->transactionsToDate = $transactionsToDate;
        $this->condition = $condition;
        $this->outputType = $outputType;
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function getColCoId(): ?int
    {
        return $this->colCoId;
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId = $colCoId;
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        return $this->payerId;
    }

    /**
     * Sets Payer Id.
     * Payer Id of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId = $payerId;
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        return $this->payerNumber;
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber = $payerNumber;
    }

    /**
     * Returns Accounts.
     *
     * @return Accounts[]|null
     */
    public function getAccounts(): ?array
    {
        return $this->accounts;
    }

    /**
     * Sets Accounts.
     *
     * @maps Accounts
     *
     * @param Accounts[]|null $accounts
     */
    public function setAccounts(?array $accounts): void
    {
        $this->accounts = $accounts;
    }

    /**
     * Returns Transactions From Date.
     * Exceptions to be searched in transactions from date.
     * Should be with in last 24 months from the ToDate parameter.
     * Mandatory
     * Format: yyyyMMdd
     */
    public function getTransactionsFromDate(): string
    {
        return $this->transactionsFromDate;
    }

    /**
     * Sets Transactions From Date.
     * Exceptions to be searched in transactions from date.
     * Should be with in last 24 months from the ToDate parameter.
     * Mandatory
     * Format: yyyyMMdd
     *
     * @required
     * @maps TransactionsFromDate
     */
    public function setTransactionsFromDate(string $transactionsFromDate): void
    {
        $this->transactionsFromDate = $transactionsFromDate;
    }

    /**
     * Returns Transactions to Date.
     * Exceptions to be searched in transactions until date.
     *
     * Mandatory.
     *
     * Format: yyyyMMdd
     */
    public function getTransactionsToDate(): string
    {
        return $this->transactionsToDate;
    }

    /**
     * Sets Transactions to Date.
     * Exceptions to be searched in transactions until date.
     *
     * Mandatory.
     *
     * Format: yyyyMMdd
     *
     * @required
     * @maps TransactionsToDate
     */
    public function setTransactionsToDate(string $transactionsToDate): void
    {
        $this->transactionsToDate = $transactionsToDate;
    }

    /**
     * Returns Value.
     * Value to be used on the Filter Condition
     */
    public function getValue(): ?float
    {
        return $this->value;
    }

    /**
     * Sets Value.
     * Value to be used on the Filter Condition
     *
     * @maps Value
     */
    public function setValue(?float $value): void
    {
        $this->value = $value;
    }

    /**
     * Returns Condition.
     * Filter condition for the Exceptions.
     *
     * Mandatory
     *
     * 1. VolumeGreaterThan
     *
     * 2. VolumeLessThan
     *
     * 3. UsageGreaterThan
     *
     * 4. UsageLessThan
     *
     * 5. ValueGreaterThan (in Customer Currency)
     *
     * 6. ValueLessThan  (in Customer Currency)
     *
     * Note: -
     *
     * When “OutputType” = 1 is passed as input, above 3 and 4 Condition are not applicable.
     */
    public function getCondition(): int
    {
        return $this->condition;
    }

    /**
     * Sets Condition.
     * Filter condition for the Exceptions.
     *
     * Mandatory
     *
     * 1. VolumeGreaterThan
     *
     * 2. VolumeLessThan
     *
     * 3. UsageGreaterThan
     *
     * 4. UsageLessThan
     *
     * 5. ValueGreaterThan (in Customer Currency)
     *
     * 6. ValueLessThan  (in Customer Currency)
     *
     * Note: -
     *
     * When “OutputType” = 1 is passed as input, above 3 and 4 Condition are not applicable.
     *
     * @required
     * @maps Condition
     */
    public function setCondition(int $condition): void
    {
        $this->condition = $condition;
    }

    /**
     * Returns Products.
     *
     * @return ExceptionProduct[]|null
     */
    public function getProducts(): ?array
    {
        return $this->products;
    }

    /**
     * Sets Products.
     *
     * @maps Products
     *
     * @param ExceptionProduct[]|null $products
     */
    public function setProducts(?array $products): void
    {
        $this->products = $products;
    }

    /**
     * Returns Exception Period.
     * Period in which the Exceptions such as Monthly/Weekly or Daily volume, value or usage to be
     * identified in the given transactions date range. It is only applied when the Output Type is
     * specified as "Cards".
     * Mandatory when Output Type is Cards
     * 1.    Month
     * 2.    Week
     * 3.    Day
     * 4.    Date Range
     */
    public function getExceptionPeriod(): ?int
    {
        return $this->exceptionPeriod;
    }

    /**
     * Sets Exception Period.
     * Period in which the Exceptions such as Monthly/Weekly or Daily volume, value or usage to be
     * identified in the given transactions date range. It is only applied when the Output Type is
     * specified as "Cards".
     * Mandatory when Output Type is Cards
     * 1.    Month
     * 2.    Week
     * 3.    Day
     * 4.    Date Range
     *
     * @maps ExceptionPeriod
     */
    public function setExceptionPeriod(?int $exceptionPeriod): void
    {
        $this->exceptionPeriod = $exceptionPeriod;
    }

    /**
     * Returns Output Type.
     * Output Type for Exceptions.
     * Mandatory.
     * Possible values:
     * 1.    Transactions
     * 2.    Cards
     */
    public function getOutputType(): int
    {
        return $this->outputType;
    }

    /**
     * Sets Output Type.
     * Output Type for Exceptions.
     * Mandatory.
     * Possible values:
     * 1.    Transactions
     * 2.    Cards
     *
     * @required
     * @maps OutputType
     */
    public function setOutputType(int $outputType): void
    {
        $this->outputType = $outputType;
    }

    /**
     * Returns Fuel Only.
     * True/False
     *
     * Optional
     *
     * Default value: False.
     *
     * When passed as ‘True’ Only returned records with Fuel transactions.
     *
     * When passed as ‘False’ the above condition will not be checked.
     */
    public function getFuelOnly(): ?bool
    {
        return $this->fuelOnly;
    }

    /**
     * Sets Fuel Only.
     * True/False
     *
     * Optional
     *
     * Default value: False.
     *
     * When passed as ‘True’ Only returned records with Fuel transactions.
     *
     * When passed as ‘False’ the above condition will not be checked.
     *
     * @maps FuelOnly
     */
    public function setFuelOnly(?bool $fuelOnly): void
    {
        $this->fuelOnly = $fuelOnly;
    }

    /**
     * Returns Site Group Ids.
     * SiteGroupIds to be applied to the Filter Condition.
     * Optional
     * When not passed, ignored.
     * When passed, transactions that are matching with the provided list of site group id’s are only
     * returned.
     *
     * @return int[]|null
     */
    public function getSiteGroupIds(): ?array
    {
        return $this->siteGroupIds;
    }

    /**
     * Sets Site Group Ids.
     * SiteGroupIds to be applied to the Filter Condition.
     * Optional
     * When not passed, ignored.
     * When passed, transactions that are matching with the provided list of site group id’s are only
     * returned.
     *
     * @maps SiteGroupIds
     *
     * @param int[]|null $siteGroupIds
     */
    public function setSiteGroupIds(?array $siteGroupIds): void
    {
        $this->siteGroupIds = $siteGroupIds;
    }

    /**
     * Returns Use Field Id.
     * True/False
     * Optional
     * Default value – False.
     * When set to True, the property names in the output will be replaced by Field IDs.
     */
    public function getUseFieldId(): ?bool
    {
        return $this->useFieldId;
    }

    /**
     * Sets Use Field Id.
     * True/False
     * Optional
     * Default value – False.
     * When set to True, the property names in the output will be replaced by Field IDs.
     *
     * @maps UseFieldId
     */
    public function setUseFieldId(?bool $useFieldId): void
    {
        $this->useFieldId = $useFieldId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->colCoId)) {
            $json['ColCoId']          = $this->colCoId;
        }
        if (isset($this->colCoCode)) {
            $json['ColCoCode']        = $this->colCoCode;
        }
        if (isset($this->payerId)) {
            $json['PayerId']          = $this->payerId;
        }
        if (isset($this->payerNumber)) {
            $json['PayerNumber']      = $this->payerNumber;
        }
        if (isset($this->accounts)) {
            $json['Accounts']         = $this->accounts;
        }
        $json['TransactionsFromDate'] = $this->transactionsFromDate;
        $json['TransactionsToDate']   = $this->transactionsToDate;
        if (isset($this->value)) {
            $json['Value']            = $this->value;
        }
        $json['Condition']            = $this->condition;
        if (isset($this->products)) {
            $json['Products']         = $this->products;
        }
        if (isset($this->exceptionPeriod)) {
            $json['ExceptionPeriod']  = $this->exceptionPeriod;
        }
        $json['OutputType']           = $this->outputType;
        if (isset($this->fuelOnly)) {
            $json['FuelOnly']         = $this->fuelOnly;
        }
        if (isset($this->siteGroupIds)) {
            $json['SiteGroupIds']     = $this->siteGroupIds;
        }
        if (isset($this->useFieldId)) {
            $json['UseFieldId']       = $this->useFieldId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class PricedTransSummaryResponseTransactionsSummaryItems implements \JsonSerializable
{
    /**
     * @var array
     */
    private $productId = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $productName = [];

    /**
     * @var array
     */
    private $productGroupId = [];

    /**
     * @var array
     */
    private $productGroupName = [];

    /**
     * @var array
     */
    private $siteGroupId = [];

    /**
     * @var array
     */
    private $siteGroupName = [];

    /**
     * @var array
     */
    private $totalFuelQuantity = [];

    /**
     * @var array
     */
    private $totalNetAmount = [];

    /**
     * @var array
     */
    private $totalGrossAmount = [];

    /**
     * @var array
     */
    private $invoiceCurrencyCode = [];

    /**
     * @var array
     */
    private $invoiceCurrencySymbol = [];

    /**
     * @var array
     */
    private $customerRetailValueTotalNet = [];

    /**
     * @var array
     */
    private $customerRetailValueTotalGross = [];

    /**
     * Returns Product Id.
     * Product Id
     */
    public function getProductId(): ?int
    {
        if (count($this->productId) == 0) {
            return null;
        }
        return $this->productId['value'];
    }

    /**
     * Sets Product Id.
     * Product Id
     *
     * @maps ProductId
     */
    public function setProductId(?int $productId): void
    {
        $this->productId['value'] = $productId;
    }

    /**
     * Unsets Product Id.
     * Product Id
     */
    public function unsetProductId(): void
    {
        $this->productId = [];
    }

    /**
     * Returns Product Code.
     * Product Code
     *
     * Examples:
     *
     * 10    TMF Charges
     *
     * 11    Tunnel/Bridges
     *
     * 12    Motorway toll
     *
     * 13    Ferries
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code
     *
     * Examples:
     *
     * 10    TMF Charges
     *
     * 11    Tunnel/Bridges
     *
     * 12    Motorway toll
     *
     * 13    Ferries
     *
     * @maps ProductCode
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code
     *
     * Examples:
     *
     * 10    TMF Charges
     *
     * 11    Tunnel/Bridges
     *
     * 12    Motorway toll
     *
     * 13    Ferries
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Product Name.
     * Product Name
     *
     * Examples:
     *
     * Unleaded - High octane
     *
     * Unleaded - Medium octane
     *
     * Unleaded - Low octane
     *
     * Unleaded Environmental
     */
    public function getProductName(): ?string
    {
        if (count($this->productName) == 0) {
            return null;
        }
        return $this->productName['value'];
    }

    /**
     * Sets Product Name.
     * Product Name
     *
     * Examples:
     *
     * Unleaded - High octane
     *
     * Unleaded - Medium octane
     *
     * Unleaded - Low octane
     *
     * Unleaded Environmental
     *
     * @maps ProductName
     */
    public function setProductName(?string $productName): void
    {
        $this->productName['value'] = $productName;
    }

    /**
     * Unsets Product Name.
     * Product Name
     *
     * Examples:
     *
     * Unleaded - High octane
     *
     * Unleaded - Medium octane
     *
     * Unleaded - Low octane
     *
     * Unleaded Environmental
     */
    public function unsetProductName(): void
    {
        $this->productName = [];
    }

    /**
     * Returns Product Group Id.
     * Product Group Id
     *
     * Example:
     *
     * 1    Parent Product Group
     *
     * 2    All Fuels
     *
     * 3    Motor gasoline
     *
     * 4    2 stroke
     *
     * 5    Autogas
     *
     * 6    CNG
     */
    public function getProductGroupId(): ?int
    {
        if (count($this->productGroupId) == 0) {
            return null;
        }
        return $this->productGroupId['value'];
    }

    /**
     * Sets Product Group Id.
     * Product Group Id
     *
     * Example:
     *
     * 1    Parent Product Group
     *
     * 2    All Fuels
     *
     * 3    Motor gasoline
     *
     * 4    2 stroke
     *
     * 5    Autogas
     *
     * 6    CNG
     *
     * @maps ProductGroupId
     */
    public function setProductGroupId(?int $productGroupId): void
    {
        $this->productGroupId['value'] = $productGroupId;
    }

    /**
     * Unsets Product Group Id.
     * Product Group Id
     *
     * Example:
     *
     * 1    Parent Product Group
     *
     * 2    All Fuels
     *
     * 3    Motor gasoline
     *
     * 4    2 stroke
     *
     * 5    Autogas
     *
     * 6    CNG
     */
    public function unsetProductGroupId(): void
    {
        $this->productGroupId = [];
    }

    /**
     * Returns Product Group Name.
     * Product Group Name
     *
     * Example:
     *
     * 1    Parent Product Group
     *
     * 2    All Fuels
     *
     * 3    Motor gasoline
     *
     * 4    2 stroke
     *
     * 5    Autogas
     *
     * 6    CNG
     *
     * 7    Automotive Gas Oil
     */
    public function getProductGroupName(): ?string
    {
        if (count($this->productGroupName) == 0) {
            return null;
        }
        return $this->productGroupName['value'];
    }

    /**
     * Sets Product Group Name.
     * Product Group Name
     *
     * Example:
     *
     * 1    Parent Product Group
     *
     * 2    All Fuels
     *
     * 3    Motor gasoline
     *
     * 4    2 stroke
     *
     * 5    Autogas
     *
     * 6    CNG
     *
     * 7    Automotive Gas Oil
     *
     * @maps ProductGroupName
     */
    public function setProductGroupName(?string $productGroupName): void
    {
        $this->productGroupName['value'] = $productGroupName;
    }

    /**
     * Unsets Product Group Name.
     * Product Group Name
     *
     * Example:
     *
     * 1    Parent Product Group
     *
     * 2    All Fuels
     *
     * 3    Motor gasoline
     *
     * 4    2 stroke
     *
     * 5    Autogas
     *
     * 6    CNG
     *
     * 7    Automotive Gas Oil
     */
    public function unsetProductGroupName(): void
    {
        $this->productGroupName = [];
    }

    /**
     * Returns Site Group Id.
     * Site Group Id
     * Example: 202
     */
    public function getSiteGroupId(): ?int
    {
        if (count($this->siteGroupId) == 0) {
            return null;
        }
        return $this->siteGroupId['value'];
    }

    /**
     * Sets Site Group Id.
     * Site Group Id
     * Example: 202
     *
     * @maps SiteGroupId
     */
    public function setSiteGroupId(?int $siteGroupId): void
    {
        $this->siteGroupId['value'] = $siteGroupId;
    }

    /**
     * Unsets Site Group Id.
     * Site Group Id
     * Example: 202
     */
    public function unsetSiteGroupId(): void
    {
        $this->siteGroupId = [];
    }

    /**
     * Returns Site Group Name.
     * Site Group Name
     * Example: CZ 9100 ECONOMY NETWORK
     */
    public function getSiteGroupName(): ?string
    {
        if (count($this->siteGroupName) == 0) {
            return null;
        }
        return $this->siteGroupName['value'];
    }

    /**
     * Sets Site Group Name.
     * Site Group Name
     * Example: CZ 9100 ECONOMY NETWORK
     *
     * @maps SiteGroupName
     */
    public function setSiteGroupName(?string $siteGroupName): void
    {
        $this->siteGroupName['value'] = $siteGroupName;
    }

    /**
     * Unsets Site Group Name.
     * Site Group Name
     * Example: CZ 9100 ECONOMY NETWORK
     */
    public function unsetSiteGroupName(): void
    {
        $this->siteGroupName = [];
    }

    /**
     * Returns Total Fuel Quantity.
     * Total Fuel Quantity
     */
    public function getTotalFuelQuantity(): ?int
    {
        if (count($this->totalFuelQuantity) == 0) {
            return null;
        }
        return $this->totalFuelQuantity['value'];
    }

    /**
     * Sets Total Fuel Quantity.
     * Total Fuel Quantity
     *
     * @maps TotalFuelQuantity
     */
    public function setTotalFuelQuantity(?int $totalFuelQuantity): void
    {
        $this->totalFuelQuantity['value'] = $totalFuelQuantity;
    }

    /**
     * Unsets Total Fuel Quantity.
     * Total Fuel Quantity
     */
    public function unsetTotalFuelQuantity(): void
    {
        $this->totalFuelQuantity = [];
    }

    /**
     * Returns Total Net Amount.
     * Total Net amount in invoice currency
     */
    public function getTotalNetAmount(): ?int
    {
        if (count($this->totalNetAmount) == 0) {
            return null;
        }
        return $this->totalNetAmount['value'];
    }

    /**
     * Sets Total Net Amount.
     * Total Net amount in invoice currency
     *
     * @maps TotalNetAmount
     */
    public function setTotalNetAmount(?int $totalNetAmount): void
    {
        $this->totalNetAmount['value'] = $totalNetAmount;
    }

    /**
     * Unsets Total Net Amount.
     * Total Net amount in invoice currency
     */
    public function unsetTotalNetAmount(): void
    {
        $this->totalNetAmount = [];
    }

    /**
     * Returns Total Gross Amount.
     * Total Gross amount in invoice currency
     */
    public function getTotalGrossAmount(): ?int
    {
        if (count($this->totalGrossAmount) == 0) {
            return null;
        }
        return $this->totalGrossAmount['value'];
    }

    /**
     * Sets Total Gross Amount.
     * Total Gross amount in invoice currency
     *
     * @maps TotalGrossAmount
     */
    public function setTotalGrossAmount(?int $totalGrossAmount): void
    {
        $this->totalGrossAmount['value'] = $totalGrossAmount;
    }

    /**
     * Unsets Total Gross Amount.
     * Total Gross amount in invoice currency
     */
    public function unsetTotalGrossAmount(): void
    {
        $this->totalGrossAmount = [];
    }

    /**
     * Returns Invoice Currency Code.
     * ISO currency code
     *
     * Example: GBP
     */
    public function getInvoiceCurrencyCode(): ?string
    {
        if (count($this->invoiceCurrencyCode) == 0) {
            return null;
        }
        return $this->invoiceCurrencyCode['value'];
    }

    /**
     * Sets Invoice Currency Code.
     * ISO currency code
     *
     * Example: GBP
     *
     * @maps InvoiceCurrencyCode
     */
    public function setInvoiceCurrencyCode(?string $invoiceCurrencyCode): void
    {
        $this->invoiceCurrencyCode['value'] = $invoiceCurrencyCode;
    }

    /**
     * Unsets Invoice Currency Code.
     * ISO currency code
     *
     * Example: GBP
     */
    public function unsetInvoiceCurrencyCode(): void
    {
        $this->invoiceCurrencyCode = [];
    }

    /**
     * Returns Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * Example: £, $
     */
    public function getInvoiceCurrencySymbol(): ?string
    {
        if (count($this->invoiceCurrencySymbol) == 0) {
            return null;
        }
        return $this->invoiceCurrencySymbol['value'];
    }

    /**
     * Sets Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * Example: £, $
     *
     * @maps InvoiceCurrencySymbol
     */
    public function setInvoiceCurrencySymbol(?string $invoiceCurrencySymbol): void
    {
        $this->invoiceCurrencySymbol['value'] = $invoiceCurrencySymbol;
    }

    /**
     * Unsets Invoice Currency Symbol.
     * Currency symbol of the Invoice Currency Code
     *
     * Example: £, $
     */
    public function unsetInvoiceCurrencySymbol(): void
    {
        $this->invoiceCurrencySymbol = [];
    }

    /**
     * Returns Customer Retail Value Total Net.
     * Sum of the retail net price
     */
    public function getCustomerRetailValueTotalNet(): ?float
    {
        if (count($this->customerRetailValueTotalNet) == 0) {
            return null;
        }
        return $this->customerRetailValueTotalNet['value'];
    }

    /**
     * Sets Customer Retail Value Total Net.
     * Sum of the retail net price
     *
     * @maps CustomerRetailValueTotalNet
     */
    public function setCustomerRetailValueTotalNet(?float $customerRetailValueTotalNet): void
    {
        $this->customerRetailValueTotalNet['value'] = $customerRetailValueTotalNet;
    }

    /**
     * Unsets Customer Retail Value Total Net.
     * Sum of the retail net price
     */
    public function unsetCustomerRetailValueTotalNet(): void
    {
        $this->customerRetailValueTotalNet = [];
    }

    /**
     * Returns Customer Retail Value Total Gross.
     * Sum of the retail gross price
     */
    public function getCustomerRetailValueTotalGross(): ?float
    {
        if (count($this->customerRetailValueTotalGross) == 0) {
            return null;
        }
        return $this->customerRetailValueTotalGross['value'];
    }

    /**
     * Sets Customer Retail Value Total Gross.
     * Sum of the retail gross price
     *
     * @maps CustomerRetailValueTotalGross
     */
    public function setCustomerRetailValueTotalGross(?float $customerRetailValueTotalGross): void
    {
        $this->customerRetailValueTotalGross['value'] = $customerRetailValueTotalGross;
    }

    /**
     * Unsets Customer Retail Value Total Gross.
     * Sum of the retail gross price
     */
    public function unsetCustomerRetailValueTotalGross(): void
    {
        $this->customerRetailValueTotalGross = [];
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->productId)) {
            $json['ProductId']                     = $this->productId['value'];
        }
        if (!empty($this->productCode)) {
            $json['ProductCode']                   = $this->productCode['value'];
        }
        if (!empty($this->productName)) {
            $json['ProductName']                   = $this->productName['value'];
        }
        if (!empty($this->productGroupId)) {
            $json['ProductGroupId']                = $this->productGroupId['value'];
        }
        if (!empty($this->productGroupName)) {
            $json['ProductGroupName']              = $this->productGroupName['value'];
        }
        if (!empty($this->siteGroupId)) {
            $json['SiteGroupId']                   = $this->siteGroupId['value'];
        }
        if (!empty($this->siteGroupName)) {
            $json['SiteGroupName']                 = $this->siteGroupName['value'];
        }
        if (!empty($this->totalFuelQuantity)) {
            $json['TotalFuelQuantity']             = $this->totalFuelQuantity['value'];
        }
        if (!empty($this->totalNetAmount)) {
            $json['TotalNetAmount']                = $this->totalNetAmount['value'];
        }
        if (!empty($this->totalGrossAmount)) {
            $json['TotalGrossAmount']              = $this->totalGrossAmount['value'];
        }
        if (!empty($this->invoiceCurrencyCode)) {
            $json['InvoiceCurrencyCode']           = $this->invoiceCurrencyCode['value'];
        }
        if (!empty($this->invoiceCurrencySymbol)) {
            $json['InvoiceCurrencySymbol']         = $this->invoiceCurrencySymbol['value'];
        }
        if (!empty($this->customerRetailValueTotalNet)) {
            $json['CustomerRetailValueTotalNet']   = $this->customerRetailValueTotalNet['value'];
        }
        if (!empty($this->customerRetailValueTotalGross)) {
            $json['CustomerRetailValueTotalGross'] = $this->customerRetailValueTotalGross['value'];
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

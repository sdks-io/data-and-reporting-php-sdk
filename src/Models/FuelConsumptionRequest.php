<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class FuelConsumptionRequest implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $colCoId;

    /**
     * @var int|null
     */
    private $colCoCode;

    /**
     * @var int|null
     */
    private $payerId;

    /**
     * @var string|null
     */
    private $payerNumber;

    /**
     * @var Accounts[]|null
     */
    private $accounts;

    /**
     * @var int|null
     */
    private $cardGroupId;

    /**
     * @var string|null
     */
    private $cardGroupName;

    /**
     * @var FuelConsumptionCard[]|null
     */
    private $cards;

    /**
     * @var string|null
     */
    private $fromDate;

    /**
     * @var string|null
     */
    private $toDate;

    /**
     * @var int|null
     */
    private $period;

    /**
     * Returns Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     */
    public function getColCoId(): ?int
    {
        return $this->colCoId;
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id  of the selected payer.
     *
     * Optional if ColCoCode is passed else Mandatory.
     *
     * Example:
     *
     * 1 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId = $colCoId;
    }

    /**
     * Returns Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     */
    public function getColCoCode(): ?int
    {
        return $this->colCoCode;
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code  of the selected payer.
     *
     * Mandatory for serviced OUs such as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional
     * for other countries if ColCoID is provided.
     *
     * Example:
     *
     * 86 for Philippines
     *
     * 5 for UK
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode = $colCoCode;
    }

    /**
     * Returns Payer Id.
     * Payer Id  of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     */
    public function getPayerId(): ?int
    {
        return $this->payerId;
    }

    /**
     * Sets Payer Id.
     * Payer Id  of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId = $payerId;
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     */
    public function getPayerNumber(): ?string
    {
        return $this->payerNumber;
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     * Optional if PayerId is passed else Mandatory
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber = $payerNumber;
    }

    /**
     * Returns Accounts.
     *
     * @return Accounts[]|null
     */
    public function getAccounts(): ?array
    {
        return $this->accounts;
    }

    /**
     * Sets Accounts.
     *
     * @maps Accounts
     *
     * @param Accounts[]|null $accounts
     */
    public function setAccounts(?array $accounts): void
    {
        $this->accounts = $accounts;
    }

    /**
     * Returns Card Group Id.
     * Card Group Id in GFN
     * Optional
     * Example: 200
     */
    public function getCardGroupId(): ?int
    {
        return $this->cardGroupId;
    }

    /**
     * Sets Card Group Id.
     * Card Group Id in GFN
     * Optional
     * Example: 200
     *
     * @maps CardGroupId
     */
    public function setCardGroupId(?int $cardGroupId): void
    {
        $this->cardGroupId = $cardGroupId;
    }

    /**
     * Returns Card Group Name.
     * Card Group Name
     * Optional
     * This input is a search criterion, if given.
     */
    public function getCardGroupName(): ?string
    {
        return $this->cardGroupName;
    }

    /**
     * Sets Card Group Name.
     * Card Group Name
     * Optional
     * This input is a search criterion, if given.
     *
     * @maps CardGroupName
     */
    public function setCardGroupName(?string $cardGroupName): void
    {
        $this->cardGroupName = $cardGroupName;
    }

    /**
     * Returns Cards.
     *
     * @return FuelConsumptionCard[]|null
     */
    public function getCards(): ?array
    {
        return $this->cards;
    }

    /**
     * Sets Cards.
     *
     * @maps Cards
     *
     * @param FuelConsumptionCard[]|null $cards
     */
    public function setCards(?array $cards): void
    {
        $this->cards = $cards;
    }

    /**
     * Returns From Date.
     * Transactions from Date
     * Optional – ‘Period’ will be considered when this field is not provided.
     */
    public function getFromDate(): ?string
    {
        return $this->fromDate;
    }

    /**
     * Sets From Date.
     * Transactions from Date
     * Optional – ‘Period’ will be considered when this field is not provided.
     *
     * @maps FromDate
     */
    public function setFromDate(?string $fromDate): void
    {
        $this->fromDate = $fromDate;
    }

    /**
     * Returns To Date.
     * Transactions to Date
     * Optional
     * Format: yyyyMMdd
     */
    public function getToDate(): ?string
    {
        return $this->toDate;
    }

    /**
     * Sets To Date.
     * Transactions to Date
     * Optional
     * Format: yyyyMMdd
     *
     * @maps ToDate
     */
    public function setToDate(?string $toDate): void
    {
        $this->toDate = $toDate;
    }

    /**
     * Returns Period.
     * Transactions Period. This is ignored when FromDate is supplied on the request
     *
     * Allowed values :
     *
     * 1.    Last 7 Days
     *
     * 2.    Last 30 Days
     *
     * 3.    Last 90 Days
     *
     * Optional - When FromDate/ToDate and Period are not provided, ‘Last 7 Days’ value is considered as
     * default Period.
     */
    public function getPeriod(): ?int
    {
        return $this->period;
    }

    /**
     * Sets Period.
     * Transactions Period. This is ignored when FromDate is supplied on the request
     *
     * Allowed values :
     *
     * 1.    Last 7 Days
     *
     * 2.    Last 30 Days
     *
     * 3.    Last 90 Days
     *
     * Optional - When FromDate/ToDate and Period are not provided, ‘Last 7 Days’ value is considered as
     * default Period.
     *
     * @maps Period
     */
    public function setPeriod(?int $period): void
    {
        $this->period = $period;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->colCoId)) {
            $json['ColCoId']       = $this->colCoId;
        }
        if (isset($this->colCoCode)) {
            $json['ColCoCode']     = $this->colCoCode;
        }
        if (isset($this->payerId)) {
            $json['PayerId']       = $this->payerId;
        }
        if (isset($this->payerNumber)) {
            $json['PayerNumber']   = $this->payerNumber;
        }
        if (isset($this->accounts)) {
            $json['Accounts']      = $this->accounts;
        }
        if (isset($this->cardGroupId)) {
            $json['CardGroupId']   = $this->cardGroupId;
        }
        if (isset($this->cardGroupName)) {
            $json['CardGroupName'] = $this->cardGroupName;
        }
        if (isset($this->cards)) {
            $json['Cards']         = $this->cards;
        }
        if (isset($this->fromDate)) {
            $json['FromDate']      = $this->fromDate;
        }
        if (isset($this->toDate)) {
            $json['ToDate']        = $this->toDate;
        }
        if (isset($this->period)) {
            $json['Period']        = $this->period;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

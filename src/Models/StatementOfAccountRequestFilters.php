<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Models;

use stdClass;

class StatementOfAccountRequestFilters implements \JsonSerializable
{
    /**
     * @var array
     */
    private $colCoCode = [];

    /**
     * @var array
     */
    private $payerId = [];

    /**
     * @var array
     */
    private $payerNumber = [];

    /**
     * @var array
     */
    private $includeMonthlyInvoiceTrend = [];

    /**
     * @var array
     */
    private $includePastStatementOfAccounts = [];

    /**
     * @var array
     */
    private $dueOrOverDueSOADocumentsOnly = [];

    /**
     * @var array
     */
    private $numberOfSOADocuments = [];

    /**
     * @var array
     */
    private $includeAccountInvoicesSummary = [];

    /**
     * @var array
     */
    private $colCoId = [];

    /**
     * @var Accounts[]|null
     */
    private $accounts;

    /**
     * Returns Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Optional If ColCo Id is passed else Mandatory.
     */
    public function getColCoCode(): ?int
    {
        if (count($this->colCoCode) == 0) {
            return null;
        }
        return $this->colCoCode['value'];
    }

    /**
     * Sets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Optional If ColCo Id is passed else Mandatory.
     *
     * @maps ColCoCode
     */
    public function setColCoCode(?int $colCoCode): void
    {
        $this->colCoCode['value'] = $colCoCode;
    }

    /**
     * Unsets Col Co Code.
     * Collecting Company Code (Shell Code) of the selected payer.
     *
     * Optional If ColCo Id is passed else Mandatory.
     */
    public function unsetColCoCode(): void
    {
        $this->colCoCode = [];
    }

    /**
     * Returns Payer Id.
     * Payer Id of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory.
     */
    public function getPayerId(): ?int
    {
        if (count($this->payerId) == 0) {
            return null;
        }
        return $this->payerId['value'];
    }

    /**
     * Sets Payer Id.
     * Payer Id of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory.
     *
     * @maps PayerId
     */
    public function setPayerId(?int $payerId): void
    {
        $this->payerId['value'] = $payerId;
    }

    /**
     * Unsets Payer Id.
     * Payer Id of the selected payer.
     *
     * Optional if PayerNumber is passed else Mandatory.
     */
    public function unsetPayerId(): void
    {
        $this->payerId = [];
    }

    /**
     * Returns Payer Number.
     * Payer Number of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory.
     */
    public function getPayerNumber(): ?string
    {
        if (count($this->payerNumber) == 0) {
            return null;
        }
        return $this->payerNumber['value'];
    }

    /**
     * Sets Payer Number.
     * Payer Number of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory.
     *
     * @maps PayerNumber
     */
    public function setPayerNumber(?string $payerNumber): void
    {
        $this->payerNumber['value'] = $payerNumber;
    }

    /**
     * Unsets Payer Number.
     * Payer Number of the selected payer.
     *
     * Optional if PayerId is passed else Mandatory.
     */
    public function unsetPayerNumber(): void
    {
        $this->payerNumber = [];
    }

    /**
     * Returns Include Monthly Invoice Trend.
     * True/False.
     *
     * Optional. Default is False.
     *
     * True if the past 13 monthly invoice trend to be included as part of the response. Else false.
     */
    public function getIncludeMonthlyInvoiceTrend(): ?bool
    {
        if (count($this->includeMonthlyInvoiceTrend) == 0) {
            return null;
        }
        return $this->includeMonthlyInvoiceTrend['value'];
    }

    /**
     * Sets Include Monthly Invoice Trend.
     * True/False.
     *
     * Optional. Default is False.
     *
     * True if the past 13 monthly invoice trend to be included as part of the response. Else false.
     *
     * @maps IncludeMonthlyInvoiceTrend
     */
    public function setIncludeMonthlyInvoiceTrend(?bool $includeMonthlyInvoiceTrend): void
    {
        $this->includeMonthlyInvoiceTrend['value'] = $includeMonthlyInvoiceTrend;
    }

    /**
     * Unsets Include Monthly Invoice Trend.
     * True/False.
     *
     * Optional. Default is False.
     *
     * True if the past 13 monthly invoice trend to be included as part of the response. Else false.
     */
    public function unsetIncludeMonthlyInvoiceTrend(): void
    {
        $this->includeMonthlyInvoiceTrend = [];
    }

    /**
     * Returns Include Past Statement of Accounts.
     * True/False.
     *
     * Optional. Default is False.
     *
     * True if the past X SOA documents are to be included as part of the response. Else false.
     */
    public function getIncludePastStatementOfAccounts(): ?bool
    {
        if (count($this->includePastStatementOfAccounts) == 0) {
            return null;
        }
        return $this->includePastStatementOfAccounts['value'];
    }

    /**
     * Sets Include Past Statement of Accounts.
     * True/False.
     *
     * Optional. Default is False.
     *
     * True if the past X SOA documents are to be included as part of the response. Else false.
     *
     * @maps IncludePastStatementOfAccounts
     */
    public function setIncludePastStatementOfAccounts(?bool $includePastStatementOfAccounts): void
    {
        $this->includePastStatementOfAccounts['value'] = $includePastStatementOfAccounts;
    }

    /**
     * Unsets Include Past Statement of Accounts.
     * True/False.
     *
     * Optional. Default is False.
     *
     * True if the past X SOA documents are to be included as part of the response. Else false.
     */
    public function unsetIncludePastStatementOfAccounts(): void
    {
        $this->includePastStatementOfAccounts = [];
    }

    /**
     * Returns Due or Over Due SOA Documents Only.
     * True/False
     *
     * Optional Default is False.
     *
     * If true PastStatementOfAccounts entity on this API output should contain the SOA documents that are
     * due or overdue only.
     */
    public function getDueOrOverDueSOADocumentsOnly(): ?bool
    {
        if (count($this->dueOrOverDueSOADocumentsOnly) == 0) {
            return null;
        }
        return $this->dueOrOverDueSOADocumentsOnly['value'];
    }

    /**
     * Sets Due or Over Due SOA Documents Only.
     * True/False
     *
     * Optional Default is False.
     *
     * If true PastStatementOfAccounts entity on this API output should contain the SOA documents that are
     * due or overdue only.
     *
     * @maps DueOrOverDueSOADocumentsOnly
     */
    public function setDueOrOverDueSOADocumentsOnly(?bool $dueOrOverDueSOADocumentsOnly): void
    {
        $this->dueOrOverDueSOADocumentsOnly['value'] = $dueOrOverDueSOADocumentsOnly;
    }

    /**
     * Unsets Due or Over Due SOA Documents Only.
     * True/False
     *
     * Optional Default is False.
     *
     * If true PastStatementOfAccounts entity on this API output should contain the SOA documents that are
     * due or overdue only.
     */
    public function unsetDueOrOverDueSOADocumentsOnly(): void
    {
        $this->dueOrOverDueSOADocumentsOnly = [];
    }

    /**
     * Returns Number of SOA Documents.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to True.
     */
    public function getNumberOfSOADocuments(): ?int
    {
        if (count($this->numberOfSOADocuments) == 0) {
            return null;
        }
        return $this->numberOfSOADocuments['value'];
    }

    /**
     * Sets Number of SOA Documents.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to True.
     *
     * @maps NumberOfSOADocuments
     */
    public function setNumberOfSOADocuments(?int $numberOfSOADocuments): void
    {
        $this->numberOfSOADocuments['value'] = $numberOfSOADocuments;
    }

    /**
     * Unsets Number of SOA Documents.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to True.
     */
    public function unsetNumberOfSOADocuments(): void
    {
        $this->numberOfSOADocuments = [];
    }

    /**
     * Returns Include Account Invoices Summary.
     * True/False
     *
     * Optional.
     *
     * Default value is false.
     *
     * When true InvoicesSummaries list will be returned in the API output.
     */
    public function getIncludeAccountInvoicesSummary(): ?bool
    {
        if (count($this->includeAccountInvoicesSummary) == 0) {
            return null;
        }
        return $this->includeAccountInvoicesSummary['value'];
    }

    /**
     * Sets Include Account Invoices Summary.
     * True/False
     *
     * Optional.
     *
     * Default value is false.
     *
     * When true InvoicesSummaries list will be returned in the API output.
     *
     * @maps IncludeAccountInvoicesSummary
     */
    public function setIncludeAccountInvoicesSummary(?bool $includeAccountInvoicesSummary): void
    {
        $this->includeAccountInvoicesSummary['value'] = $includeAccountInvoicesSummary;
    }

    /**
     * Unsets Include Account Invoices Summary.
     * True/False
     *
     * Optional.
     *
     * Default value is false.
     *
     * When true InvoicesSummaries list will be returned in the API output.
     */
    public function unsetIncludeAccountInvoicesSummary(): void
    {
        $this->includeAccountInvoicesSummary = [];
    }

    /**
     * Returns Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional If ColCo Code is passed else Mandatory.
     */
    public function getColCoId(): ?int
    {
        if (count($this->colCoId) == 0) {
            return null;
        }
        return $this->colCoId['value'];
    }

    /**
     * Sets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional If ColCo Code is passed else Mandatory.
     *
     * @maps ColCoId
     */
    public function setColCoId(?int $colCoId): void
    {
        $this->colCoId['value'] = $colCoId;
    }

    /**
     * Unsets Col Co Id.
     * Collecting Company Id of the selected payer.
     *
     * Optional If ColCo Code is passed else Mandatory.
     */
    public function unsetColCoId(): void
    {
        $this->colCoId = [];
    }

    /**
     * Returns Accounts.
     *
     * @return Accounts[]|null
     */
    public function getAccounts(): ?array
    {
        return $this->accounts;
    }

    /**
     * Sets Accounts.
     *
     * @maps Accounts
     *
     * @param Accounts[]|null $accounts
     */
    public function setAccounts(?array $accounts): void
    {
        $this->accounts = $accounts;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->colCoCode)) {
            $json['ColCoCode']                      = $this->colCoCode['value'];
        }
        if (!empty($this->payerId)) {
            $json['PayerId']                        = $this->payerId['value'];
        }
        if (!empty($this->payerNumber)) {
            $json['PayerNumber']                    = $this->payerNumber['value'];
        }
        if (!empty($this->includeMonthlyInvoiceTrend)) {
            $json['IncludeMonthlyInvoiceTrend']     = $this->includeMonthlyInvoiceTrend['value'];
        }
        if (!empty($this->includePastStatementOfAccounts)) {
            $json['IncludePastStatementOfAccounts'] = $this->includePastStatementOfAccounts['value'];
        }
        if (!empty($this->dueOrOverDueSOADocumentsOnly)) {
            $json['DueOrOverDueSOADocumentsOnly']   = $this->dueOrOverDueSOADocumentsOnly['value'];
        }
        if (!empty($this->numberOfSOADocuments)) {
            $json['NumberOfSOADocuments']           = $this->numberOfSOADocuments['value'];
        }
        if (!empty($this->includeAccountInvoicesSummary)) {
            $json['IncludeAccountInvoicesSummary']  = $this->includeAccountInvoicesSummary['value'];
        }
        if (!empty($this->colCoId)) {
            $json['ColCoId']                        = $this->colCoId['value'];
        }
        if (isset($this->accounts)) {
            $json['Accounts']                       = $this->accounts;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

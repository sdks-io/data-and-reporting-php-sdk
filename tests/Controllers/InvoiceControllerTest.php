<?php

declare(strict_types=1);

/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellDataReportingAPIsLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use ShellDataReportingAPIsLib\Controllers\InvoiceController;
use ShellDataReportingAPIsLib\Exceptions;
use ShellDataReportingAPIsLib\Models;

class InvoiceControllerTest extends BaseTestController
{
    /**
     * @var InvoiceController InvoiceController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getInvoiceController();
    }

    public function testInvoiceSearch()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoId":14,"PayerId":78,"PayerNumber":"DE26688478","AccountId":92,"A' .
            'ccountNumber":"DE26702892","InvoiceId":4013059,"InvoiceNumber":"0123456789","FromDa' .
            'te":"20170830","ToDate":"20171031","InvoiceDate":"20171031","Type":"Original","Summ' .
            'aryDocumentId":1616729,"SummaryDocumentNumber":"1283899/289261063/2019","StatementO' .
            'fAccountId":"DE26702892","SoAReferenceNumber":"1283899","Period":1,"InvoiceStatus":' .
            '"Due","InvoicedOnBehalfOf":"DE","IncludeEInvoiceDetails":false,"SortBy":[1]},"PageS' .
            'ize":50,"Page":1}',
            Models\InvoiceSearchRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->invoiceSearch($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"18c955d1-b3ec-4dc0-95da-76e67afb891a","Status":"SUCCESS","Data":' .
                '[{"AccountFullName":"powder ambition ERF  ","AccountId":179827,"AccountNumber":' .
                '"DE26702892","AccountShortName":"soft grocery Argyle  ","ColCoId":14,"ColCoOpCo' .
                'Id":"014","CurrentBillingFrequency":"Last day of month","CurrentBillingFrequenc' .
                'yId":40,"CurrentDistributionMethod":"e-mail","CurrentDistributionMethodId":1,"C' .
                'ustomerCurrencyCode":"EUR","CustomerCurrencySymbol":"€","DelCoClientNumber":"01' .
                '4","DelCoId":14,"DelCoOpCoId":"014","DocumentType":"Invoice","DocumentTypeId":1' .
                ',"DueDate":"20190707","GrossAmountCustomerCurrency":22.85,"GrossAmountTransacti' .
                'onCurrency":22.85,"InvoiceDate":"20190630","InvoicedBy":"euroShell Deutschland ' .
                'GmbH & Co. KG","InvoicedOnBehalfOf":"Germany","InvoiceId":4013059,"InvoiceNumbe' .
                'r":"6402009004","IsInternational":false,"IsNational":true,"NetAmountCustomerCur' .
                'rency":19.2,"NetAmountTransactionCurrency":19.2,"PayerId":164825,"PayerNumber":' .
                '"DE26688478","PaymentTerms":"7 days after invoice","PaymentTermsId":9,"Replacem' .
                'entInvoiceId":null,"ReversalInvoiceId":null,"Status":"Paid","SummaryDocumentBil' .
                'lingType":"Standard Invoice","SummaryDocumentBillingTypeId":0,"SummaryDocumentD' .
                'ate":"20190630","SummaryDocumentDDAmount":22.85,"SummaryDocumentDueDate":"20190' .
                '707","SummaryDocumentId":1616729,"SummaryDocumentIsFullyPaid":true,"SummaryDocu' .
                'mentNumber":"1283899/289261063/2019","SummaryDocumentPaidAmount":22.85,"Summary' .
                'DocumentSoAReferenceNumber":"2000745709","SummaryDocumentStatementOfAccountId":' .
                '2000745709,"TransactionCurrencyCode":"EUR","TransactionCurrencySymbol":"€","Typ' .
                'e":"Original","TypeId":1,"VATAmountCustomerCurrency":3.65,"VATAmountTransaction' .
                'Currency":3.65,"VATCountry":"Germany","VATCountryId":9,"VATCountryISOCode":"DE"' .
                ',"VATCountryOpCoId":"014"}],"Page":1,"PageSize":50,"TotalRecords":1,"TotalPages' .
                '":1}'
            )))
            ->assert();
    }

    public function testInvoiceSummary()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoId":14,"PayerId":78,"PayerNumber":"DE26688478","AccountId":92,"A' .
            'ccountNumber":"DE26702892","InvoiceId":4013059,"InvoiceNumber":"0123456789","FromDa' .
            'te":"20170830","ToDate":"20171031","InvoiceDate":"20171031","Type":"Original","Summ' .
            'aryDocumentId":1616729,"SummaryDocumentNumber":"1283899/289261063/2019","StatementO' .
            'fAccountId":"DE26702892","SoAReferenceNumber":"1283899","Period":1,"InvoiceStatus":' .
            '"Due","InvoicedOnBehalfOf":"DE","IncludeEInvoiceDetails":false}}',
            Models\InvoiceSummaryRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->invoiceSummary($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCCESS","Data":' .
                '[{"TotalInvoices":1,"TotalGrossAmountCustomerCurrency":22.85,"TotalNetAmountCus' .
                'tomerCurrency":19.2,"TotalVATAmountCustomerCurrency":3.65,"CustomerCurrencyCode' .
                '":"EUR","CustomerCurrencySymbol":"€"}]}'
            )))
            ->assert();
    }

    public function testStatementOfAccount()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoCode":32,"PayerId":308,"PayerNumber":"CZ56891709","AccountNumber' .
            '":"CZ56891900","Accountid":6928,"IncludeMonthlyInvoiceTrend":true,"IncludePastState' .
            'mentOfAccounts":true,"DueOrOverDueSOADocumentsOnly":false,"NumberOfSOADocuments":10' .
            ',"IncludeAccountInvoicesSummary":true}}',
            Models\StatementOfAccountRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->statementOfAccount($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"5acba53b-3ce7-4f4b-ab59-1db09399aa6a","Status":"SUCCESS","Data":' .
                '[{"LastStatementOfAccount":{"AmountDue":123699.71,"AmountNotOverdue":136604.83,' .
                '"AmountOverdue":926469.11,"CreditLimit":7000000,"CreditLimitCurrencyCode":"CZK"' .
                ',"CreditLimitCurrencySymbol":"Kč","CreditLimitInCustomerCurrency":286826.469986' .
                ',"CurrencyCode":"EUR","CurrencySymbol":"€","LastPaymentCurrencyCode":"EUR","Las' .
                'tPaymentCurrencySymbol":"€","LastPaymentDate":"20220209","LastPaymentValue":179' .
                '18.98,"OutstandingBalance":1186773.65,"PayerId":308,"PayerNumber":"CZ56891709",' .
                '"PaymentDueDate":"20230608","PaymentMethod":"Incoming - Bank Transfer","Payment' .
                'MethodId":4,"PaymentTerms":"30 days after Invoice","PaymentTermsId":4,"SoARefer' .
                'enceNumber":"2003923319","StatementDate":"20230509","StatementOfAccountId":2003' .
                '923319,"TotalBillingDocuments":6,"TotalSummaryBillingDocuments":1,"UnallocatedP' .
                'ayment":0},"MonthlyInvoiceTrend":null,"PastStatementOfAccounts":[{"AmountDue":1' .
                '36604.83,"AmountNotOverdue":130344.09,"AmountOverdue":796109.41,"AmountOverdueF' .
                'romUnallocated":0,"AmountPaid":0,"BalanceOnThisStatement":5866.1,"BillingCurren' .
                'cyCode":"EUR","BillingCurrencySymbol":"€","CreditLimit":7000000,"CreditLimitCur' .
                'rencyCode":"CZK","CreditLimitCurrencySymbol":"Kč","CreditLimitInCustomerCurrenc' .
                'y":286826.4699857,"CurrencyCode":"EUR","CurrencySymbol":"€","FullyPaid":false,"' .
                'LastPaymentCurrencyCode":"EUR","LastPaymentCurrencySymbol":"€","LastPaymentDate' .
                '":"20220209","LastPaymentValue":17918.98,"OutstandingBalance":1063058.33,"Payer' .
                'Id":308,"PayerNumber":"CZ56891709","PaymentDueDate":"20230511","SoAReferenceNum' .
                'ber":"2003920583","StatementDate":"20230411","StatementOfAccountId":2003920583,' .
                '"TotalBillingDocuments":3,"TotalNetAmountBillingCurrency":4847.94,"TotalSummary' .
                'BillingDocuments":1,"TotalVATAmountBillingCurrency":1018.16,"UnallocatedPayment' .
                '":0,"LocalCurrencyCode":"EUR","LocalCurrencySymbol":"€","LocalCurrencyExchangeR' .
                'ate":24.405}],"PaymentsSinceLastSOA":null,"InvoicesSummaries":null}]}'
            )))
            ->assert();
    }

    public function testDates()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoCode":0,"PayerId":0,"PayerNumber":"string","IncludeMonthlyInvoic' .
            'eTrend":true,"IncludePastStatementOfAccounts":true,"DueOrOverDueSOADocumentsOnly":t' .
            'rue,"NumberOfSOADocuments":0,"IncludeAccountInvoicesSummary":true,"ColCoId":0,"Acco' .
            'unts":[{"AccountId":3453,"AccountNumber":"GB000000124"}]}}',
            Models\InvoiceDatesRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->dates($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCCESS","Data":' .
                '[{"InvoiceNumbers":["6402009004"],"InvoiceDates":["20170101"]}]}'
            )))
            ->assert();
    }

    public function testSearchStatementOfAccount()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoCode":18,"PayerNumber":"NL99781417","InvoiceNumber":"0123456789"' .
            ',"FromDate":"2022/05/04","ToDate":"2022/05/10","Period":1,"InvoiceDate":"20170830",' .
            '"InvoiceStatus":["Due"],"SortBy":[1]},"Page":1,"PageSize":10}',
            Models\SearchStatementOfAccountRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->searchStatementOfAccount($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCCESS","Data":' .
                '[{"StatementOfAccountId":2001581712,"SoAReferenceNumber":"2001581712","Document' .
                'ReferenceNumber":null,"StatementDate":"20220505","PayerId":17150,"PayerNumber":' .
                '"NL99781417","AmountDue":0,"AmountOverdue":197046.47,"CurrencyCode":"EUR","Curr' .
                'encySymbol":"€","DueDate":"20220604","InvoicedOnBehalfOf":"Netherlands","Status' .
                '":"OverDue","GrossAmountCustomerCurrency":0}],"Page":1,"TotalRecords":62,"Total' .
                'Pages":7,"PageSize":10}'
            )))
            ->assert();
    }

    public function testSearchDocuments()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"PayerNumber":"DE00000096","AccountNumber":"DE00000096","ColCoCode":14' .
            ',"AccountNumberList":["DE00000123","DE00000225"],"InvoiceNumber":"1234567","Invoice' .
            'NumberList":["6400013693","9421000010"],"InvoiceStatus":"NEW","IssuingDateFrom":"20' .
            '23/05/01","IssuingDateTo":"2023/06/30","DueDateFrom":"2023/05/04","DueDateTo":"2023' .
            '/06/30","GrossAmount":"1000","GrossAmountOperator":"LT","DocumentType":"SOA","VATIs' .
            'suerCountry":"DE","SortyBy":["InvoiceNumber ASC","InvoiceDate DESC"]},"Page":"1","P' .
            'ageSize":"50"}',
            Models\SearchDocumentsRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->searchDocuments($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"a8b81c1d-f44a-4365-8113-8958061c0b7e","Status":"SUCCESS","Data":' .
                '[{"DocumentReference":311161,"InvoiceNumber":"6400013693","PayerName":"DE000000' .
                '96","AccountNumber":"DE00000096","AccountName":"DE00000096","DocumentType":"NAT' .
                '","GrossAmount":-3141.93,"NetAmount":0,"TaxAmount":0,"CurrencyCode":"EUR","Invo' .
                'iceStatus":"NEW","InvoiceDate":"2023/01/31","DueDate":"2023/02/07","VATCountryI' .
                'SOCode":"DE"}],"TotalRecords":2,"TotalRecordsOnPage":2,"IsFirstPage":true,"IsLa' .
                'stPage":true}'
            )))
            ->assert();
    }

    public function testEidSearch()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoCode":32,"AccountGroupCountry":32,"AccountGroupId":["122"],"Acco' .
            'untGroupName":null,"FromDate":"2017/08/30","ToDate":"2017/10/31","InvoiceType":"NAT' .
            '","InvoiceStatus":"NEW","SortBy":["DocumentDate ASC"]},"Page":1,"PageSize":10}',
            Models\EIDSearchRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->eidSearch($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                '{"RequestId":"a0a1596f-b242-4672-b513-66c5e5554195","Status":"SUCCESS","Data":' .
                '[{"DocumentId":15029,"AccountGroupId":"122","AccountGroupName":"EID-122","Docum' .
                'entType":"INT","DocumentFormat":"FLAT","DocumentDate":"2022/12/28","NumberOfInv' .
                'oices":1,"FileSize":1624,"DocumentStatus":"DOWNLOADED","DocumentName":"032_122_' .
                'INT_28122022.TXT"}],"PageSize":1,"Page":1,"TotalPages":12,"TotalRecords":120,"I' .
                'sFirstPage":true,"IsLastPage":false}'
            )))
            ->assert();
    }

    public function testDownload()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoCode":18,"PayerNumber":"NL99781417","AccountNumber":["NL99781420' .
            '"],"DocumentReference":[1234567890],"InvoiceOrSOANumber":"2234556"}}',
            Models\InvoiceDownloadRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->download($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/octet-stream', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testEidDownload()
    {
        // Parameters for the API call
        $requestId = '2b0cbe11-f109-4c43-9201-49af0370df1c';
        $body = TestParam::object(
            '{"Filters":{"ColCoCode":18,"EIDList":["1710187","1734566"],"AccountGroupCountry":1' .
            '8,"AccountGroupIdList":["26685402"]}}',
            Models\EIDDownloadRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->eidDownload($requestId, $body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/octet-stream', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }
}
